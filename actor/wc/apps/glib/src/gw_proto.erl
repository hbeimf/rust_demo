%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.2
-module(gw_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("gw_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'VerifyReq'() :: #'VerifyReq'{}.
-type 'GetEntranceReq'() :: #'GetEntranceReq'{}.
-type 'GetUpgradeRes'() :: #'GetUpgradeRes'{}.
-type 'GetEntranceRes'() :: #'GetEntranceRes'{}.
-type 'EnterGameRes'() :: #'EnterGameRes'{}.
-type 'CommonStatus'() :: #'CommonStatus'{}.
-type 'VerifyRes'() :: #'VerifyRes'{}.
-type 'EnterGameReq'() :: #'EnterGameReq'{}.
-type 'GetUpgradeReq'() :: #'GetUpgradeReq'{}.
-type 'TestSpeedRes'() :: #'TestSpeedRes'{}.
-type 'TestSpeedReq'() :: #'TestSpeedReq'{}.
-export_type(['VerifyReq'/0, 'GetEntranceReq'/0, 'GetUpgradeRes'/0, 'GetEntranceRes'/0, 'EnterGameRes'/0, 'CommonStatus'/0, 'VerifyRes'/0, 'EnterGameReq'/0, 'GetUpgradeReq'/0, 'TestSpeedRes'/0, 'TestSpeedReq'/0]).

-spec encode_msg(#'VerifyReq'{} | #'GetEntranceReq'{} | #'GetUpgradeRes'{} | #'GetEntranceRes'{} | #'EnterGameRes'{} | #'CommonStatus'{} | #'VerifyRes'{} | #'EnterGameReq'{} | #'GetUpgradeReq'{} | #'TestSpeedRes'{} | #'TestSpeedReq'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'VerifyReq'{} | #'GetEntranceReq'{} | #'GetUpgradeRes'{} | #'GetEntranceRes'{} | #'EnterGameRes'{} | #'CommonStatus'{} | #'VerifyRes'{} | #'EnterGameReq'{} | #'GetUpgradeReq'{} | #'TestSpeedRes'{} | #'TestSpeedReq'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'VerifyReq'{} -> e_msg_VerifyReq(Msg, TrUserData);
      #'GetEntranceReq'{} ->
	  e_msg_GetEntranceReq(Msg, TrUserData);
      #'GetUpgradeRes'{} ->
	  e_msg_GetUpgradeRes(Msg, TrUserData);
      #'GetEntranceRes'{} ->
	  e_msg_GetEntranceRes(Msg, TrUserData);
      #'EnterGameRes'{} ->
	  e_msg_EnterGameRes(Msg, TrUserData);
      #'CommonStatus'{} ->
	  e_msg_CommonStatus(Msg, TrUserData);
      #'VerifyRes'{} -> e_msg_VerifyRes(Msg, TrUserData);
      #'EnterGameReq'{} ->
	  e_msg_EnterGameReq(Msg, TrUserData);
      #'GetUpgradeReq'{} ->
	  e_msg_GetUpgradeReq(Msg, TrUserData);
      #'TestSpeedRes'{} ->
	  e_msg_TestSpeedRes(Msg, TrUserData);
      #'TestSpeedReq'{} -> e_msg_TestSpeedReq(Msg, TrUserData)
    end.



e_msg_VerifyReq(Msg, TrUserData) ->
    e_msg_VerifyReq(Msg, <<>>, TrUserData).


e_msg_VerifyReq(#'VerifyReq'{identity = F1,
			     channel_id = F2},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_GetEntranceReq(Msg, TrUserData) ->
    e_msg_GetEntranceReq(Msg, <<>>, TrUserData).


e_msg_GetEntranceReq(#'GetEntranceReq'{identity = F1,
				       channel_id = F2, server_type = F3,
				       is_app = F4},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_type_int32(TrF4, <<B3/binary, 32>>)
	     end
	   end
    end.

e_msg_GetUpgradeRes(Msg, TrUserData) ->
    e_msg_GetUpgradeRes(Msg, <<>>, TrUserData).


e_msg_GetUpgradeRes(#'GetUpgradeRes'{server_type = F1,
				     version = F2, download_url = F3},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_GetEntranceRes(Msg, TrUserData) ->
    e_msg_GetEntranceRes(Msg, <<>>, TrUserData).


e_msg_GetEntranceRes(#'GetEntranceRes'{entrace_url = F1,
				       server_type = F2, server_id = F3,
				       version = F4, download_url = F5},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false -> e_type_string(TrF5, <<B4/binary, 42>>)
	     end
	   end
    end.

e_msg_EnterGameRes(Msg, TrUserData) ->
    e_msg_EnterGameRes(Msg, <<>>, TrUserData).


e_msg_EnterGameRes(#'EnterGameRes'{code = F1, msg = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_CommonStatus(Msg, TrUserData) ->
    e_msg_CommonStatus(Msg, <<>>, TrUserData).


e_msg_CommonStatus(#'CommonStatus'{code = F1, msg = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_VerifyRes(Msg, TrUserData) ->
    e_msg_VerifyRes(Msg, <<>>, TrUserData).


e_msg_VerifyRes(#'VerifyRes'{code = F1, uid = F2,
			     msg = F3},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_EnterGameReq(_Msg, _TrUserData) -> <<>>.

e_msg_GetUpgradeReq(Msg, TrUserData) ->
    e_msg_GetUpgradeReq(Msg, <<>>, TrUserData).


e_msg_GetUpgradeReq(#'GetUpgradeReq'{server_type = F1},
		    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_TestSpeedRes(_Msg, _TrUserData) -> <<>>.

e_msg_TestSpeedReq(_Msg, _TrUserData) -> <<>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'VerifyReq' ->
	  try d_msg_VerifyReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'VerifyReq', {Class, Reason, StackTrace}}}})
	  end;
      'GetEntranceReq' ->
	  try d_msg_GetEntranceReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GetEntranceReq', {Class, Reason, StackTrace}}}})
	  end;
      'GetUpgradeRes' ->
	  try d_msg_GetUpgradeRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GetUpgradeRes', {Class, Reason, StackTrace}}}})
	  end;
      'GetEntranceRes' ->
	  try d_msg_GetEntranceRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GetEntranceRes', {Class, Reason, StackTrace}}}})
	  end;
      'EnterGameRes' ->
	  try d_msg_EnterGameRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'EnterGameRes', {Class, Reason, StackTrace}}}})
	  end;
      'CommonStatus' ->
	  try d_msg_CommonStatus(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CommonStatus', {Class, Reason, StackTrace}}}})
	  end;
      'VerifyRes' ->
	  try d_msg_VerifyRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'VerifyRes', {Class, Reason, StackTrace}}}})
	  end;
      'EnterGameReq' ->
	  try d_msg_EnterGameReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'EnterGameReq', {Class, Reason, StackTrace}}}})
	  end;
      'GetUpgradeReq' ->
	  try d_msg_GetUpgradeReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GetUpgradeReq', {Class, Reason, StackTrace}}}})
	  end;
      'TestSpeedRes' ->
	  try d_msg_TestSpeedRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'TestSpeedRes', {Class, Reason, StackTrace}}}})
	  end;
      'TestSpeedReq' ->
	  try d_msg_TestSpeedReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'TestSpeedReq', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_VerifyReq(Bin, TrUserData) ->
    dfp_read_field_def_VerifyReq(Bin, 0, 0,
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_VerifyReq(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_VerifyReq_identity(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_VerifyReq(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_VerifyReq_channel_id(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_VerifyReq(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'VerifyReq'{identity = F@_1, channel_id = F@_2};
dfp_read_field_def_VerifyReq(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_VerifyReq(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_VerifyReq(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VerifyReq(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_VerifyReq(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_VerifyReq_identity(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_VerifyReq_channel_id(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VerifyReq(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_VerifyReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_VerifyReq(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_VerifyReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_VerifyReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_VerifyReq(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'VerifyReq'{identity = F@_1, channel_id = F@_2}.

d_field_VerifyReq_identity(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_VerifyReq_identity(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_VerifyReq_identity(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_VerifyReq(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_VerifyReq_channel_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_VerifyReq_channel_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_VerifyReq_channel_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_VerifyReq(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_VerifyReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_VerifyReq(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_VerifyReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_VerifyReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_VerifyReq(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_VerifyReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VerifyReq(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_VerifyReq(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_VerifyReq(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_VerifyReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_VerifyReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

d_msg_GetEntranceReq(Bin, TrUserData) ->
    dfp_read_field_def_GetEntranceReq(Bin, 0, 0,
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData), id(0, TrUserData),
				      TrUserData).

dfp_read_field_def_GetEntranceReq(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_GetEntranceReq_identity(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_GetEntranceReq(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_GetEntranceReq_channel_id(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_GetEntranceReq(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_GetEntranceReq_server_type(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_GetEntranceReq(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_GetEntranceReq_is_app(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_GetEntranceReq(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #'GetEntranceReq'{identity = F@_1, channel_id = F@_2,
		      server_type = F@_3, is_app = F@_4};
dfp_read_field_def_GetEntranceReq(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_GetEntranceReq(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_GetEntranceReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetEntranceReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
dg_read_field_def_GetEntranceReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetEntranceReq_identity(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      18 ->
	  d_field_GetEntranceReq_channel_id(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      26 ->
	  d_field_GetEntranceReq_server_type(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_GetEntranceReq_is_app(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetEntranceReq(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    1 ->
		skip_64_GetEntranceReq(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    2 ->
		skip_length_delimited_GetEntranceReq(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
	    3 ->
		skip_group_GetEntranceReq(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_GetEntranceReq(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData)
	  end
    end;
dg_read_field_def_GetEntranceReq(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #'GetEntranceReq'{identity = F@_1, channel_id = F@_2,
		      server_type = F@_3, is_app = F@_4}.

d_field_GetEntranceReq_identity(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_GetEntranceReq_identity(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_GetEntranceReq_identity(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetEntranceReq(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_GetEntranceReq_channel_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_GetEntranceReq_channel_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_GetEntranceReq_channel_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetEntranceReq(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, TrUserData).

d_field_GetEntranceReq_server_type(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_GetEntranceReq_server_type(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_GetEntranceReq_server_type(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetEntranceReq(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, TrUserData).

d_field_GetEntranceReq_is_app(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_GetEntranceReq_is_app(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_GetEntranceReq_is_app(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_GetEntranceReq(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, TrUserData).

skip_varint_GetEntranceReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_GetEntranceReq(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
skip_varint_GetEntranceReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_GetEntranceReq(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_GetEntranceReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetEntranceReq(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
skip_length_delimited_GetEntranceReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetEntranceReq(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_group_GetEntranceReq(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetEntranceReq(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_32_GetEntranceReq(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_GetEntranceReq(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_64_GetEntranceReq(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_GetEntranceReq(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

d_msg_GetUpgradeRes(Bin, TrUserData) ->
    dfp_read_field_def_GetUpgradeRes(Bin, 0, 0,
				     id(<<>>, TrUserData), id(<<>>, TrUserData),
				     id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_GetUpgradeRes(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_GetUpgradeRes_server_type(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_GetUpgradeRes(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_GetUpgradeRes_version(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_GetUpgradeRes(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_GetUpgradeRes_download_url(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_GetUpgradeRes(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    #'GetUpgradeRes'{server_type = F@_1, version = F@_2,
		     download_url = F@_3};
dfp_read_field_def_GetUpgradeRes(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    dg_read_field_def_GetUpgradeRes(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

dg_read_field_def_GetUpgradeRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetUpgradeRes(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
dg_read_field_def_GetUpgradeRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetUpgradeRes_server_type(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      18 ->
	  d_field_GetUpgradeRes_version(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_GetUpgradeRes_download_url(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetUpgradeRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    1 ->
		skip_64_GetUpgradeRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    2 ->
		skip_length_delimited_GetUpgradeRes(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_GetUpgradeRes(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, TrUserData);
	    5 ->
		skip_32_GetUpgradeRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData)
	  end
    end;
dg_read_field_def_GetUpgradeRes(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #'GetUpgradeRes'{server_type = F@_1, version = F@_2,
		     download_url = F@_3}.

d_field_GetUpgradeRes_server_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_GetUpgradeRes_server_type(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_GetUpgradeRes_server_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetUpgradeRes(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, TrUserData).

d_field_GetUpgradeRes_version(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_GetUpgradeRes_version(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_GetUpgradeRes_version(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetUpgradeRes(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, TrUserData).

d_field_GetUpgradeRes_download_url(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_GetUpgradeRes_download_url(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_GetUpgradeRes_download_url(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetUpgradeRes(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, TrUserData).

skip_varint_GetUpgradeRes(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_GetUpgradeRes(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
skip_varint_GetUpgradeRes(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_GetUpgradeRes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_length_delimited_GetUpgradeRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetUpgradeRes(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
skip_length_delimited_GetUpgradeRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetUpgradeRes(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, TrUserData).

skip_group_GetUpgradeRes(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetUpgradeRes(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_32_GetUpgradeRes(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_GetUpgradeRes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_64_GetUpgradeRes(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_GetUpgradeRes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

d_msg_GetEntranceRes(Bin, TrUserData) ->
    dfp_read_field_def_GetEntranceRes(Bin, 0, 0,
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_GetEntranceRes(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetEntranceRes_entrace_url(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_GetEntranceRes(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetEntranceRes_server_type(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_GetEntranceRes(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetEntranceRes_server_id(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_GetEntranceRes(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetEntranceRes_version(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_GetEntranceRes(<<42, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_GetEntranceRes_download_url(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_GetEntranceRes(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, _) ->
    #'GetEntranceRes'{entrace_url = F@_1,
		      server_type = F@_2, server_id = F@_3, version = F@_4,
		      download_url = F@_5};
dfp_read_field_def_GetEntranceRes(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_GetEntranceRes(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_GetEntranceRes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetEntranceRes(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
dg_read_field_def_GetEntranceRes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetEntranceRes_entrace_url(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      18 ->
	  d_field_GetEntranceRes_server_type(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      26 ->
	  d_field_GetEntranceRes_server_id(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_GetEntranceRes_version(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_GetEntranceRes_download_url(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetEntranceRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_GetEntranceRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_GetEntranceRes(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    3 ->
		skip_group_GetEntranceRes(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_GetEntranceRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_GetEntranceRes(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    #'GetEntranceRes'{entrace_url = F@_1,
		      server_type = F@_2, server_id = F@_3, version = F@_4,
		      download_url = F@_5}.

d_field_GetEntranceRes_entrace_url(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_GetEntranceRes_entrace_url(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_GetEntranceRes_entrace_url(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetEntranceRes(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5,
				      TrUserData).

d_field_GetEntranceRes_server_type(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_GetEntranceRes_server_type(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_GetEntranceRes_server_type(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetEntranceRes(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_GetEntranceRes_server_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_GetEntranceRes_server_id(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_GetEntranceRes_server_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetEntranceRes(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_GetEntranceRes_version(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_GetEntranceRes_version(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_GetEntranceRes_version(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetEntranceRes(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_GetEntranceRes_download_url(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_GetEntranceRes_download_url(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_GetEntranceRes_download_url(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetEntranceRes(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_GetEntranceRes(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_GetEntranceRes(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
skip_varint_GetEntranceRes(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_GetEntranceRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_GetEntranceRes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_GetEntranceRes(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
skip_length_delimited_GetEntranceRes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetEntranceRes(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_GetEntranceRes(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetEntranceRes(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_GetEntranceRes(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_GetEntranceRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_GetEntranceRes(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_GetEntranceRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

d_msg_EnterGameRes(Bin, TrUserData) ->
    dfp_read_field_def_EnterGameRes(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_EnterGameRes(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_EnterGameRes_code(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_EnterGameRes(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_EnterGameRes_msg(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_EnterGameRes(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'EnterGameRes'{code = F@_1, msg = F@_2};
dfp_read_field_def_EnterGameRes(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_EnterGameRes(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_EnterGameRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnterGameRes(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_EnterGameRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_EnterGameRes_code(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_EnterGameRes_msg(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnterGameRes(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_EnterGameRes(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_EnterGameRes(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_EnterGameRes(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_EnterGameRes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_EnterGameRes(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'EnterGameRes'{code = F@_1, msg = F@_2}.

d_field_EnterGameRes_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_EnterGameRes_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_EnterGameRes_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_EnterGameRes(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_EnterGameRes_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_EnterGameRes_msg(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_EnterGameRes_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_EnterGameRes(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_EnterGameRes(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_EnterGameRes(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_EnterGameRes(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_EnterGameRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_EnterGameRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnterGameRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_EnterGameRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnterGameRes(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_EnterGameRes(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnterGameRes(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_EnterGameRes(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_EnterGameRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_EnterGameRes(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_EnterGameRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_CommonStatus(Bin, TrUserData) ->
    dfp_read_field_def_CommonStatus(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_CommonStatus(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_CommonStatus_code(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_CommonStatus(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_CommonStatus_msg(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_CommonStatus(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'CommonStatus'{code = F@_1, msg = F@_2};
dfp_read_field_def_CommonStatus(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_CommonStatus(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_CommonStatus(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommonStatus(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_CommonStatus(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommonStatus_code(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_CommonStatus_msg(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommonStatus(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_CommonStatus(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_CommonStatus(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_CommonStatus(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_CommonStatus(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_CommonStatus(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'CommonStatus'{code = F@_1, msg = F@_2}.

d_field_CommonStatus_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_CommonStatus_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_CommonStatus(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_CommonStatus_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_msg(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_CommonStatus_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CommonStatus(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_CommonStatus(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_CommonStatus(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_CommonStatus(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_CommonStatus(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommonStatus(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_CommonStatus(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommonStatus(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_CommonStatus(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CommonStatus(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_CommonStatus(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_CommonStatus(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_VerifyRes(Bin, TrUserData) ->
    dfp_read_field_def_VerifyRes(Bin, 0, 0,
				 id(0, TrUserData), id(<<>>, TrUserData),
				 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_VerifyRes(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, TrUserData) ->
    d_field_VerifyRes_code(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_VerifyRes(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_VerifyRes_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_VerifyRes(<<26, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_VerifyRes_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_VerifyRes(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'VerifyRes'{code = F@_1, uid = F@_2, msg = F@_3};
dfp_read_field_def_VerifyRes(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_VerifyRes(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_VerifyRes(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VerifyRes(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_VerifyRes(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_VerifyRes_code(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      18 ->
	  d_field_VerifyRes_uid(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      26 ->
	  d_field_VerifyRes_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VerifyRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_VerifyRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_VerifyRes(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_VerifyRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_VerifyRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_VerifyRes(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'VerifyRes'{code = F@_1, uid = F@_2, msg = F@_3}.

d_field_VerifyRes_code(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_VerifyRes_code(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_VerifyRes_code(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_VerifyRes(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_VerifyRes_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_VerifyRes_uid(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_VerifyRes_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_VerifyRes(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_VerifyRes_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_VerifyRes_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_VerifyRes_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_VerifyRes(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_VerifyRes(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_VerifyRes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_VerifyRes(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_VerifyRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_VerifyRes(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_VerifyRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_VerifyRes(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_VerifyRes(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_VerifyRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_VerifyRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

d_msg_EnterGameReq(Bin, TrUserData) ->
    dfp_read_field_def_EnterGameReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_EnterGameReq(<<>>, 0, 0, _) ->
    #'EnterGameReq'{};
dfp_read_field_def_EnterGameReq(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_EnterGameReq(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_EnterGameReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnterGameReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_EnterGameReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_EnterGameReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_EnterGameReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_EnterGameReq(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_EnterGameReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_EnterGameReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_EnterGameReq(<<>>, 0, 0, _) ->
    #'EnterGameReq'{}.

skip_varint_EnterGameReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_EnterGameReq(Rest, Z1, Z2, TrUserData);
skip_varint_EnterGameReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_EnterGameReq(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_EnterGameReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnterGameReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_EnterGameReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnterGameReq(Rest2, 0, 0,
				    TrUserData).

skip_group_EnterGameReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EnterGameReq(Rest, 0, Z2,
				    TrUserData).

skip_32_EnterGameReq(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_EnterGameReq(Rest, Z1, Z2,
				    TrUserData).

skip_64_EnterGameReq(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_EnterGameReq(Rest, Z1, Z2,
				    TrUserData).

d_msg_GetUpgradeReq(Bin, TrUserData) ->
    dfp_read_field_def_GetUpgradeReq(Bin, 0, 0,
				     id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_GetUpgradeReq(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_GetUpgradeReq_server_type(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_GetUpgradeReq(<<>>, 0, 0, F@_1, _) ->
    #'GetUpgradeReq'{server_type = F@_1};
dfp_read_field_def_GetUpgradeReq(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_GetUpgradeReq(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_GetUpgradeReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetUpgradeReq(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GetUpgradeReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetUpgradeReq_server_type(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetUpgradeReq(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_GetUpgradeReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_GetUpgradeReq(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_GetUpgradeReq(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_GetUpgradeReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GetUpgradeReq(<<>>, 0, 0, F@_1, _) ->
    #'GetUpgradeReq'{server_type = F@_1}.

d_field_GetUpgradeReq_server_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GetUpgradeReq_server_type(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_GetUpgradeReq_server_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GetUpgradeReq(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_GetUpgradeReq(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_GetUpgradeReq(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_GetUpgradeReq(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetUpgradeReq(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_GetUpgradeReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetUpgradeReq(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GetUpgradeReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetUpgradeReq(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_GetUpgradeReq(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetUpgradeReq(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_GetUpgradeReq(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_GetUpgradeReq(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_GetUpgradeReq(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_GetUpgradeReq(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_TestSpeedRes(Bin, TrUserData) ->
    dfp_read_field_def_TestSpeedRes(Bin, 0, 0, TrUserData).

dfp_read_field_def_TestSpeedRes(<<>>, 0, 0, _) ->
    #'TestSpeedRes'{};
dfp_read_field_def_TestSpeedRes(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_TestSpeedRes(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_TestSpeedRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TestSpeedRes(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_TestSpeedRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_TestSpeedRes(Rest, 0, 0, TrUserData);
      1 -> skip_64_TestSpeedRes(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_TestSpeedRes(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_TestSpeedRes(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_TestSpeedRes(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_TestSpeedRes(<<>>, 0, 0, _) ->
    #'TestSpeedRes'{}.

skip_varint_TestSpeedRes(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_TestSpeedRes(Rest, Z1, Z2, TrUserData);
skip_varint_TestSpeedRes(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_TestSpeedRes(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_TestSpeedRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_TestSpeedRes(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_TestSpeedRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestSpeedRes(Rest2, 0, 0,
				    TrUserData).

skip_group_TestSpeedRes(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestSpeedRes(Rest, 0, Z2,
				    TrUserData).

skip_32_TestSpeedRes(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_TestSpeedRes(Rest, Z1, Z2,
				    TrUserData).

skip_64_TestSpeedRes(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_TestSpeedRes(Rest, Z1, Z2,
				    TrUserData).

d_msg_TestSpeedReq(Bin, TrUserData) ->
    dfp_read_field_def_TestSpeedReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_TestSpeedReq(<<>>, 0, 0, _) ->
    #'TestSpeedReq'{};
dfp_read_field_def_TestSpeedReq(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_TestSpeedReq(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_TestSpeedReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TestSpeedReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_TestSpeedReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_TestSpeedReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_TestSpeedReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_TestSpeedReq(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_TestSpeedReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_TestSpeedReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_TestSpeedReq(<<>>, 0, 0, _) ->
    #'TestSpeedReq'{}.

skip_varint_TestSpeedReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_TestSpeedReq(Rest, Z1, Z2, TrUserData);
skip_varint_TestSpeedReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_TestSpeedReq(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_TestSpeedReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_TestSpeedReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_TestSpeedReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestSpeedReq(Rest2, 0, 0,
				    TrUserData).

skip_group_TestSpeedReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestSpeedReq(Rest, 0, Z2,
				    TrUserData).

skip_32_TestSpeedReq(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_TestSpeedReq(Rest, Z1, Z2,
				    TrUserData).

skip_64_TestSpeedReq(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_TestSpeedReq(Rest, Z1, Z2,
				    TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'VerifyReq'{} ->
	  merge_msg_VerifyReq(Prev, New, TrUserData);
      #'GetEntranceReq'{} ->
	  merge_msg_GetEntranceReq(Prev, New, TrUserData);
      #'GetUpgradeRes'{} ->
	  merge_msg_GetUpgradeRes(Prev, New, TrUserData);
      #'GetEntranceRes'{} ->
	  merge_msg_GetEntranceRes(Prev, New, TrUserData);
      #'EnterGameRes'{} ->
	  merge_msg_EnterGameRes(Prev, New, TrUserData);
      #'CommonStatus'{} ->
	  merge_msg_CommonStatus(Prev, New, TrUserData);
      #'VerifyRes'{} ->
	  merge_msg_VerifyRes(Prev, New, TrUserData);
      #'EnterGameReq'{} ->
	  merge_msg_EnterGameReq(Prev, New, TrUserData);
      #'GetUpgradeReq'{} ->
	  merge_msg_GetUpgradeReq(Prev, New, TrUserData);
      #'TestSpeedRes'{} ->
	  merge_msg_TestSpeedRes(Prev, New, TrUserData);
      #'TestSpeedReq'{} ->
	  merge_msg_TestSpeedReq(Prev, New, TrUserData)
    end.

merge_msg_VerifyReq(#'VerifyReq'{identity = PFidentity,
				 channel_id = PFchannel_id},
		    #'VerifyReq'{identity = NFidentity,
				 channel_id = NFchannel_id},
		    _) ->
    #'VerifyReq'{identity =
		     if NFidentity =:= undefined -> PFidentity;
			true -> NFidentity
		     end,
		 channel_id =
		     if NFchannel_id =:= undefined -> PFchannel_id;
			true -> NFchannel_id
		     end}.

merge_msg_GetEntranceReq(#'GetEntranceReq'{identity =
					       PFidentity,
					   channel_id = PFchannel_id,
					   server_type = PFserver_type,
					   is_app = PFis_app},
			 #'GetEntranceReq'{identity = NFidentity,
					   channel_id = NFchannel_id,
					   server_type = NFserver_type,
					   is_app = NFis_app},
			 _) ->
    #'GetEntranceReq'{identity =
			  if NFidentity =:= undefined -> PFidentity;
			     true -> NFidentity
			  end,
		      channel_id =
			  if NFchannel_id =:= undefined -> PFchannel_id;
			     true -> NFchannel_id
			  end,
		      server_type =
			  if NFserver_type =:= undefined -> PFserver_type;
			     true -> NFserver_type
			  end,
		      is_app =
			  if NFis_app =:= undefined -> PFis_app;
			     true -> NFis_app
			  end}.

merge_msg_GetUpgradeRes(#'GetUpgradeRes'{server_type =
					     PFserver_type,
					 version = PFversion,
					 download_url = PFdownload_url},
			#'GetUpgradeRes'{server_type = NFserver_type,
					 version = NFversion,
					 download_url = NFdownload_url},
			_) ->
    #'GetUpgradeRes'{server_type =
			 if NFserver_type =:= undefined -> PFserver_type;
			    true -> NFserver_type
			 end,
		     version =
			 if NFversion =:= undefined -> PFversion;
			    true -> NFversion
			 end,
		     download_url =
			 if NFdownload_url =:= undefined -> PFdownload_url;
			    true -> NFdownload_url
			 end}.

merge_msg_GetEntranceRes(#'GetEntranceRes'{entrace_url =
					       PFentrace_url,
					   server_type = PFserver_type,
					   server_id = PFserver_id,
					   version = PFversion,
					   download_url = PFdownload_url},
			 #'GetEntranceRes'{entrace_url = NFentrace_url,
					   server_type = NFserver_type,
					   server_id = NFserver_id,
					   version = NFversion,
					   download_url = NFdownload_url},
			 _) ->
    #'GetEntranceRes'{entrace_url =
			  if NFentrace_url =:= undefined -> PFentrace_url;
			     true -> NFentrace_url
			  end,
		      server_type =
			  if NFserver_type =:= undefined -> PFserver_type;
			     true -> NFserver_type
			  end,
		      server_id =
			  if NFserver_id =:= undefined -> PFserver_id;
			     true -> NFserver_id
			  end,
		      version =
			  if NFversion =:= undefined -> PFversion;
			     true -> NFversion
			  end,
		      download_url =
			  if NFdownload_url =:= undefined -> PFdownload_url;
			     true -> NFdownload_url
			  end}.

merge_msg_EnterGameRes(#'EnterGameRes'{code = PFcode,
				       msg = PFmsg},
		       #'EnterGameRes'{code = NFcode, msg = NFmsg}, _) ->
    #'EnterGameRes'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    msg =
			if NFmsg =:= undefined -> PFmsg;
			   true -> NFmsg
			end}.

merge_msg_CommonStatus(#'CommonStatus'{code = PFcode,
				       msg = PFmsg},
		       #'CommonStatus'{code = NFcode, msg = NFmsg}, _) ->
    #'CommonStatus'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    msg =
			if NFmsg =:= undefined -> PFmsg;
			   true -> NFmsg
			end}.

merge_msg_VerifyRes(#'VerifyRes'{code = PFcode,
				 uid = PFuid, msg = PFmsg},
		    #'VerifyRes'{code = NFcode, uid = NFuid, msg = NFmsg},
		    _) ->
    #'VerifyRes'{code =
		     if NFcode =:= undefined -> PFcode;
			true -> NFcode
		     end,
		 uid =
		     if NFuid =:= undefined -> PFuid;
			true -> NFuid
		     end,
		 msg =
		     if NFmsg =:= undefined -> PFmsg;
			true -> NFmsg
		     end}.

merge_msg_EnterGameReq(_Prev, New, _TrUserData) -> New.

merge_msg_GetUpgradeReq(#'GetUpgradeReq'{server_type =
					     PFserver_type},
			#'GetUpgradeReq'{server_type = NFserver_type}, _) ->
    #'GetUpgradeReq'{server_type =
			 if NFserver_type =:= undefined -> PFserver_type;
			    true -> NFserver_type
			 end}.

merge_msg_TestSpeedRes(_Prev, New, _TrUserData) -> New.

merge_msg_TestSpeedReq(_Prev, New, _TrUserData) -> New.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'VerifyReq'{} ->
	  v_msg_VerifyReq(Msg, ['VerifyReq'], TrUserData);
      #'GetEntranceReq'{} ->
	  v_msg_GetEntranceReq(Msg, ['GetEntranceReq'],
			       TrUserData);
      #'GetUpgradeRes'{} ->
	  v_msg_GetUpgradeRes(Msg, ['GetUpgradeRes'], TrUserData);
      #'GetEntranceRes'{} ->
	  v_msg_GetEntranceRes(Msg, ['GetEntranceRes'],
			       TrUserData);
      #'EnterGameRes'{} ->
	  v_msg_EnterGameRes(Msg, ['EnterGameRes'], TrUserData);
      #'CommonStatus'{} ->
	  v_msg_CommonStatus(Msg, ['CommonStatus'], TrUserData);
      #'VerifyRes'{} ->
	  v_msg_VerifyRes(Msg, ['VerifyRes'], TrUserData);
      #'EnterGameReq'{} ->
	  v_msg_EnterGameReq(Msg, ['EnterGameReq'], TrUserData);
      #'GetUpgradeReq'{} ->
	  v_msg_GetUpgradeReq(Msg, ['GetUpgradeReq'], TrUserData);
      #'TestSpeedRes'{} ->
	  v_msg_TestSpeedRes(Msg, ['TestSpeedRes'], TrUserData);
      #'TestSpeedReq'{} ->
	  v_msg_TestSpeedReq(Msg, ['TestSpeedReq'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_VerifyReq/3}).
v_msg_VerifyReq(#'VerifyReq'{identity = F1,
			     channel_id = F2},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [identity | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [channel_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetEntranceReq/3}).
v_msg_GetEntranceReq(#'GetEntranceReq'{identity = F1,
				       channel_id = F2, server_type = F3,
				       is_app = F4},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [identity | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [channel_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [server_type | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [is_app | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetUpgradeRes/3}).
v_msg_GetUpgradeRes(#'GetUpgradeRes'{server_type = F1,
				     version = F2, download_url = F3},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [server_type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [version | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [download_url | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetEntranceRes/3}).
v_msg_GetEntranceRes(#'GetEntranceRes'{entrace_url = F1,
				       server_type = F2, server_id = F3,
				       version = F4, download_url = F5},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [entrace_url | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [server_type | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [server_id | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [version | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [download_url | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_EnterGameRes/3}).
v_msg_EnterGameRes(#'EnterGameRes'{code = F1, msg = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CommonStatus/3}).
v_msg_CommonStatus(#'CommonStatus'{code = F1, msg = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_VerifyRes/3}).
v_msg_VerifyRes(#'VerifyRes'{code = F1, uid = F2,
			     msg = F3},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [uid | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_EnterGameReq/3}).
v_msg_EnterGameReq(#'EnterGameReq'{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_GetUpgradeReq/3}).
v_msg_GetUpgradeReq(#'GetUpgradeReq'{server_type = F1},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [server_type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_TestSpeedRes/3}).
v_msg_TestSpeedRes(#'TestSpeedRes'{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_TestSpeedReq/3}).
v_msg_TestSpeedReq(#'TestSpeedReq'{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, 'VerifyReq'},
      [#field{name = identity, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'GetEntranceReq'},
      [#field{name = identity, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = server_type, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = is_app, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'GetUpgradeRes'},
      [#field{name = server_type, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = version, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = download_url, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'GetEntranceRes'},
      [#field{name = entrace_url, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = server_type, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = server_id, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = version, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = download_url, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'EnterGameRes'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'CommonStatus'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'VerifyRes'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = uid, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'EnterGameReq'}, []},
     {{msg, 'GetUpgradeReq'},
      [#field{name = server_type, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'TestSpeedRes'}, []},
     {{msg, 'TestSpeedReq'}, []}].


get_msg_names() ->
    ['VerifyReq', 'GetEntranceReq', 'GetUpgradeRes',
     'GetEntranceRes', 'EnterGameRes', 'CommonStatus',
     'VerifyRes', 'EnterGameReq', 'GetUpgradeReq',
     'TestSpeedRes', 'TestSpeedReq'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['VerifyReq', 'GetEntranceReq', 'GetUpgradeRes',
     'GetEntranceRes', 'EnterGameRes', 'CommonStatus',
     'VerifyRes', 'EnterGameReq', 'GetUpgradeReq',
     'TestSpeedRes', 'TestSpeedReq'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('VerifyReq') ->
    [#field{name = identity, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('GetEntranceReq') ->
    [#field{name = identity, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = server_type, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = is_app, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('GetUpgradeRes') ->
    [#field{name = server_type, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = version, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = download_url, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('GetEntranceRes') ->
    [#field{name = entrace_url, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = server_type, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = server_id, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = version, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = download_url, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('EnterGameRes') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('CommonStatus') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('VerifyRes') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = uid, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('EnterGameReq') -> [];
find_msg_def('GetUpgradeReq') ->
    [#field{name = server_type, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('TestSpeedRes') -> [];
find_msg_def('TestSpeedReq') -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'GW'.



gpb_version_as_string() ->
    "4.0.2".

gpb_version_as_list() ->
    [4,0,2].
