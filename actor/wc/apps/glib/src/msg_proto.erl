%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.2
-module(msg_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("msg_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'CatchedFishes'() :: #'CatchedFishes'{}.
-type 'UnbindRobotSuccessRes'() :: #'UnbindRobotSuccessRes'{}.
-type 'GameRecord'() :: #'GameRecord'{}.
-type 'IntoRoomReq'() :: #'IntoRoomReq'{}.
-type 'BulletItem'() :: #'BulletItem'{}.
-type 'FireRes'() :: #'FireRes'{}.
-type 'IntoRoomRes'() :: #'IntoRoomRes'{}.
-type 'CommonStatus'() :: #'CommonStatus'{}.
-type 'BindRobotReq'() :: #'BindRobotReq'{}.
-type 'UnbindRobotReq'() :: #'UnbindRobotReq'{}.
-type 'ChangeClientRateReq'() :: #'ChangeClientRateReq'{}.
-type 'RoomInfoReq'() :: #'RoomInfoReq'{}.
-type 'RoomOnlineInfo'() :: #'RoomOnlineInfo'{}.
-type 'RoomOnlineInfoRes'() :: #'RoomOnlineInfoRes'{}.
-type 'GameRecordRes'() :: #'GameRecordRes'{}.
-type 'LoginReq'() :: #'LoginReq'{}.
-type 'BroadcastMessage'() :: #'BroadcastMessage'{}.
-type 'BroadcastMessageList'() :: #'BroadcastMessageList'{}.
-type 'Msg'() :: #'Msg'{}.
-type 'LeaveGameReq'() :: #'LeaveGameReq'{}.
-type 'FireReq'() :: #'FireReq'{}.
-type 'Msgs'() :: #'Msgs'{}.
-type 'NotifyLeaveGameRes'() :: #'NotifyLeaveGameRes'{}.
-type 'CatchedFishReq'() :: #'CatchedFishReq'{}.
-type 'NotifyEnterGameRes'() :: #'NotifyEnterGameRes'{}.
-type 'ChangeClientRateRes'() :: #'ChangeClientRateRes'{}.
-type 'ChangeClientRateTypeReq'() :: #'ChangeClientRateTypeReq'{}.
-type 'AddFishes'() :: #'AddFishes'{}.
-type 'ChangeLauncherReq'() :: #'ChangeLauncherReq'{}.
-type 'GameRecordReq'() :: #'GameRecordReq'{}.
-type 'BindRobotSuccessRes'() :: #'BindRobotSuccessRes'{}.
-type 'ChangeLauncherRes'() :: #'ChangeLauncherRes'{}.
-type 'RoomInfoRes'() :: #'RoomInfoRes'{}.
-type 'CatchedFishRes'() :: #'CatchedFishRes'{}.
-type 'LeaveGameRes'() :: #'LeaveGameRes'{}.
-type 'SyncFishData'() :: #'SyncFishData'{}.
-type 'SyncFishes'() :: #'SyncFishes'{}.
-type 'NotifyState'() :: #'NotifyState'{}.
-type 'ItemData'() :: #'ItemData'{}.
-type 'LoginRes'() :: #'LoginRes'{}.
-type 'Heartbeat'() :: #'Heartbeat'{}.
-type 'ClearSceneRes'() :: #'ClearSceneRes'{}.
-export_type(['CatchedFishes'/0, 'UnbindRobotSuccessRes'/0, 'GameRecord'/0, 'IntoRoomReq'/0, 'BulletItem'/0, 'FireRes'/0, 'IntoRoomRes'/0, 'CommonStatus'/0, 'BindRobotReq'/0, 'UnbindRobotReq'/0, 'ChangeClientRateReq'/0, 'RoomInfoReq'/0, 'RoomOnlineInfo'/0, 'RoomOnlineInfoRes'/0, 'GameRecordRes'/0, 'LoginReq'/0, 'BroadcastMessage'/0, 'BroadcastMessageList'/0, 'Msg'/0, 'LeaveGameReq'/0, 'FireReq'/0, 'Msgs'/0, 'NotifyLeaveGameRes'/0, 'CatchedFishReq'/0, 'NotifyEnterGameRes'/0, 'ChangeClientRateRes'/0, 'ChangeClientRateTypeReq'/0, 'AddFishes'/0, 'ChangeLauncherReq'/0, 'GameRecordReq'/0, 'BindRobotSuccessRes'/0, 'ChangeLauncherRes'/0, 'RoomInfoRes'/0, 'CatchedFishRes'/0, 'LeaveGameRes'/0, 'SyncFishData'/0, 'SyncFishes'/0, 'NotifyState'/0, 'ItemData'/0, 'LoginRes'/0, 'Heartbeat'/0, 'ClearSceneRes'/0]).

-spec encode_msg(#'CatchedFishes'{} | #'UnbindRobotSuccessRes'{} | #'GameRecord'{} | #'IntoRoomReq'{} | #'BulletItem'{} | #'FireRes'{} | #'IntoRoomRes'{} | #'CommonStatus'{} | #'BindRobotReq'{} | #'UnbindRobotReq'{} | #'ChangeClientRateReq'{} | #'RoomInfoReq'{} | #'RoomOnlineInfo'{} | #'RoomOnlineInfoRes'{} | #'GameRecordRes'{} | #'LoginReq'{} | #'BroadcastMessage'{} | #'BroadcastMessageList'{} | #'Msg'{} | #'LeaveGameReq'{} | #'FireReq'{} | #'Msgs'{} | #'NotifyLeaveGameRes'{} | #'CatchedFishReq'{} | #'NotifyEnterGameRes'{} | #'ChangeClientRateRes'{} | #'ChangeClientRateTypeReq'{} | #'AddFishes'{} | #'ChangeLauncherReq'{} | #'GameRecordReq'{} | #'BindRobotSuccessRes'{} | #'ChangeLauncherRes'{} | #'RoomInfoRes'{} | #'CatchedFishRes'{} | #'LeaveGameRes'{} | #'SyncFishData'{} | #'SyncFishes'{} | #'NotifyState'{} | #'ItemData'{} | #'LoginRes'{} | #'Heartbeat'{} | #'ClearSceneRes'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'CatchedFishes'{} | #'UnbindRobotSuccessRes'{} | #'GameRecord'{} | #'IntoRoomReq'{} | #'BulletItem'{} | #'FireRes'{} | #'IntoRoomRes'{} | #'CommonStatus'{} | #'BindRobotReq'{} | #'UnbindRobotReq'{} | #'ChangeClientRateReq'{} | #'RoomInfoReq'{} | #'RoomOnlineInfo'{} | #'RoomOnlineInfoRes'{} | #'GameRecordRes'{} | #'LoginReq'{} | #'BroadcastMessage'{} | #'BroadcastMessageList'{} | #'Msg'{} | #'LeaveGameReq'{} | #'FireReq'{} | #'Msgs'{} | #'NotifyLeaveGameRes'{} | #'CatchedFishReq'{} | #'NotifyEnterGameRes'{} | #'ChangeClientRateRes'{} | #'ChangeClientRateTypeReq'{} | #'AddFishes'{} | #'ChangeLauncherReq'{} | #'GameRecordReq'{} | #'BindRobotSuccessRes'{} | #'ChangeLauncherRes'{} | #'RoomInfoRes'{} | #'CatchedFishRes'{} | #'LeaveGameRes'{} | #'SyncFishData'{} | #'SyncFishes'{} | #'NotifyState'{} | #'ItemData'{} | #'LoginRes'{} | #'Heartbeat'{} | #'ClearSceneRes'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'CatchedFishes'{} ->
	  e_msg_CatchedFishes(Msg, TrUserData);
      #'UnbindRobotSuccessRes'{} ->
	  e_msg_UnbindRobotSuccessRes(Msg, TrUserData);
      #'GameRecord'{} -> e_msg_GameRecord(Msg, TrUserData);
      #'IntoRoomReq'{} -> e_msg_IntoRoomReq(Msg, TrUserData);
      #'BulletItem'{} -> e_msg_BulletItem(Msg, TrUserData);
      #'FireRes'{} -> e_msg_FireRes(Msg, TrUserData);
      #'IntoRoomRes'{} -> e_msg_IntoRoomRes(Msg, TrUserData);
      #'CommonStatus'{} ->
	  e_msg_CommonStatus(Msg, TrUserData);
      #'BindRobotReq'{} ->
	  e_msg_BindRobotReq(Msg, TrUserData);
      #'UnbindRobotReq'{} ->
	  e_msg_UnbindRobotReq(Msg, TrUserData);
      #'ChangeClientRateReq'{} ->
	  e_msg_ChangeClientRateReq(Msg, TrUserData);
      #'RoomInfoReq'{} -> e_msg_RoomInfoReq(Msg, TrUserData);
      #'RoomOnlineInfo'{} ->
	  e_msg_RoomOnlineInfo(Msg, TrUserData);
      #'RoomOnlineInfoRes'{} ->
	  e_msg_RoomOnlineInfoRes(Msg, TrUserData);
      #'GameRecordRes'{} ->
	  e_msg_GameRecordRes(Msg, TrUserData);
      #'LoginReq'{} -> e_msg_LoginReq(Msg, TrUserData);
      #'BroadcastMessage'{} ->
	  e_msg_BroadcastMessage(Msg, TrUserData);
      #'BroadcastMessageList'{} ->
	  e_msg_BroadcastMessageList(Msg, TrUserData);
      #'Msg'{} -> e_msg_Msg(Msg, TrUserData);
      #'LeaveGameReq'{} ->
	  e_msg_LeaveGameReq(Msg, TrUserData);
      #'FireReq'{} -> e_msg_FireReq(Msg, TrUserData);
      #'Msgs'{} -> e_msg_Msgs(Msg, TrUserData);
      #'NotifyLeaveGameRes'{} ->
	  e_msg_NotifyLeaveGameRes(Msg, TrUserData);
      #'CatchedFishReq'{} ->
	  e_msg_CatchedFishReq(Msg, TrUserData);
      #'NotifyEnterGameRes'{} ->
	  e_msg_NotifyEnterGameRes(Msg, TrUserData);
      #'ChangeClientRateRes'{} ->
	  e_msg_ChangeClientRateRes(Msg, TrUserData);
      #'ChangeClientRateTypeReq'{} ->
	  e_msg_ChangeClientRateTypeReq(Msg, TrUserData);
      #'AddFishes'{} -> e_msg_AddFishes(Msg, TrUserData);
      #'ChangeLauncherReq'{} ->
	  e_msg_ChangeLauncherReq(Msg, TrUserData);
      #'GameRecordReq'{} ->
	  e_msg_GameRecordReq(Msg, TrUserData);
      #'BindRobotSuccessRes'{} ->
	  e_msg_BindRobotSuccessRes(Msg, TrUserData);
      #'ChangeLauncherRes'{} ->
	  e_msg_ChangeLauncherRes(Msg, TrUserData);
      #'RoomInfoRes'{} -> e_msg_RoomInfoRes(Msg, TrUserData);
      #'CatchedFishRes'{} ->
	  e_msg_CatchedFishRes(Msg, TrUserData);
      #'LeaveGameRes'{} ->
	  e_msg_LeaveGameRes(Msg, TrUserData);
      #'SyncFishData'{} ->
	  e_msg_SyncFishData(Msg, TrUserData);
      #'SyncFishes'{} -> e_msg_SyncFishes(Msg, TrUserData);
      #'NotifyState'{} -> e_msg_NotifyState(Msg, TrUserData);
      #'ItemData'{} -> e_msg_ItemData(Msg, TrUserData);
      #'LoginRes'{} -> e_msg_LoginRes(Msg, TrUserData);
      #'Heartbeat'{} -> e_msg_Heartbeat(Msg, TrUserData);
      #'ClearSceneRes'{} ->
	  e_msg_ClearSceneRes(Msg, TrUserData)
    end.



e_msg_CatchedFishes(Msg, TrUserData) ->
    e_msg_CatchedFishes(Msg, <<>>, TrUserData).


e_msg_CatchedFishes(#'CatchedFishes'{catchEvent = F1,
				     fishID = F2, rewardID = F3,
				     lightingFishID = F4},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>)
	     end
	   end
    end.

e_msg_UnbindRobotSuccessRes(Msg, TrUserData) ->
    e_msg_UnbindRobotSuccessRes(Msg, <<>>, TrUserData).


e_msg_UnbindRobotSuccessRes(#'UnbindRobotSuccessRes'{position
							 = F1,
						     userId = F2},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_GameRecord(Msg, TrUserData) ->
    e_msg_GameRecord(Msg, <<>>, TrUserData).


e_msg_GameRecord(#'GameRecord'{roundId = F1,
			       roomType = F2, allBet = F3, allWin = F4,
			       result = F5, startTime = F6, endTime = F7},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int32(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int32(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_type_int32(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_type_int32(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false -> e_type_string(TrF6, <<B5/binary, 50>>)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     case is_empty_string(TrF7) of
	       true -> B6;
	       false -> e_type_string(TrF7, <<B6/binary, 58>>)
	     end
	   end
    end.

e_msg_IntoRoomReq(Msg, TrUserData) ->
    e_msg_IntoRoomReq(Msg, <<>>, TrUserData).


e_msg_IntoRoomReq(#'IntoRoomReq'{uid = F1, roomId = F2,
				 type = F3},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_BulletItem(Msg, TrUserData) ->
    e_msg_BulletItem(Msg, <<>>, TrUserData).


e_msg_BulletItem(#'BulletItem'{bulletID = F1,
			       degree = F2},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_type_int32(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_FireRes(Msg, TrUserData) ->
    e_msg_FireRes(Msg, <<>>, TrUserData).


e_msg_FireRes(#'FireRes'{bulletItemList = F1,
			 launcherType = F2, energy = F3, reboundCount = F4,
			 lockFishID = F5, gold = F6, targetX = F7, targetY = F8,
			 bulletID = F9, seatID = F10},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_FireRes_bulletItemList(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0 -> B6;
		     true -> e_varint(TrF7, <<B6/binary, 56>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true -> e_varint(TrF8, <<B7/binary, 64>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true -> e_varint(TrF9, <<B8/binary, 72>>)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     if TrF10 =:= 0 -> B9;
		true -> e_varint(TrF10, <<B9/binary, 80>>)
	     end
	   end
    end.

e_msg_IntoRoomRes(Msg, TrUserData) ->
    e_msg_IntoRoomRes(Msg, <<>>, TrUserData).


e_msg_IntoRoomRes(#'IntoRoomRes'{bTableTypeID = F1,
				 backgroundImage = F2, launcherType = F3,
				 seatID = F4, rateIndex = F5, match = F6,
				 matchGold = F7, minRate = F8, maxRate = F9,
				 roomId = F10, roomName = F11, endTime = F12},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int32(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int32(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0 -> B5;
		     true -> e_varint(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0 -> B6;
		     true -> e_varint(TrF7, <<B6/binary, 56>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true -> e_varint(TrF8, <<B7/binary, 64>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true -> e_varint(TrF9, <<B8/binary, 72>>)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0 -> B9;
		      true -> e_varint(TrF10, <<B9/binary, 80>>)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   case is_empty_string(TrF11) of
		     true -> B10;
		     false -> e_type_string(TrF11, <<B10/binary, 90>>)
		   end
		 end
	  end,
    if F12 == undefined -> B11;
       true ->
	   begin
	     TrF12 = id(F12, TrUserData),
	     if TrF12 =:= 0 -> B11;
		true -> e_varint(TrF12, <<B11/binary, 96>>)
	     end
	   end
    end.

e_msg_CommonStatus(Msg, TrUserData) ->
    e_msg_CommonStatus(Msg, <<>>, TrUserData).


e_msg_CommonStatus(#'CommonStatus'{code = F1, msg = F2,
				   type = F3},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_type_int32(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_BindRobotReq(Msg, TrUserData) ->
    e_msg_BindRobotReq(Msg, <<>>, TrUserData).


e_msg_BindRobotReq(#'BindRobotReq'{position = F1,
				   userId = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_UnbindRobotReq(Msg, TrUserData) ->
    e_msg_UnbindRobotReq(Msg, <<>>, TrUserData).


e_msg_UnbindRobotReq(#'UnbindRobotReq'{position = F1,
				       userId = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_ChangeClientRateReq(Msg, TrUserData) ->
    e_msg_ChangeClientRateReq(Msg, <<>>, TrUserData).


e_msg_ChangeClientRateReq(#'ChangeClientRateReq'{opt =
						     F1},
			  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_RoomInfoReq(Msg, TrUserData) ->
    e_msg_RoomInfoReq(Msg, <<>>, TrUserData).


e_msg_RoomInfoReq(#'RoomInfoReq'{type = F1, uid = F2},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_RoomOnlineInfo(Msg, TrUserData) ->
    e_msg_RoomOnlineInfo(Msg, <<>>, TrUserData).


e_msg_RoomOnlineInfo(#'RoomOnlineInfo'{type = F1,
				       playCount = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_RoomOnlineInfoRes(Msg, TrUserData) ->
    e_msg_RoomOnlineInfoRes(Msg, <<>>, TrUserData).


e_msg_RoomOnlineInfoRes(#'RoomOnlineInfoRes'{roomOnlineInfo
						 = F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_RoomOnlineInfoRes_roomOnlineInfo(TrF1, Bin,
						      TrUserData)
      end
    end.

e_msg_GameRecordRes(Msg, TrUserData) ->
    e_msg_GameRecordRes(Msg, <<>>, TrUserData).


e_msg_GameRecordRes(#'GameRecordRes'{gameRecord = F1},
		    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GameRecordRes_gameRecord(TrF1, Bin, TrUserData)
      end
    end.

e_msg_LoginReq(Msg, TrUserData) ->
    e_msg_LoginReq(Msg, <<>>, TrUserData).


e_msg_LoginReq(#'LoginReq'{identity = F1}, Bin,
	       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_BroadcastMessage(Msg, TrUserData) ->
    e_msg_BroadcastMessage(Msg, <<>>, TrUserData).


e_msg_BroadcastMessage(#'BroadcastMessage'{broadType =
					       F1,
					   msg = F2, langId = F3, params = F4,
					   priority = F5},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_BroadcastMessage_params(TrF4, B3, TrUserData)
	   end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0 -> B4;
		true -> e_varint(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_BroadcastMessageList(Msg, TrUserData) ->
    e_msg_BroadcastMessageList(Msg, <<>>, TrUserData).


e_msg_BroadcastMessageList(#'BroadcastMessageList'{messageList
						       = F1},
			   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_BroadcastMessageList_messageList(TrF1, Bin,
						      TrUserData)
      end
    end.

e_msg_Msg(Msg, TrUserData) ->
    e_msg_Msg(Msg, <<>>, TrUserData).


e_msg_Msg(#'Msg'{action = F1, msgBody = F2, token = F3},
	  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_LeaveGameReq(Msg, TrUserData) ->
    e_msg_LeaveGameReq(Msg, <<>>, TrUserData).


e_msg_LeaveGameReq(#'LeaveGameReq'{type = F1}, Bin,
		   TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_FireReq(Msg, TrUserData) ->
    e_msg_FireReq(Msg, <<>>, TrUserData).


e_msg_FireReq(#'FireReq'{degree = F1, lockedFishID = F2,
			 bulletID = F3, targetX = F4, targetY = F5},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0 -> B4;
		true -> e_varint(TrF5, <<B4/binary, 40>>)
	     end
	   end
    end.

e_msg_Msgs(Msg, TrUserData) ->
    e_msg_Msgs(Msg, <<>>, TrUserData).


e_msg_Msgs(#'Msgs'{msgList = F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> e_field_Msgs_msgList(TrF1, Bin, TrUserData)
      end
    end.

e_msg_NotifyLeaveGameRes(Msg, TrUserData) ->
    e_msg_NotifyLeaveGameRes(Msg, <<>>, TrUserData).


e_msg_NotifyLeaveGameRes(#'NotifyLeaveGameRes'{seatID =
						   F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_CatchedFishReq(Msg, TrUserData) ->
    e_msg_CatchedFishReq(Msg, <<>>, TrUserData).


e_msg_CatchedFishReq(#'CatchedFishReq'{userId = F1,
				       fishID = F2, bulletID = F3,
				       catchedFishs = F4},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_CatchedFishReq_catchedFishs(TrF4, B3,
						 TrUserData)
      end
    end.

e_msg_NotifyEnterGameRes(Msg, TrUserData) ->
    e_msg_NotifyEnterGameRes(Msg, <<>>, TrUserData).


e_msg_NotifyEnterGameRes(#'NotifyEnterGameRes'{uid = F1,
					       name = F2, headUrl = F3, ip = F4,
					       money = F5, bangMoney = F6,
					       launcherType = F7,
					       rateIndex = F8, energy = F9,
					       seat = F10, roomCard = F11},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0.0 -> B4;
		     true -> e_type_float(TrF5, <<B4/binary, 45>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true -> e_type_float(TrF6, <<B5/binary, 53>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0 -> B6;
		     true -> e_varint(TrF7, <<B6/binary, 56>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true -> e_varint(TrF8, <<B7/binary, 64>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true -> e_varint(TrF9, <<B8/binary, 72>>)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0 -> B9;
		      true -> e_varint(TrF10, <<B9/binary, 80>>)
		   end
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     if TrF11 =:= 0 -> B10;
		true -> e_varint(TrF11, <<B10/binary, 88>>)
	     end
	   end
    end.

e_msg_ChangeClientRateRes(Msg, TrUserData) ->
    e_msg_ChangeClientRateRes(Msg, <<>>, TrUserData).


e_msg_ChangeClientRateRes(#'ChangeClientRateRes'{seatID
						     = F1,
						 isCanUseRate = F2,
						 rateIndex = F3},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_ChangeClientRateTypeReq(Msg, TrUserData) ->
    e_msg_ChangeClientRateTypeReq(Msg, <<>>, TrUserData).


e_msg_ChangeClientRateTypeReq(#'ChangeClientRateTypeReq'{seatID
							     = F1,
							 rateIndex = F2},
			      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_AddFishes(Msg, TrUserData) ->
    e_msg_AddFishes(Msg, <<>>, TrUserData).


e_msg_AddFishes(#'AddFishes'{groupID = F1, pathID = F2,
			     startID = F3},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_ChangeLauncherReq(Msg, TrUserData) ->
    e_msg_ChangeLauncherReq(Msg, <<>>, TrUserData).


e_msg_ChangeLauncherReq(#'ChangeLauncherReq'{seatID =
						 F1,
					     launcherType = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_GameRecordReq(_Msg, _TrUserData) -> <<>>.

e_msg_BindRobotSuccessRes(Msg, TrUserData) ->
    e_msg_BindRobotSuccessRes(Msg, <<>>, TrUserData).


e_msg_BindRobotSuccessRes(#'BindRobotSuccessRes'{position
						     = F1,
						 userId = F2},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_ChangeLauncherRes(Msg, TrUserData) ->
    e_msg_ChangeLauncherRes(Msg, <<>>, TrUserData).


e_msg_ChangeLauncherRes(#'ChangeLauncherRes'{seatID =
						 F1,
					     launcherType = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>)
	     end
	   end
    end.

e_msg_RoomInfoRes(Msg, TrUserData) ->
    e_msg_RoomInfoRes(Msg, <<>>, TrUserData).


e_msg_RoomInfoRes(#'RoomInfoRes'{enterKindId = F1,
				 gameType = F2, enterKindServerId = F3,
				 enterKindPost = F4},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>)
	     end
	   end
    end.

e_msg_CatchedFishRes(Msg, TrUserData) ->
    e_msg_CatchedFishRes(Msg, <<>>, TrUserData).


e_msg_CatchedFishRes(#'CatchedFishRes'{bulletID = F1,
				       gold = F2, isRemoveBullet = F3,
				       totalNum = F4, seatID = F5,
				       catchedFishes = F6},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0.0 -> B3;
		     true -> e_type_float(TrF4, <<B3/binary, 37>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      if TrF6 == [] -> B5;
	 true ->
	     e_field_CatchedFishRes_catchedFishes(TrF6, B5,
						  TrUserData)
      end
    end.

e_msg_LeaveGameRes(Msg, TrUserData) ->
    e_msg_LeaveGameRes(Msg, <<>>, TrUserData).


e_msg_LeaveGameRes(#'LeaveGameRes'{code = F1, msg = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_SyncFishData(Msg, TrUserData) ->
    e_msg_SyncFishData(Msg, <<>>, TrUserData).


e_msg_SyncFishData(#'SyncFishData'{fishID = F1,
				   groupID = F2, fishTime = F3, pathGroup = F4,
				   pathIdx = F5, isActiveEvent = F6,
				   elapsedTime = F7, package = F8,
				   specialType = F9, delayScaling = F10,
				   delayDuration1 = F11, delayDuration2 = F12,
				   delayDuration3 = F13,
				   delayCurrentTime = F14},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0.0 -> B2;
		     true -> e_type_float(TrF3, <<B2/binary, 29>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= false -> B5;
		     true -> e_type_bool(TrF6, <<B5/binary, 48>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0 -> B6;
		     true -> e_varint(TrF7, <<B6/binary, 56>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true -> e_varint(TrF8, <<B7/binary, 64>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true -> e_varint(TrF9, <<B8/binary, 72>>)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0 -> B9;
		      true -> e_varint(TrF10, <<B9/binary, 80>>)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   if TrF11 =:= 0 -> B10;
		      true -> e_varint(TrF11, <<B10/binary, 88>>)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   if TrF12 =:= 0 -> B11;
		      true -> e_varint(TrF12, <<B11/binary, 96>>)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= 0 -> B12;
		      true -> e_varint(TrF13, <<B12/binary, 104>>)
		   end
		 end
	  end,
    if F14 == undefined -> B13;
       true ->
	   begin
	     TrF14 = id(F14, TrUserData),
	     if TrF14 =:= 0 -> B13;
		true -> e_varint(TrF14, <<B13/binary, 112>>)
	     end
	   end
    end.

e_msg_SyncFishes(Msg, TrUserData) ->
    e_msg_SyncFishes(Msg, <<>>, TrUserData).


e_msg_SyncFishes(#'SyncFishes'{fishList = F1}, Bin,
		 TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_SyncFishes_fishList(TrF1, Bin, TrUserData)
      end
    end.

e_msg_NotifyState(Msg, TrUserData) ->
    e_msg_NotifyState(Msg, <<>>, TrUserData).


e_msg_NotifyState(#'NotifyState'{seatID = F1,
				 money = F2, bangMoney = F3},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_varint(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_ItemData(Msg, TrUserData) ->
    e_msg_ItemData(Msg, <<>>, TrUserData).


e_msg_ItemData(#'ItemData'{itemId = F1, count = F2,
			   expried = F3},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true -> e_type_int32(TrF3, <<B2/binary, 24>>)
	     end
	   end
    end.

e_msg_LoginRes(Msg, TrUserData) ->
    e_msg_LoginRes(Msg, <<>>, TrUserData).


e_msg_LoginRes(#'LoginRes'{uid = F1, name = F2,
			   headUrl = F3, ip = F4, money = F5, bangMoney = F6,
			   bankMoney = F7, bankPassword = F8,
			   telephone_fare = F9, serverTime = F10, vipExp = F11,
			   phoneNum = F12, roomCard = F13, token = F14},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false -> e_type_string(TrF4, <<B3/binary, 34>>)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true -> e_type_float(TrF6, <<B5/binary, 53>>)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true -> e_type_float(TrF7, <<B6/binary, 61>>)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  case is_empty_string(TrF8) of
		    true -> B7;
		    false -> e_type_string(TrF8, <<B7/binary, 66>>)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true -> e_varint(TrF9, <<B8/binary, 72>>)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0 -> B9;
		      true -> e_varint(TrF10, <<B9/binary, 80>>)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   if TrF11 =:= 0 -> B10;
		      true -> e_varint(TrF11, <<B10/binary, 88>>)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   case is_empty_string(TrF12) of
		     true -> B11;
		     false -> e_type_string(TrF12, <<B11/binary, 98>>)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= 0 -> B12;
		      true -> e_varint(TrF13, <<B12/binary, 104>>)
		   end
		 end
	  end,
    if F14 == undefined -> B13;
       true ->
	   begin
	     TrF14 = id(F14, TrUserData),
	     case is_empty_string(TrF14) of
	       true -> B13;
	       false -> e_type_string(TrF14, <<B13/binary, 114>>)
	     end
	   end
    end.

e_msg_Heartbeat(_Msg, _TrUserData) -> <<>>.

e_msg_ClearSceneRes(Msg, TrUserData) ->
    e_msg_ClearSceneRes(Msg, <<>>, TrUserData).


e_msg_ClearSceneRes(#'ClearSceneRes'{clearType = F1},
		    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_mfield_FireRes_bulletItemList(Msg, Bin, TrUserData) ->
    SubBin = e_msg_BulletItem(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FireRes_bulletItemList([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_FireRes_bulletItemList(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_FireRes_bulletItemList(Rest, Bin3, TrUserData);
e_field_FireRes_bulletItemList([], Bin, _TrUserData) ->
    Bin.

e_mfield_RoomOnlineInfoRes_roomOnlineInfo(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_RoomOnlineInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RoomOnlineInfoRes_roomOnlineInfo([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_RoomOnlineInfoRes_roomOnlineInfo(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_RoomOnlineInfoRes_roomOnlineInfo(Rest, Bin3,
					     TrUserData);
e_field_RoomOnlineInfoRes_roomOnlineInfo([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_GameRecordRes_gameRecord(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_GameRecord(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GameRecordRes_gameRecord([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GameRecordRes_gameRecord(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_GameRecordRes_gameRecord(Rest, Bin3,
				     TrUserData);
e_field_GameRecordRes_gameRecord([], Bin,
				 _TrUserData) ->
    Bin.

e_field_BroadcastMessage_params([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2),
    e_field_BroadcastMessage_params(Rest, Bin3, TrUserData);
e_field_BroadcastMessage_params([], Bin, _TrUserData) ->
    Bin.

e_mfield_BroadcastMessageList_messageList(Msg, Bin,
					  TrUserData) ->
    SubBin = e_msg_BroadcastMessage(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BroadcastMessageList_messageList([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_BroadcastMessageList_messageList(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_BroadcastMessageList_messageList(Rest, Bin3,
					     TrUserData);
e_field_BroadcastMessageList_messageList([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_Msgs_msgList(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Msg(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Msgs_msgList([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Msgs_msgList(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_Msgs_msgList(Rest, Bin3, TrUserData);
e_field_Msgs_msgList([], Bin, _TrUserData) -> Bin.

e_field_CatchedFishReq_catchedFishs(Elems, Bin,
				    TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_CatchedFishReq_catchedFishs(Elems,
						  <<>>, TrUserData),
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_CatchedFishReq_catchedFishs([], Bin,
				    _TrUserData) ->
    Bin.

e_pfield_CatchedFishReq_catchedFishs([Value | Rest],
				     Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin),
    e_pfield_CatchedFishReq_catchedFishs(Rest, Bin2,
					 TrUserData);
e_pfield_CatchedFishReq_catchedFishs([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_CatchedFishRes_catchedFishes(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_CatchedFishes(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CatchedFishRes_catchedFishes([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_CatchedFishRes_catchedFishes(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_CatchedFishRes_catchedFishes(Rest, Bin3,
					 TrUserData);
e_field_CatchedFishRes_catchedFishes([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_SyncFishes_fishList(Msg, Bin, TrUserData) ->
    SubBin = e_msg_SyncFishData(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_SyncFishes_fishList([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_SyncFishes_fishList(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_SyncFishes_fishList(Rest, Bin3, TrUserData);
e_field_SyncFishes_fishList([], Bin, _TrUserData) ->
    Bin.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_type_float(V, Bin) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin) ->
    <<Bin/binary, 0:16, 192, 127>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'CatchedFishes' ->
	  try d_msg_CatchedFishes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CatchedFishes', {Class, Reason, StackTrace}}}})
	  end;
      'UnbindRobotSuccessRes' ->
	  try d_msg_UnbindRobotSuccessRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'UnbindRobotSuccessRes',
			 {Class, Reason, StackTrace}}}})
	  end;
      'GameRecord' ->
	  try d_msg_GameRecord(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GameRecord', {Class, Reason, StackTrace}}}})
	  end;
      'IntoRoomReq' ->
	  try d_msg_IntoRoomReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'IntoRoomReq', {Class, Reason, StackTrace}}}})
	  end;
      'BulletItem' ->
	  try d_msg_BulletItem(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'BulletItem', {Class, Reason, StackTrace}}}})
	  end;
      'FireRes' ->
	  try d_msg_FireRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'FireRes', {Class, Reason, StackTrace}}}})
	  end;
      'IntoRoomRes' ->
	  try d_msg_IntoRoomRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'IntoRoomRes', {Class, Reason, StackTrace}}}})
	  end;
      'CommonStatus' ->
	  try d_msg_CommonStatus(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CommonStatus', {Class, Reason, StackTrace}}}})
	  end;
      'BindRobotReq' ->
	  try d_msg_BindRobotReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'BindRobotReq', {Class, Reason, StackTrace}}}})
	  end;
      'UnbindRobotReq' ->
	  try d_msg_UnbindRobotReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'UnbindRobotReq', {Class, Reason, StackTrace}}}})
	  end;
      'ChangeClientRateReq' ->
	  try d_msg_ChangeClientRateReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ChangeClientRateReq',
			 {Class, Reason, StackTrace}}}})
	  end;
      'RoomInfoReq' ->
	  try d_msg_RoomInfoReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'RoomInfoReq', {Class, Reason, StackTrace}}}})
	  end;
      'RoomOnlineInfo' ->
	  try d_msg_RoomOnlineInfo(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'RoomOnlineInfo', {Class, Reason, StackTrace}}}})
	  end;
      'RoomOnlineInfoRes' ->
	  try d_msg_RoomOnlineInfoRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'RoomOnlineInfoRes',
			 {Class, Reason, StackTrace}}}})
	  end;
      'GameRecordRes' ->
	  try d_msg_GameRecordRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GameRecordRes', {Class, Reason, StackTrace}}}})
	  end;
      'LoginReq' ->
	  try d_msg_LoginReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'LoginReq', {Class, Reason, StackTrace}}}})
	  end;
      'BroadcastMessage' ->
	  try d_msg_BroadcastMessage(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'BroadcastMessage',
			 {Class, Reason, StackTrace}}}})
	  end;
      'BroadcastMessageList' ->
	  try d_msg_BroadcastMessageList(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'BroadcastMessageList',
			 {Class, Reason, StackTrace}}}})
	  end;
      'Msg' ->
	  try d_msg_Msg(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Msg', {Class, Reason, StackTrace}}}})
	  end;
      'LeaveGameReq' ->
	  try d_msg_LeaveGameReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'LeaveGameReq', {Class, Reason, StackTrace}}}})
	  end;
      'FireReq' ->
	  try d_msg_FireReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'FireReq', {Class, Reason, StackTrace}}}})
	  end;
      'Msgs' ->
	  try d_msg_Msgs(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Msgs', {Class, Reason, StackTrace}}}})
	  end;
      'NotifyLeaveGameRes' ->
	  try d_msg_NotifyLeaveGameRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'NotifyLeaveGameRes',
			 {Class, Reason, StackTrace}}}})
	  end;
      'CatchedFishReq' ->
	  try d_msg_CatchedFishReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CatchedFishReq', {Class, Reason, StackTrace}}}})
	  end;
      'NotifyEnterGameRes' ->
	  try d_msg_NotifyEnterGameRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'NotifyEnterGameRes',
			 {Class, Reason, StackTrace}}}})
	  end;
      'ChangeClientRateRes' ->
	  try d_msg_ChangeClientRateRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ChangeClientRateRes',
			 {Class, Reason, StackTrace}}}})
	  end;
      'ChangeClientRateTypeReq' ->
	  try d_msg_ChangeClientRateTypeReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ChangeClientRateTypeReq',
			 {Class, Reason, StackTrace}}}})
	  end;
      'AddFishes' ->
	  try d_msg_AddFishes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'AddFishes', {Class, Reason, StackTrace}}}})
	  end;
      'ChangeLauncherReq' ->
	  try d_msg_ChangeLauncherReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ChangeLauncherReq',
			 {Class, Reason, StackTrace}}}})
	  end;
      'GameRecordReq' ->
	  try d_msg_GameRecordReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GameRecordReq', {Class, Reason, StackTrace}}}})
	  end;
      'BindRobotSuccessRes' ->
	  try d_msg_BindRobotSuccessRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'BindRobotSuccessRes',
			 {Class, Reason, StackTrace}}}})
	  end;
      'ChangeLauncherRes' ->
	  try d_msg_ChangeLauncherRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ChangeLauncherRes',
			 {Class, Reason, StackTrace}}}})
	  end;
      'RoomInfoRes' ->
	  try d_msg_RoomInfoRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'RoomInfoRes', {Class, Reason, StackTrace}}}})
	  end;
      'CatchedFishRes' ->
	  try d_msg_CatchedFishRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CatchedFishRes', {Class, Reason, StackTrace}}}})
	  end;
      'LeaveGameRes' ->
	  try d_msg_LeaveGameRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'LeaveGameRes', {Class, Reason, StackTrace}}}})
	  end;
      'SyncFishData' ->
	  try d_msg_SyncFishData(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'SyncFishData', {Class, Reason, StackTrace}}}})
	  end;
      'SyncFishes' ->
	  try d_msg_SyncFishes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'SyncFishes', {Class, Reason, StackTrace}}}})
	  end;
      'NotifyState' ->
	  try d_msg_NotifyState(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'NotifyState', {Class, Reason, StackTrace}}}})
	  end;
      'ItemData' ->
	  try d_msg_ItemData(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ItemData', {Class, Reason, StackTrace}}}})
	  end;
      'LoginRes' ->
	  try d_msg_LoginRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'LoginRes', {Class, Reason, StackTrace}}}})
	  end;
      'Heartbeat' ->
	  try d_msg_Heartbeat(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Heartbeat', {Class, Reason, StackTrace}}}})
	  end;
      'ClearSceneRes' ->
	  try d_msg_ClearSceneRes(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ClearSceneRes', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_CatchedFishes(Bin, TrUserData) ->
    dfp_read_field_def_CatchedFishes(Bin, 0, 0,
				     id(0, TrUserData), id(0, TrUserData),
				     id(0, TrUserData), id(0, TrUserData),
				     TrUserData).

dfp_read_field_def_CatchedFishes(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_CatchedFishes_catchEvent(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishes(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_CatchedFishes_fishID(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishes(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_CatchedFishes_rewardID(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishes(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_CatchedFishes_lightingFishID(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishes(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #'CatchedFishes'{catchEvent = F@_1, fishID = F@_2,
		     rewardID = F@_3, lightingFishID = F@_4};
dfp_read_field_def_CatchedFishes(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_CatchedFishes(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_CatchedFishes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CatchedFishes(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
dg_read_field_def_CatchedFishes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CatchedFishes_catchEvent(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      16 ->
	  d_field_CatchedFishes_fishID(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      24 ->
	  d_field_CatchedFishes_rewardID(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      32 ->
	  d_field_CatchedFishes_lightingFishID(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CatchedFishes(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    1 ->
		skip_64_CatchedFishes(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    2 ->
		skip_length_delimited_CatchedFishes(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    3 ->
		skip_group_CatchedFishes(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_CatchedFishes(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData)
	  end
    end;
dg_read_field_def_CatchedFishes(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, _) ->
    #'CatchedFishes'{catchEvent = F@_1, fishID = F@_2,
		     rewardID = F@_3, lightingFishID = F@_4}.

d_field_CatchedFishes_catchEvent(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CatchedFishes_catchEvent(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_CatchedFishes_catchEvent(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishes(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, TrUserData).

d_field_CatchedFishes_fishID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CatchedFishes_fishID(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_CatchedFishes_fishID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishes(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, TrUserData).

d_field_CatchedFishes_rewardID(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CatchedFishes_rewardID(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_CatchedFishes_rewardID(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishes(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, TrUserData).

d_field_CatchedFishes_lightingFishID(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CatchedFishes_lightingFishID(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_CatchedFishes_lightingFishID(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishes(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, TrUserData).

skip_varint_CatchedFishes(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_CatchedFishes(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
skip_varint_CatchedFishes(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CatchedFishes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_CatchedFishes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_CatchedFishes(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
skip_length_delimited_CatchedFishes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CatchedFishes(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_group_CatchedFishes(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CatchedFishes(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_32_CatchedFishes(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CatchedFishes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_64_CatchedFishes(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CatchedFishes(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

d_msg_UnbindRobotSuccessRes(Bin, TrUserData) ->
    dfp_read_field_def_UnbindRobotSuccessRes(Bin, 0, 0,
					     id(0, TrUserData),
					     id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_UnbindRobotSuccessRes(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_UnbindRobotSuccessRes_position(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_UnbindRobotSuccessRes(<<18,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_UnbindRobotSuccessRes_userId(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_UnbindRobotSuccessRes(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    #'UnbindRobotSuccessRes'{position = F@_1,
			     userId = F@_2};
dfp_read_field_def_UnbindRobotSuccessRes(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData) ->
    dg_read_field_def_UnbindRobotSuccessRes(Other, Z1, Z2,
					    F@_1, F@_2, TrUserData).

dg_read_field_def_UnbindRobotSuccessRes(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UnbindRobotSuccessRes(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
dg_read_field_def_UnbindRobotSuccessRes(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_UnbindRobotSuccessRes_position(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      18 ->
	  d_field_UnbindRobotSuccessRes_userId(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UnbindRobotSuccessRes(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    1 ->
		skip_64_UnbindRobotSuccessRes(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    2 ->
		skip_length_delimited_UnbindRobotSuccessRes(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    3 ->
		skip_group_UnbindRobotSuccessRes(Rest, Key bsr 3, 0,
						 F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_UnbindRobotSuccessRes(Rest, 0, 0, F@_1, F@_2,
					      TrUserData)
	  end
    end;
dg_read_field_def_UnbindRobotSuccessRes(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'UnbindRobotSuccessRes'{position = F@_1,
			     userId = F@_2}.

d_field_UnbindRobotSuccessRes_position(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_UnbindRobotSuccessRes_position(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_UnbindRobotSuccessRes_position(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_UnbindRobotSuccessRes(RestF, 0, 0,
					     NewFValue, F@_2, TrUserData).

d_field_UnbindRobotSuccessRes_userId(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_UnbindRobotSuccessRes_userId(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_UnbindRobotSuccessRes_userId(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_UnbindRobotSuccessRes(RestF, 0, 0,
					     F@_1, NewFValue, TrUserData).

skip_varint_UnbindRobotSuccessRes(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_UnbindRobotSuccessRes(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
skip_varint_UnbindRobotSuccessRes(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnbindRobotSuccessRes(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

skip_length_delimited_UnbindRobotSuccessRes(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_UnbindRobotSuccessRes(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
skip_length_delimited_UnbindRobotSuccessRes(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UnbindRobotSuccessRes(Rest2, 0, 0,
					     F@_1, F@_2, TrUserData).

skip_group_UnbindRobotSuccessRes(Bin, FNum, Z2, F@_1,
				 F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UnbindRobotSuccessRes(Rest, 0, Z2,
					     F@_1, F@_2, TrUserData).

skip_32_UnbindRobotSuccessRes(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnbindRobotSuccessRes(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

skip_64_UnbindRobotSuccessRes(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnbindRobotSuccessRes(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

d_msg_GameRecord(Bin, TrUserData) ->
    dfp_read_field_def_GameRecord(Bin, 0, 0,
				  id(<<>>, TrUserData), id(0, TrUserData),
				  id(0, TrUserData), id(0, TrUserData),
				  id(0, TrUserData), id(<<>>, TrUserData),
				  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_GameRecord(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_GameRecord_roundId(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GameRecord(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_GameRecord_roomType(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GameRecord(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_GameRecord_allBet(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GameRecord(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_GameRecord_allWin(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GameRecord(<<40, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_GameRecord_result(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GameRecord(<<50, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_GameRecord_startTime(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GameRecord(<<58, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    d_field_GameRecord_endTime(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_GameRecord(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'GameRecord'{roundId = F@_1, roomType = F@_2,
		  allBet = F@_3, allWin = F@_4, result = F@_5,
		  startTime = F@_6, endTime = F@_7};
dfp_read_field_def_GameRecord(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_GameRecord(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_GameRecord(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GameRecord(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
dg_read_field_def_GameRecord(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GameRecord_roundId(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      16 ->
	  d_field_GameRecord_roomType(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
      24 ->
	  d_field_GameRecord_allBet(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      32 ->
	  d_field_GameRecord_allWin(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      40 ->
	  d_field_GameRecord_result(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_GameRecord_startTime(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
      58 ->
	  d_field_GameRecord_endTime(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GameRecord(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_GameRecord(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_GameRecord(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6, F@_7,
						 TrUserData);
	    3 ->
		skip_group_GameRecord(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_GameRecord(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_GameRecord(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'GameRecord'{roundId = F@_1, roomType = F@_2,
		  allBet = F@_3, allWin = F@_4, result = F@_5,
		  startTime = F@_6, endTime = F@_7}.

d_field_GameRecord_roundId(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_GameRecord_roundId(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_GameRecord_roundId(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GameRecord(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				  TrUserData).

d_field_GameRecord_roomType(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    d_field_GameRecord_roomType(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
d_field_GameRecord_roomType(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_GameRecord(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				  TrUserData).

d_field_GameRecord_allBet(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_GameRecord_allBet(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_GameRecord_allBet(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_GameRecord(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, F@_6, F@_7,
				  TrUserData).

d_field_GameRecord_allWin(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_GameRecord_allWin(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_GameRecord_allWin(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_GameRecord(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, F@_6, F@_7,
				  TrUserData).

d_field_GameRecord_result(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_GameRecord_result(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_GameRecord_result(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_GameRecord(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, F@_6, F@_7,
				  TrUserData).

d_field_GameRecord_startTime(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    d_field_GameRecord_startTime(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
d_field_GameRecord_startTime(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GameRecord(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, NewFValue, F@_7,
				  TrUserData).

d_field_GameRecord_endTime(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_GameRecord_endTime(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_GameRecord_endTime(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GameRecord(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, NewFValue,
				  TrUserData).

skip_varint_GameRecord(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    skip_varint_GameRecord(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_GameRecord(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    dfp_read_field_def_GameRecord(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_GameRecord(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_GameRecord(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_GameRecord(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameRecord(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_GameRecord(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GameRecord(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_GameRecord(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_GameRecord(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_GameRecord(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_GameRecord(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_msg_IntoRoomReq(Bin, TrUserData) ->
    dfp_read_field_def_IntoRoomReq(Bin, 0, 0,
				   id(<<>>, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_IntoRoomReq(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_IntoRoomReq_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_IntoRoomReq(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_IntoRoomReq_roomId(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_IntoRoomReq(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_IntoRoomReq_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_IntoRoomReq(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'IntoRoomReq'{uid = F@_1, roomId = F@_2, type = F@_3};
dfp_read_field_def_IntoRoomReq(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_IntoRoomReq(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_IntoRoomReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_IntoRoomReq(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_IntoRoomReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_IntoRoomReq_uid(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      16 ->
	  d_field_IntoRoomReq_roomId(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      24 ->
	  d_field_IntoRoomReq_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_IntoRoomReq(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_IntoRoomReq(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_IntoRoomReq(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_IntoRoomReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_IntoRoomReq(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_IntoRoomReq(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #'IntoRoomReq'{uid = F@_1, roomId = F@_2, type = F@_3}.

d_field_IntoRoomReq_uid(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_IntoRoomReq_uid(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_IntoRoomReq_uid(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_IntoRoomReq(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, TrUserData).

d_field_IntoRoomReq_roomId(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_IntoRoomReq_roomId(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_IntoRoomReq_roomId(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomReq(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, TrUserData).

d_field_IntoRoomReq_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_IntoRoomReq_type(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_IntoRoomReq_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomReq(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, TrUserData).

skip_varint_IntoRoomReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_IntoRoomReq(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_IntoRoomReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_IntoRoomReq(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_IntoRoomReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_IntoRoomReq(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_IntoRoomReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_IntoRoomReq(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_IntoRoomReq(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_IntoRoomReq(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_IntoRoomReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_IntoRoomReq(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_IntoRoomReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_IntoRoomReq(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

d_msg_BulletItem(Bin, TrUserData) ->
    dfp_read_field_def_BulletItem(Bin, 0, 0,
				  id(0, TrUserData), id(0, TrUserData),
				  TrUserData).

dfp_read_field_def_BulletItem(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_BulletItem_bulletID(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_BulletItem(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_BulletItem_degree(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_BulletItem(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #'BulletItem'{bulletID = F@_1, degree = F@_2};
dfp_read_field_def_BulletItem(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_BulletItem(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_BulletItem(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BulletItem(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_BulletItem(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BulletItem_bulletID(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      16 ->
	  d_field_BulletItem_degree(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BulletItem(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_BulletItem(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_BulletItem(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_BulletItem(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_BulletItem(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_BulletItem(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'BulletItem'{bulletID = F@_1, degree = F@_2}.

d_field_BulletItem_bulletID(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BulletItem_bulletID(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_BulletItem_bulletID(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_BulletItem(RestF, 0, 0, NewFValue,
				  F@_2, TrUserData).

d_field_BulletItem_degree(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BulletItem_degree(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_BulletItem_degree(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_BulletItem(RestF, 0, 0, F@_1,
				  NewFValue, TrUserData).

skip_varint_BulletItem(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_BulletItem(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_BulletItem(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BulletItem(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_BulletItem(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_BulletItem(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_BulletItem(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BulletItem(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_BulletItem(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BulletItem(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_BulletItem(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_BulletItem(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_BulletItem(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_BulletItem(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

d_msg_FireRes(Bin, TrUserData) ->
    dfp_read_field_def_FireRes(Bin, 0, 0,
			       id([], TrUserData), id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       TrUserData).

dfp_read_field_def_FireRes(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_bulletItemList(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, TrUserData);
dfp_read_field_def_FireRes(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_launcherType(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, TrUserData);
dfp_read_field_def_FireRes(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_energy(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   TrUserData);
dfp_read_field_def_FireRes(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_reboundCount(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, TrUserData);
dfp_read_field_def_FireRes(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_lockFishID(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData);
dfp_read_field_def_FireRes(<<48, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_gold(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_FireRes(<<56, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_targetX(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData);
dfp_read_field_def_FireRes(<<64, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_targetY(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData);
dfp_read_field_def_FireRes(<<72, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_bulletID(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData);
dfp_read_field_def_FireRes(<<80, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData) ->
    d_field_FireRes_seatID(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   TrUserData);
dfp_read_field_def_FireRes(<<>>, 0, 0, R1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   TrUserData) ->
    #'FireRes'{bulletItemList =
		   lists_reverse(R1, TrUserData),
	       launcherType = F@_2, energy = F@_3, reboundCount = F@_4,
	       lockFishID = F@_5, gold = F@_6, targetX = F@_7,
	       targetY = F@_8, bulletID = F@_9, seatID = F@_10};
dfp_read_field_def_FireRes(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   TrUserData) ->
    dg_read_field_def_FireRes(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData).

dg_read_field_def_FireRes(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FireRes(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
dg_read_field_def_FireRes(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FireRes_bulletItemList(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, TrUserData);
      16 ->
	  d_field_FireRes_launcherType(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
      24 ->
	  d_field_FireRes_energy(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 TrUserData);
      32 ->
	  d_field_FireRes_reboundCount(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
      40 ->
	  d_field_FireRes_lockFishID(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
      48 ->
	  d_field_FireRes_gold(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
      56 ->
	  d_field_FireRes_targetX(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  TrUserData);
      64 ->
	  d_field_FireRes_targetY(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  TrUserData);
      72 ->
	  d_field_FireRes_bulletID(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
      80 ->
	  d_field_FireRes_seatID(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FireRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
	    1 ->
		skip_64_FireRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				TrUserData);
	    2 ->
		skip_length_delimited_FireRes(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, TrUserData);
	    3 ->
		skip_group_FireRes(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
	    5 ->
		skip_32_FireRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData)
	  end
    end;
dg_read_field_def_FireRes(<<>>, 0, 0, R1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  TrUserData) ->
    #'FireRes'{bulletItemList =
		   lists_reverse(R1, TrUserData),
	       launcherType = F@_2, energy = F@_3, reboundCount = F@_4,
	       lockFishID = F@_5, gold = F@_6, targetX = F@_7,
	       targetY = F@_8, bulletID = F@_9, seatID = F@_10}.

d_field_FireRes_bulletItemList(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_bulletItemList(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_FireRes_bulletItemList(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_BulletItem(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FireRes(RestF, 0, 0,
			       cons(NewFValue, Prev, TrUserData), F@_2, F@_3,
			       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

d_field_FireRes_launcherType(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_launcherType(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, TrUserData);
d_field_FireRes_launcherType(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

d_field_FireRes_energy(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_energy(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData);
d_field_FireRes_energy(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       F@_10, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, TrUserData).

d_field_FireRes_reboundCount(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_reboundCount(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, TrUserData);
d_field_FireRes_reboundCount(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, TrUserData).

d_field_FireRes_lockFishID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_lockFishID(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, TrUserData);
d_field_FireRes_lockFishID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
			   F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
			       F@_10, TrUserData).

d_field_FireRes_gold(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_gold(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 TrUserData);
d_field_FireRes_gold(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		     F@_10, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9,
			       F@_10, TrUserData).

d_field_FireRes_targetX(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_targetX(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData);
d_field_FireRes_targetX(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
			F@_10, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
			       F@_10, TrUserData).

d_field_FireRes_targetY(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_targetY(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData);
d_field_FireRes_targetY(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
			F@_10, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9,
			       F@_10, TrUserData).

d_field_FireRes_bulletID(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_bulletID(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
d_field_FireRes_bulletID(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
			 F@_10, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
			       F@_10, TrUserData).

d_field_FireRes_seatID(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_FireRes_seatID(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData);
d_field_FireRes_seatID(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireRes(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       NewFValue, TrUserData).

skip_varint_FireRes(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    skip_varint_FireRes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_varint_FireRes(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, TrUserData) ->
    dfp_read_field_def_FireRes(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

skip_length_delimited_FireRes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_FireRes(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
skip_length_delimited_FireRes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FireRes(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

skip_group_FireRes(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FireRes(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

skip_32_FireRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		TrUserData) ->
    dfp_read_field_def_FireRes(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

skip_64_FireRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		TrUserData) ->
    dfp_read_field_def_FireRes(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData).

d_msg_IntoRoomRes(Bin, TrUserData) ->
    dfp_read_field_def_IntoRoomRes(Bin, 0, 0,
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id(0, TrUserData),
				   id(<<>>, TrUserData), id(0, TrUserData),
				   TrUserData).

dfp_read_field_def_IntoRoomRes(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_bTableTypeID(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_backgroundImage(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, F@_12,
					TrUserData);
dfp_read_field_def_IntoRoomRes(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_launcherType(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_seatID(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<40, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_rateIndex(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<48, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_match(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<56, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_matchGold(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<64, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_minRate(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<72, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_maxRate(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<80, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_roomId(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<90, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_roomName(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<96, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    d_field_IntoRoomRes_endTime(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, TrUserData);
dfp_read_field_def_IntoRoomRes(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, _) ->
    #'IntoRoomRes'{bTableTypeID = F@_1,
		   backgroundImage = F@_2, launcherType = F@_3,
		   seatID = F@_4, rateIndex = F@_5, match = F@_6,
		   matchGold = F@_7, minRate = F@_8, maxRate = F@_9,
		   roomId = F@_10, roomName = F@_11, endTime = F@_12};
dfp_read_field_def_IntoRoomRes(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, TrUserData) ->
    dg_read_field_def_IntoRoomRes(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, TrUserData).

dg_read_field_def_IntoRoomRes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_IntoRoomRes(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  TrUserData);
dg_read_field_def_IntoRoomRes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_IntoRoomRes_bTableTypeID(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12,
					   TrUserData);
      16 ->
	  d_field_IntoRoomRes_backgroundImage(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      F@_12, TrUserData);
      24 ->
	  d_field_IntoRoomRes_launcherType(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12,
					   TrUserData);
      32 ->
	  d_field_IntoRoomRes_seatID(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, TrUserData);
      40 ->
	  d_field_IntoRoomRes_rateIndex(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, TrUserData);
      48 ->
	  d_field_IntoRoomRes_match(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, TrUserData);
      56 ->
	  d_field_IntoRoomRes_matchGold(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, TrUserData);
      64 ->
	  d_field_IntoRoomRes_minRate(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, TrUserData);
      72 ->
	  d_field_IntoRoomRes_maxRate(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, TrUserData);
      80 ->
	  d_field_IntoRoomRes_roomId(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, TrUserData);
      90 ->
	  d_field_IntoRoomRes_roomName(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, TrUserData);
      96 ->
	  d_field_IntoRoomRes_endTime(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_IntoRoomRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					F@_10, F@_11, F@_12, TrUserData);
	    1 ->
		skip_64_IntoRoomRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, TrUserData);
	    2 ->
		skip_length_delimited_IntoRoomRes(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, TrUserData);
	    3 ->
		skip_group_IntoRoomRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, TrUserData);
	    5 ->
		skip_32_IntoRoomRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, TrUserData)
	  end
    end;
dg_read_field_def_IntoRoomRes(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, _) ->
    #'IntoRoomRes'{bTableTypeID = F@_1,
		   backgroundImage = F@_2, launcherType = F@_3,
		   seatID = F@_4, rateIndex = F@_5, match = F@_6,
		   matchGold = F@_7, minRate = F@_8, maxRate = F@_9,
		   roomId = F@_10, roomName = F@_11, endTime = F@_12}.

d_field_IntoRoomRes_bTableTypeID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				 TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_bTableTypeID(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, TrUserData);
d_field_IntoRoomRes_bTableTypeID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_backgroundImage(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_backgroundImage(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, F@_12, TrUserData);
d_field_IntoRoomRes_backgroundImage(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				   F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_launcherType(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				 TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_launcherType(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, TrUserData);
d_field_IntoRoomRes_launcherType(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
				 F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_seatID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_seatID(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_IntoRoomRes_seatID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_rateIndex(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_rateIndex(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  TrUserData);
d_field_IntoRoomRes_rateIndex(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_match(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_match(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_IntoRoomRes_match(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_matchGold(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_matchGold(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  TrUserData);
d_field_IntoRoomRes_matchGold(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			      F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
				   F@_9, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_minRate(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_minRate(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_IntoRoomRes_minRate(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			    F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue,
				   F@_9, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_maxRate(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_maxRate(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_IntoRoomRes_maxRate(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, _, F@_10, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   NewFValue, F@_10, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_roomId(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_roomId(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_IntoRoomRes_roomId(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, _, F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   NewFValue, F@_11, F@_12, TrUserData).

d_field_IntoRoomRes_roomName(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_roomName(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_IntoRoomRes_roomName(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, _, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, NewFValue, F@_12, TrUserData).

d_field_IntoRoomRes_endTime(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_IntoRoomRes_endTime(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, TrUserData);
d_field_IntoRoomRes_endTime(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_IntoRoomRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, NewFValue, TrUserData).

skip_varint_IntoRoomRes(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    skip_varint_IntoRoomRes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, TrUserData);
skip_varint_IntoRoomRes(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_IntoRoomRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, TrUserData).

skip_length_delimited_IntoRoomRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  TrUserData)
    when N < 57 ->
    skip_length_delimited_IntoRoomRes(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, TrUserData);
skip_length_delimited_IntoRoomRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_IntoRoomRes(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, TrUserData).

skip_group_IntoRoomRes(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_IntoRoomRes(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, TrUserData).

skip_32_IntoRoomRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_IntoRoomRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, TrUserData).

skip_64_IntoRoomRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_IntoRoomRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, TrUserData).

d_msg_CommonStatus(Bin, TrUserData) ->
    dfp_read_field_def_CommonStatus(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_CommonStatus(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_CommonStatus_code(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_CommonStatus(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_CommonStatus_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_CommonStatus(<<24, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_CommonStatus_type(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_CommonStatus(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #'CommonStatus'{code = F@_1, msg = F@_2, type = F@_3};
dfp_read_field_def_CommonStatus(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_CommonStatus(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_CommonStatus(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommonStatus(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_CommonStatus(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommonStatus_code(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      18 ->
	  d_field_CommonStatus_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      24 ->
	  d_field_CommonStatus_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommonStatus(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_CommonStatus(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_CommonStatus(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_CommonStatus(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_CommonStatus(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_CommonStatus(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'CommonStatus'{code = F@_1, msg = F@_2, type = F@_3}.

d_field_CommonStatus_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_CommonStatus_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_CommonStatus(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_CommonStatus_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_msg(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_CommonStatus_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CommonStatus(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, TrUserData).

d_field_CommonStatus_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_type(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_CommonStatus_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_CommonStatus(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, TrUserData).

skip_varint_CommonStatus(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_CommonStatus(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_CommonStatus(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_CommonStatus(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommonStatus(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_CommonStatus(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommonStatus(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_CommonStatus(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CommonStatus(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_CommonStatus(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_CommonStatus(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

d_msg_BindRobotReq(Bin, TrUserData) ->
    dfp_read_field_def_BindRobotReq(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_BindRobotReq(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_BindRobotReq_position(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_BindRobotReq(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_BindRobotReq_userId(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_BindRobotReq(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'BindRobotReq'{position = F@_1, userId = F@_2};
dfp_read_field_def_BindRobotReq(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_BindRobotReq(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_BindRobotReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BindRobotReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_BindRobotReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BindRobotReq_position(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_BindRobotReq_userId(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BindRobotReq(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_BindRobotReq(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_BindRobotReq(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_BindRobotReq(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_BindRobotReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_BindRobotReq(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'BindRobotReq'{position = F@_1, userId = F@_2}.

d_field_BindRobotReq_position(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BindRobotReq_position(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_BindRobotReq_position(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_BindRobotReq(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_BindRobotReq_userId(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BindRobotReq_userId(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_BindRobotReq_userId(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_BindRobotReq(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_BindRobotReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_BindRobotReq(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_BindRobotReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BindRobotReq(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_BindRobotReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_BindRobotReq(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_BindRobotReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BindRobotReq(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_BindRobotReq(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BindRobotReq(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_BindRobotReq(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BindRobotReq(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_BindRobotReq(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BindRobotReq(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_UnbindRobotReq(Bin, TrUserData) ->
    dfp_read_field_def_UnbindRobotReq(Bin, 0, 0,
				      id(0, TrUserData), id(<<>>, TrUserData),
				      TrUserData).

dfp_read_field_def_UnbindRobotReq(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_UnbindRobotReq_position(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_UnbindRobotReq(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_UnbindRobotReq_userId(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_UnbindRobotReq(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'UnbindRobotReq'{position = F@_1, userId = F@_2};
dfp_read_field_def_UnbindRobotReq(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_UnbindRobotReq(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_UnbindRobotReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UnbindRobotReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_UnbindRobotReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_UnbindRobotReq_position(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  d_field_UnbindRobotReq_userId(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UnbindRobotReq(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_UnbindRobotReq(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_UnbindRobotReq(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_UnbindRobotReq(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_UnbindRobotReq(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_UnbindRobotReq(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #'UnbindRobotReq'{position = F@_1, userId = F@_2}.

d_field_UnbindRobotReq_position(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_UnbindRobotReq_position(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_UnbindRobotReq_position(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_UnbindRobotReq(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_UnbindRobotReq_userId(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_UnbindRobotReq_userId(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_UnbindRobotReq_userId(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_UnbindRobotReq(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_UnbindRobotReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_UnbindRobotReq(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_UnbindRobotReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnbindRobotReq(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_UnbindRobotReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_UnbindRobotReq(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_UnbindRobotReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UnbindRobotReq(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_UnbindRobotReq(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UnbindRobotReq(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_UnbindRobotReq(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnbindRobotReq(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_UnbindRobotReq(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnbindRobotReq(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

d_msg_ChangeClientRateReq(Bin, TrUserData) ->
    dfp_read_field_def_ChangeClientRateReq(Bin, 0, 0,
					   id(0, TrUserData), TrUserData).

dfp_read_field_def_ChangeClientRateReq(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_ChangeClientRateReq_opt(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_ChangeClientRateReq(<<>>, 0, 0, F@_1,
				       _) ->
    #'ChangeClientRateReq'{opt = F@_1};
dfp_read_field_def_ChangeClientRateReq(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_ChangeClientRateReq(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_ChangeClientRateReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ChangeClientRateReq(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ChangeClientRateReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ChangeClientRateReq_opt(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ChangeClientRateReq(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_ChangeClientRateReq(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_ChangeClientRateReq(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_ChangeClientRateReq(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_ChangeClientRateReq(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_ChangeClientRateReq(<<>>, 0, 0, F@_1,
				      _) ->
    #'ChangeClientRateReq'{opt = F@_1}.

d_field_ChangeClientRateReq_opt(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ChangeClientRateReq_opt(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_ChangeClientRateReq_opt(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeClientRateReq(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_ChangeClientRateReq(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ChangeClientRateReq(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_ChangeClientRateReq(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ChangeClientRateReq(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_ChangeClientRateReq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ChangeClientRateReq(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ChangeClientRateReq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChangeClientRateReq(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_ChangeClientRateReq(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ChangeClientRateReq(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_ChangeClientRateReq(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ChangeClientRateReq(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_ChangeClientRateReq(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ChangeClientRateReq(Rest, Z1, Z2,
					   F@_1, TrUserData).

d_msg_RoomInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_RoomInfoReq(Bin, 0, 0,
				   id(0, TrUserData), id(<<>>, TrUserData),
				   TrUserData).

dfp_read_field_def_RoomInfoReq(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_RoomInfoReq_type(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_RoomInfoReq(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_RoomInfoReq_uid(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_RoomInfoReq(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'RoomInfoReq'{type = F@_1, uid = F@_2};
dfp_read_field_def_RoomInfoReq(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_RoomInfoReq(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_RoomInfoReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RoomInfoReq(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_RoomInfoReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RoomInfoReq_type(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_RoomInfoReq_uid(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RoomInfoReq(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_RoomInfoReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_RoomInfoReq(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_RoomInfoReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_RoomInfoReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_RoomInfoReq(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #'RoomInfoReq'{type = F@_1, uid = F@_2}.

d_field_RoomInfoReq_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RoomInfoReq_type(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_RoomInfoReq_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_RoomInfoReq(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_RoomInfoReq_uid(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RoomInfoReq_uid(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_RoomInfoReq_uid(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_RoomInfoReq(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_RoomInfoReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_RoomInfoReq(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_RoomInfoReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RoomInfoReq(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_RoomInfoReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RoomInfoReq(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_RoomInfoReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RoomInfoReq(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_RoomInfoReq(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RoomInfoReq(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_RoomInfoReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_RoomInfoReq(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_RoomInfoReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_RoomInfoReq(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_RoomOnlineInfo(Bin, TrUserData) ->
    dfp_read_field_def_RoomOnlineInfo(Bin, 0, 0,
				      id(0, TrUserData), id(0, TrUserData),
				      TrUserData).

dfp_read_field_def_RoomOnlineInfo(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_RoomOnlineInfo_type(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_RoomOnlineInfo(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_RoomOnlineInfo_playCount(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_RoomOnlineInfo(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'RoomOnlineInfo'{type = F@_1, playCount = F@_2};
dfp_read_field_def_RoomOnlineInfo(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_RoomOnlineInfo(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_RoomOnlineInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RoomOnlineInfo(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_RoomOnlineInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RoomOnlineInfo_type(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      16 ->
	  d_field_RoomOnlineInfo_playCount(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RoomOnlineInfo(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_RoomOnlineInfo(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_RoomOnlineInfo(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_RoomOnlineInfo(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_RoomOnlineInfo(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_RoomOnlineInfo(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #'RoomOnlineInfo'{type = F@_1, playCount = F@_2}.

d_field_RoomOnlineInfo_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RoomOnlineInfo_type(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_RoomOnlineInfo_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_RoomOnlineInfo(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_RoomOnlineInfo_playCount(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RoomOnlineInfo_playCount(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RoomOnlineInfo_playCount(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_RoomOnlineInfo(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_RoomOnlineInfo(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_RoomOnlineInfo(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_RoomOnlineInfo(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RoomOnlineInfo(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_RoomOnlineInfo(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RoomOnlineInfo(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_RoomOnlineInfo(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RoomOnlineInfo(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_RoomOnlineInfo(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RoomOnlineInfo(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_RoomOnlineInfo(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RoomOnlineInfo(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_RoomOnlineInfo(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RoomOnlineInfo(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

d_msg_RoomOnlineInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_RoomOnlineInfoRes(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_RoomOnlineInfoRes(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_RoomOnlineInfoRes_roomOnlineInfo(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_RoomOnlineInfoRes(<<>>, 0, 0, R1,
				     TrUserData) ->
    #'RoomOnlineInfoRes'{roomOnlineInfo =
			     lists_reverse(R1, TrUserData)};
dfp_read_field_def_RoomOnlineInfoRes(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_RoomOnlineInfoRes(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_RoomOnlineInfoRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RoomOnlineInfoRes(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_RoomOnlineInfoRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RoomOnlineInfoRes_roomOnlineInfo(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RoomOnlineInfoRes(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_RoomOnlineInfoRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_RoomOnlineInfoRes(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_RoomOnlineInfoRes(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_RoomOnlineInfoRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_RoomOnlineInfoRes(<<>>, 0, 0, R1,
				    TrUserData) ->
    #'RoomOnlineInfoRes'{roomOnlineInfo =
			     lists_reverse(R1, TrUserData)}.

d_field_RoomOnlineInfoRes_roomOnlineInfo(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RoomOnlineInfoRes_roomOnlineInfo(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_RoomOnlineInfoRes_roomOnlineInfo(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_RoomOnlineInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RoomOnlineInfoRes(RestF, 0, 0,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_RoomOnlineInfoRes(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_RoomOnlineInfoRes(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_RoomOnlineInfoRes(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_RoomOnlineInfoRes(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_RoomOnlineInfoRes(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RoomOnlineInfoRes(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_RoomOnlineInfoRes(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RoomOnlineInfoRes(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_RoomOnlineInfoRes(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RoomOnlineInfoRes(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_RoomOnlineInfoRes(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_RoomOnlineInfoRes(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_RoomOnlineInfoRes(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_RoomOnlineInfoRes(Rest, Z1, Z2, F@_1,
					 TrUserData).

d_msg_GameRecordRes(Bin, TrUserData) ->
    dfp_read_field_def_GameRecordRes(Bin, 0, 0,
				     id([], TrUserData), TrUserData).

dfp_read_field_def_GameRecordRes(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_GameRecordRes_gameRecord(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_GameRecordRes(<<>>, 0, 0, R1,
				 TrUserData) ->
    #'GameRecordRes'{gameRecord =
			 lists_reverse(R1, TrUserData)};
dfp_read_field_def_GameRecordRes(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_GameRecordRes(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_GameRecordRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GameRecordRes(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GameRecordRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GameRecordRes_gameRecord(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GameRecordRes(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_GameRecordRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_GameRecordRes(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_GameRecordRes(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_GameRecordRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GameRecordRes(<<>>, 0, 0, R1,
				TrUserData) ->
    #'GameRecordRes'{gameRecord =
			 lists_reverse(R1, TrUserData)}.

d_field_GameRecordRes_gameRecord(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GameRecordRes_gameRecord(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_GameRecordRes_gameRecord(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_GameRecord(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GameRecordRes(RestF, 0, 0,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_GameRecordRes(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_GameRecordRes(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_GameRecordRes(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GameRecordRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_GameRecordRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GameRecordRes(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GameRecordRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameRecordRes(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_GameRecordRes(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GameRecordRes(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_GameRecordRes(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_GameRecordRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_GameRecordRes(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_GameRecordRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_LoginReq(Bin, TrUserData) ->
    dfp_read_field_def_LoginReq(Bin, 0, 0,
				id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_LoginReq(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_LoginReq_identity(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_LoginReq(<<>>, 0, 0, F@_1, _) ->
    #'LoginReq'{identity = F@_1};
dfp_read_field_def_LoginReq(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_LoginReq(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_LoginReq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginReq(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_LoginReq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginReq_identity(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_LoginReq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_LoginReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_LoginReq(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_LoginReq(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_LoginReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_LoginReq(<<>>, 0, 0, F@_1, _) ->
    #'LoginReq'{identity = F@_1}.

d_field_LoginReq_identity(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LoginReq_identity(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_LoginReq_identity(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginReq(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_LoginReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_LoginReq(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_LoginReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_LoginReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LoginReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginReq(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_LoginReq(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginReq(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_LoginReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_LoginReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_LoginReq(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_BroadcastMessage(Bin, TrUserData) ->
    dfp_read_field_def_BroadcastMessage(Bin, 0, 0,
					id(0, TrUserData), id(<<>>, TrUserData),
					id(0, TrUserData), id([], TrUserData),
					id(0, TrUserData), TrUserData).

dfp_read_field_def_BroadcastMessage(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_BroadcastMessage_broadType(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_BroadcastMessage(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_BroadcastMessage_msg(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_BroadcastMessage(<<24, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_BroadcastMessage_langId(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_BroadcastMessage(<<34, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_BroadcastMessage_params(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_BroadcastMessage(<<40, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_BroadcastMessage_priority(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_BroadcastMessage(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, R1, F@_5, TrUserData) ->
    #'BroadcastMessage'{broadType = F@_1, msg = F@_2,
			langId = F@_3, params = lists_reverse(R1, TrUserData),
			priority = F@_5};
dfp_read_field_def_BroadcastMessage(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_BroadcastMessage(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_BroadcastMessage(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BroadcastMessage(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
dg_read_field_def_BroadcastMessage(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BroadcastMessage_broadType(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      18 ->
	  d_field_BroadcastMessage_msg(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_BroadcastMessage_langId(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_BroadcastMessage_params(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_BroadcastMessage_priority(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BroadcastMessage(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_BroadcastMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_BroadcastMessage(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4, F@_5,
						       TrUserData);
	    3 ->
		skip_group_BroadcastMessage(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_BroadcastMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_BroadcastMessage(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, R1, F@_5, TrUserData) ->
    #'BroadcastMessage'{broadType = F@_1, msg = F@_2,
			langId = F@_3, params = lists_reverse(R1, TrUserData),
			priority = F@_5}.

d_field_BroadcastMessage_broadType(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_BroadcastMessage_broadType(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_BroadcastMessage_broadType(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_BroadcastMessage(RestF, 0, 0,
					NewFValue, F@_2, F@_3, F@_4, F@_5,
					TrUserData).

d_field_BroadcastMessage_msg(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_BroadcastMessage_msg(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_BroadcastMessage_msg(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_BroadcastMessage(RestF, 0, 0, F@_1,
					NewFValue, F@_3, F@_4, F@_5,
					TrUserData).

d_field_BroadcastMessage_langId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_BroadcastMessage_langId(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_BroadcastMessage_langId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_BroadcastMessage(RestF, 0, 0, F@_1,
					F@_2, NewFValue, F@_4, F@_5,
					TrUserData).

d_field_BroadcastMessage_params(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_BroadcastMessage_params(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_BroadcastMessage_params(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_BroadcastMessage(RestF, 0, 0, F@_1,
					F@_2, F@_3,
					cons(NewFValue, Prev, TrUserData), F@_5,
					TrUserData).

d_field_BroadcastMessage_priority(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_BroadcastMessage_priority(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_BroadcastMessage_priority(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				  TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_BroadcastMessage(RestF, 0, 0, F@_1,
					F@_2, F@_3, F@_4, NewFValue,
					TrUserData).

skip_varint_BroadcastMessage(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    skip_varint_BroadcastMessage(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
skip_varint_BroadcastMessage(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    dfp_read_field_def_BroadcastMessage(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_BroadcastMessage(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_BroadcastMessage(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
skip_length_delimited_BroadcastMessage(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BroadcastMessage(Rest2, 0, 0, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_BroadcastMessage(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BroadcastMessage(Rest, 0, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_BroadcastMessage(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_BroadcastMessage(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_BroadcastMessage(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_BroadcastMessage(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

d_msg_BroadcastMessageList(Bin, TrUserData) ->
    dfp_read_field_def_BroadcastMessageList(Bin, 0, 0,
					    id([], TrUserData), TrUserData).

dfp_read_field_def_BroadcastMessageList(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_BroadcastMessageList_messageList(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_BroadcastMessageList(<<>>, 0, 0, R1,
					TrUserData) ->
    #'BroadcastMessageList'{messageList =
				lists_reverse(R1, TrUserData)};
dfp_read_field_def_BroadcastMessageList(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_BroadcastMessageList(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_BroadcastMessageList(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BroadcastMessageList(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_BroadcastMessageList(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_BroadcastMessageList_messageList(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BroadcastMessageList(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_BroadcastMessageList(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_BroadcastMessageList(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_BroadcastMessageList(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_BroadcastMessageList(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_BroadcastMessageList(<<>>, 0, 0, R1,
				       TrUserData) ->
    #'BroadcastMessageList'{messageList =
				lists_reverse(R1, TrUserData)}.

d_field_BroadcastMessageList_messageList(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_BroadcastMessageList_messageList(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_BroadcastMessageList_messageList(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_BroadcastMessage(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_BroadcastMessageList(RestF, 0, 0,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_BroadcastMessageList(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_BroadcastMessageList(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_BroadcastMessageList(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_BroadcastMessageList(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_BroadcastMessageList(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_BroadcastMessageList(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_BroadcastMessageList(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BroadcastMessageList(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_BroadcastMessageList(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BroadcastMessageList(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_BroadcastMessageList(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_BroadcastMessageList(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_BroadcastMessageList(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_BroadcastMessageList(Rest, Z1, Z2,
					    F@_1, TrUserData).

d_msg_Msg(Bin, TrUserData) ->
    dfp_read_field_def_Msg(Bin, 0, 0, id(0, TrUserData),
			   id(<<>>, TrUserData), id(<<>>, TrUserData),
			   TrUserData).

dfp_read_field_def_Msg(<<8, Rest/binary>>, Z1, Z2, F@_1,
		       F@_2, F@_3, TrUserData) ->
    d_field_Msg_action(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_Msg(<<18, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Msg_msgBody(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_Msg(<<26, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Msg_token(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_Msg(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       _) ->
    #'Msg'{action = F@_1, msgBody = F@_2, token = F@_3};
dfp_read_field_def_Msg(Other, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    dg_read_field_def_Msg(Other, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData).

dg_read_field_def_Msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
dg_read_field_def_Msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Msg_action(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      18 ->
	  d_field_Msg_msgBody(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      26 ->
	  d_field_Msg_token(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    1 ->
		skip_64_Msg(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_Msg(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    3 ->
		skip_group_Msg(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    5 ->
		skip_32_Msg(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_Msg(<<>>, 0, 0, F@_1, F@_2, F@_3,
		      _) ->
    #'Msg'{action = F@_1, msgBody = F@_2, token = F@_3}.

d_field_Msg_action(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Msg_action(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_Msg_action(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_Msg(RestF, 0, 0, NewFValue, F@_2,
			   F@_3, TrUserData).

d_field_Msg_msgBody(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Msg_msgBody(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_Msg_msgBody(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Msg(RestF, 0, 0, F@_1, NewFValue,
			   F@_3, TrUserData).

d_field_Msg_token(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Msg_token(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_Msg_token(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Msg(RestF, 0, 0, F@_1, F@_2,
			   NewFValue, TrUserData).

skip_varint_Msg(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    skip_varint_Msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		    TrUserData);
skip_varint_Msg(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_length_delimited_Msg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Msg(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Msg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Msg(Rest2, 0, 0, F@_1, F@_2, F@_3,
			   TrUserData).

skip_group_Msg(Bin, FNum, Z2, F@_1, F@_2, F@_3,
	       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Msg(Rest, 0, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_32_Msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

skip_64_Msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	    F@_3, TrUserData) ->
    dfp_read_field_def_Msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData).

d_msg_LeaveGameReq(Bin, TrUserData) ->
    dfp_read_field_def_LeaveGameReq(Bin, 0, 0,
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_LeaveGameReq(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_LeaveGameReq_type(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_LeaveGameReq(<<>>, 0, 0, F@_1, _) ->
    #'LeaveGameReq'{type = F@_1};
dfp_read_field_def_LeaveGameReq(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_LeaveGameReq(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_LeaveGameReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaveGameReq(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_LeaveGameReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LeaveGameReq_type(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaveGameReq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_LeaveGameReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_LeaveGameReq(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_LeaveGameReq(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_LeaveGameReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_LeaveGameReq(<<>>, 0, 0, F@_1, _) ->
    #'LeaveGameReq'{type = F@_1}.

d_field_LeaveGameReq_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_LeaveGameReq_type(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_LeaveGameReq_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_LeaveGameReq(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_LeaveGameReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_LeaveGameReq(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_LeaveGameReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_LeaveGameReq(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_LeaveGameReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaveGameReq(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_LeaveGameReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaveGameReq(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_LeaveGameReq(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaveGameReq(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_LeaveGameReq(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_LeaveGameReq(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_LeaveGameReq(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_LeaveGameReq(Rest, Z1, Z2, F@_1,
				    TrUserData).

d_msg_FireReq(Bin, TrUserData) ->
    dfp_read_field_def_FireReq(Bin, 0, 0, id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       id(0, TrUserData), id(0, TrUserData),
			       TrUserData).

dfp_read_field_def_FireReq(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FireReq_degree(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_FireReq(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FireReq_lockedFishID(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_FireReq(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FireReq_bulletID(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_FireReq(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FireReq_targetX(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_FireReq(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_FireReq_targetY(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_FireReq(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #'FireReq'{degree = F@_1, lockedFishID = F@_2,
	       bulletID = F@_3, targetX = F@_4, targetY = F@_5};
dfp_read_field_def_FireReq(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_FireReq(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_FireReq(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FireReq(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_FireReq(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_FireReq_degree(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      16 ->
	  d_field_FireReq_lockedFishID(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_FireReq_bulletID(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      32 ->
	  d_field_FireReq_targetX(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      40 ->
	  d_field_FireReq_targetY(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FireReq(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_FireReq(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_FireReq(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_FireReq(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_FireReq(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_FireReq(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #'FireReq'{degree = F@_1, lockedFishID = F@_2,
	       bulletID = F@_3, targetX = F@_4, targetY = F@_5}.

d_field_FireReq_degree(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FireReq_degree(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_FireReq_degree(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_FireReq(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_FireReq_lockedFishID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FireReq_lockedFishID(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_FireReq_lockedFishID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireReq(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_FireReq_bulletID(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FireReq_bulletID(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_FireReq_bulletID(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireReq(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, TrUserData).

d_field_FireReq_targetX(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FireReq_targetX(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_FireReq_targetX(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireReq(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, TrUserData).

d_field_FireReq_targetY(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_FireReq_targetY(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_FireReq_targetY(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_FireReq(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, TrUserData).

skip_varint_FireReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_FireReq(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_FireReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_FireReq(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_FireReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_FireReq(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_FireReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FireReq(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_FireReq(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FireReq(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_FireReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_FireReq(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_FireReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_FireReq(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_msg_Msgs(Bin, TrUserData) ->
    dfp_read_field_def_Msgs(Bin, 0, 0, id([], TrUserData),
			    TrUserData).

dfp_read_field_def_Msgs(<<10, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    d_field_Msgs_msgList(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Msgs(<<>>, 0, 0, R1, TrUserData) ->
    #'Msgs'{msgList = lists_reverse(R1, TrUserData)};
dfp_read_field_def_Msgs(Other, Z1, Z2, F@_1,
			TrUserData) ->
    dg_read_field_def_Msgs(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_Msgs(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Msgs(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
dg_read_field_def_Msgs(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Msgs_msgList(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Msgs(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Msgs(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Msgs(Rest, 0, 0, F@_1,
					   TrUserData);
	    3 ->
		skip_group_Msgs(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Msgs(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Msgs(<<>>, 0, 0, R1, TrUserData) ->
    #'Msgs'{msgList = lists_reverse(R1, TrUserData)}.

d_field_Msgs_msgList(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_Msgs_msgList(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_Msgs_msgList(<<0:1, X:7, Rest/binary>>, N, Acc,
		     Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Msg(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Msgs(RestF, 0, 0,
			    cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_Msgs(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, TrUserData) ->
    skip_varint_Msgs(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Msgs(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, TrUserData) ->
    dfp_read_field_def_Msgs(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_Msgs(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Msgs(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
skip_length_delimited_Msgs(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Msgs(Rest2, 0, 0, F@_1, TrUserData).

skip_group_Msgs(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Msgs(Rest, 0, Z2, F@_1, TrUserData).

skip_32_Msgs(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	     TrUserData) ->
    dfp_read_field_def_Msgs(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_Msgs(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	     TrUserData) ->
    dfp_read_field_def_Msgs(Rest, Z1, Z2, F@_1, TrUserData).

d_msg_NotifyLeaveGameRes(Bin, TrUserData) ->
    dfp_read_field_def_NotifyLeaveGameRes(Bin, 0, 0,
					  id(0, TrUserData), TrUserData).

dfp_read_field_def_NotifyLeaveGameRes(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_NotifyLeaveGameRes_seatID(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_NotifyLeaveGameRes(<<>>, 0, 0, F@_1,
				      _) ->
    #'NotifyLeaveGameRes'{seatID = F@_1};
dfp_read_field_def_NotifyLeaveGameRes(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_NotifyLeaveGameRes(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_NotifyLeaveGameRes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotifyLeaveGameRes(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_NotifyLeaveGameRes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_NotifyLeaveGameRes_seatID(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotifyLeaveGameRes(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_NotifyLeaveGameRes(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_NotifyLeaveGameRes(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_NotifyLeaveGameRes(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_NotifyLeaveGameRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_NotifyLeaveGameRes(<<>>, 0, 0, F@_1,
				     _) ->
    #'NotifyLeaveGameRes'{seatID = F@_1}.

d_field_NotifyLeaveGameRes_seatID(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_NotifyLeaveGameRes_seatID(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_NotifyLeaveGameRes_seatID(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyLeaveGameRes(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_NotifyLeaveGameRes(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_NotifyLeaveGameRes(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_NotifyLeaveGameRes(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NotifyLeaveGameRes(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_NotifyLeaveGameRes(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_NotifyLeaveGameRes(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_NotifyLeaveGameRes(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotifyLeaveGameRes(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_NotifyLeaveGameRes(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotifyLeaveGameRes(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_NotifyLeaveGameRes(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NotifyLeaveGameRes(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_NotifyLeaveGameRes(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_NotifyLeaveGameRes(Rest, Z1, Z2,
					  F@_1, TrUserData).

d_msg_CatchedFishReq(Bin, TrUserData) ->
    dfp_read_field_def_CatchedFishReq(Bin, 0, 0,
				      id(<<>>, TrUserData), id(0, TrUserData),
				      id(0, TrUserData), id([], TrUserData),
				      TrUserData).

dfp_read_field_def_CatchedFishReq(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_CatchedFishReq_userId(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishReq(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_CatchedFishReq_fishID(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishReq(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_CatchedFishReq_bulletID(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishReq(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_pfield_CatchedFishReq_catchedFishs(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishReq(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_CatchedFishReq_catchedFishs(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CatchedFishReq(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, R1, TrUserData) ->
    #'CatchedFishReq'{userId = F@_1, fishID = F@_2,
		      bulletID = F@_3,
		      catchedFishs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_CatchedFishReq(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_CatchedFishReq(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_CatchedFishReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CatchedFishReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
dg_read_field_def_CatchedFishReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CatchedFishReq_userId(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      16 ->
	  d_field_CatchedFishReq_fishID(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      24 ->
	  d_field_CatchedFishReq_bulletID(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      34 ->
	  d_pfield_CatchedFishReq_catchedFishs(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_CatchedFishReq_catchedFishs(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CatchedFishReq(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    1 ->
		skip_64_CatchedFishReq(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    2 ->
		skip_length_delimited_CatchedFishReq(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
	    3 ->
		skip_group_CatchedFishReq(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_CatchedFishReq(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData)
	  end
    end;
dg_read_field_def_CatchedFishReq(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, R1, TrUserData) ->
    #'CatchedFishReq'{userId = F@_1, fishID = F@_2,
		      bulletID = F@_3,
		      catchedFishs = lists_reverse(R1, TrUserData)}.

d_field_CatchedFishReq_userId(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CatchedFishReq_userId(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_CatchedFishReq_userId(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CatchedFishReq(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_CatchedFishReq_fishID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CatchedFishReq_fishID(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_CatchedFishReq_fishID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishReq(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, TrUserData).

d_field_CatchedFishReq_bulletID(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CatchedFishReq_bulletID(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_CatchedFishReq_bulletID(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishReq(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, TrUserData).

d_field_CatchedFishReq_catchedFishs(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CatchedFishReq_catchedFishs(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
d_field_CatchedFishReq_catchedFishs(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, Prev,
				    TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishReq(RestF, 0, 0, F@_1,
				      F@_2, F@_3,
				      cons(NewFValue, Prev, TrUserData),
				      TrUserData).

d_pfield_CatchedFishReq_catchedFishs(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_pfield_CatchedFishReq_catchedFishs(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_pfield_CatchedFishReq_catchedFishs(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_CatchedFishReq_catchedFishs(PackedBytes,
						   0, 0, E),
    dfp_read_field_def_CatchedFishReq(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, NewSeq, TrUserData).

d_packed_field_CatchedFishReq_catchedFishs(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_CatchedFishReq_catchedFishs(Rest, N + 7,
					       X bsl N + Acc, AccSeq);
d_packed_field_CatchedFishReq_catchedFishs(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, AccSeq) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    d_packed_field_CatchedFishReq_catchedFishs(RestF, 0, 0,
					       [NewFValue | AccSeq]);
d_packed_field_CatchedFishReq_catchedFishs(<<>>, 0, 0,
					   AccSeq) ->
    AccSeq.

skip_varint_CatchedFishReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_CatchedFishReq(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
skip_varint_CatchedFishReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CatchedFishReq(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_CatchedFishReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_CatchedFishReq(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
skip_length_delimited_CatchedFishReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CatchedFishReq(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_group_CatchedFishReq(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CatchedFishReq(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_32_CatchedFishReq(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CatchedFishReq(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_64_CatchedFishReq(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CatchedFishReq(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

d_msg_NotifyEnterGameRes(Bin, TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Bin, 0, 0,
					  id(<<>>, TrUserData),
					  id(<<>>, TrUserData),
					  id(<<>>, TrUserData),
					  id(<<>>, TrUserData),
					  id(0.0, TrUserData),
					  id(0.0, TrUserData),
					  id(0, TrUserData), id(0, TrUserData),
					  id(0, TrUserData), id(0, TrUserData),
					  id(0, TrUserData), TrUserData).

dfp_read_field_def_NotifyEnterGameRes(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_uid(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_name(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_headUrl(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_ip(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<45,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_money(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<53,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_bangMoney(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<56,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_launcherType(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_rateIndex(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<72,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_energy(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<80,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_seat(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<88,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    d_field_NotifyEnterGameRes_roomCard(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_NotifyEnterGameRes(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, _) ->
    #'NotifyEnterGameRes'{uid = F@_1, name = F@_2,
			  headUrl = F@_3, ip = F@_4, money = F@_5,
			  bangMoney = F@_6, launcherType = F@_7,
			  rateIndex = F@_8, energy = F@_9, seat = F@_10,
			  roomCard = F@_11};
dfp_read_field_def_NotifyEnterGameRes(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dg_read_field_def_NotifyEnterGameRes(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

dg_read_field_def_NotifyEnterGameRes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotifyEnterGameRes(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 F@_11, TrUserData);
dg_read_field_def_NotifyEnterGameRes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NotifyEnterGameRes_uid(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, TrUserData);
      18 ->
	  d_field_NotifyEnterGameRes_name(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, TrUserData);
      26 ->
	  d_field_NotifyEnterGameRes_headUrl(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
      34 ->
	  d_field_NotifyEnterGameRes_ip(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, TrUserData);
      45 ->
	  d_field_NotifyEnterGameRes_money(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, TrUserData);
      53 ->
	  d_field_NotifyEnterGameRes_bangMoney(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
      56 ->
	  d_field_NotifyEnterGameRes_launcherType(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
      64 ->
	  d_field_NotifyEnterGameRes_rateIndex(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
      72 ->
	  d_field_NotifyEnterGameRes_energy(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11,
					    TrUserData);
      80 ->
	  d_field_NotifyEnterGameRes_seat(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, TrUserData);
      88 ->
	  d_field_NotifyEnterGameRes_roomCard(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotifyEnterGameRes(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
	    1 ->
		skip_64_NotifyEnterGameRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, F@_11, TrUserData);
	    2 ->
		skip_length_delimited_NotifyEnterGameRes(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 F@_9, F@_10, F@_11,
							 TrUserData);
	    3 ->
		skip_group_NotifyEnterGameRes(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
	    5 ->
		skip_32_NotifyEnterGameRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, F@_11, TrUserData)
	  end
    end;
dg_read_field_def_NotifyEnterGameRes(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, _) ->
    #'NotifyEnterGameRes'{uid = F@_1, name = F@_2,
			  headUrl = F@_3, ip = F@_4, money = F@_5,
			  bangMoney = F@_6, launcherType = F@_7,
			  rateIndex = F@_8, energy = F@_9, seat = F@_10,
			  roomCard = F@_11}.

d_field_NotifyEnterGameRes_uid(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_uid(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData);
d_field_NotifyEnterGameRes_uid(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData);
d_field_NotifyEnterGameRes_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_headUrl(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_headUrl(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, TrUserData);
d_field_NotifyEnterGameRes_headUrl(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_ip(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_ip(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				  TrUserData);
d_field_NotifyEnterGameRes_ip(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_money(<<0:16, 128, 127,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				 F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, infinity,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData);
d_field_NotifyEnterGameRes_money(<<0:16, 128, 255,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				 F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, '-infinity',
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData);
d_field_NotifyEnterGameRes_money(<<_:16, 1:1, _:7, _:1,
				   127:7, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				 F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, nan, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData);
d_field_NotifyEnterGameRes_money(<<Value:32/little-float,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				 F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, Value, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_bangMoney(<<0:16, 128, 127,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  infinity, F@_7, F@_8, F@_9, F@_10,
					  F@_11, TrUserData);
d_field_NotifyEnterGameRes_bangMoney(<<0:16, 128, 255,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  '-infinity', F@_7, F@_8, F@_9, F@_10,
					  F@_11, TrUserData);
d_field_NotifyEnterGameRes_bangMoney(<<_:16, 1:1, _:7,
				       _:1, 127:7, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, nan,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData);
d_field_NotifyEnterGameRes_bangMoney(<<Value:32/little-float,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, Value,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_launcherType(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_launcherType(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, TrUserData);
d_field_NotifyEnterGameRes_launcherType(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, _, F@_8, F@_9, F@_10, F@_11,
					TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  NewFValue, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_rateIndex(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_rateIndex(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					 F@_11, TrUserData);
d_field_NotifyEnterGameRes_rateIndex(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  NewFValue, F@_9, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_energy(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_energy(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, TrUserData);
d_field_NotifyEnterGameRes_energy(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, NewFValue, F@_10, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_seat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_seat(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData);
d_field_NotifyEnterGameRes_seat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, NewFValue, F@_11,
					  TrUserData).

d_field_NotifyEnterGameRes_roomCard(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_NotifyEnterGameRes_roomCard(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
d_field_NotifyEnterGameRes_roomCard(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyEnterGameRes(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, F@_10, NewFValue,
					  TrUserData).

skip_varint_NotifyEnterGameRes(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    skip_varint_NotifyEnterGameRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, TrUserData);
skip_varint_NotifyEnterGameRes(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

skip_length_delimited_NotifyEnterGameRes(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_NotifyEnterGameRes(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, TrUserData);
skip_length_delimited_NotifyEnterGameRes(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotifyEnterGameRes(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_group_NotifyEnterGameRes(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotifyEnterGameRes(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_32_NotifyEnterGameRes(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

skip_64_NotifyEnterGameRes(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_NotifyEnterGameRes(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData).

d_msg_ChangeClientRateRes(Bin, TrUserData) ->
    dfp_read_field_def_ChangeClientRateRes(Bin, 0, 0,
					   id(0, TrUserData), id(0, TrUserData),
					   id(0, TrUserData), TrUserData).

dfp_read_field_def_ChangeClientRateRes(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ChangeClientRateRes_seatID(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_ChangeClientRateRes(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ChangeClientRateRes_isCanUseRate(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ChangeClientRateRes(<<24,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ChangeClientRateRes_rateIndex(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ChangeClientRateRes(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, _) ->
    #'ChangeClientRateRes'{seatID = F@_1,
			   isCanUseRate = F@_2, rateIndex = F@_3};
dfp_read_field_def_ChangeClientRateRes(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_ChangeClientRateRes(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_ChangeClientRateRes(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ChangeClientRateRes(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
dg_read_field_def_ChangeClientRateRes(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ChangeClientRateRes_seatID(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      16 ->
	  d_field_ChangeClientRateRes_isCanUseRate(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      24 ->
	  d_field_ChangeClientRateRes_rateIndex(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ChangeClientRateRes(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    1 ->
		skip_64_ChangeClientRateRes(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    2 ->
		skip_length_delimited_ChangeClientRateRes(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    3 ->
		skip_group_ChangeClientRateRes(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_ChangeClientRateRes(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData)
	  end
    end;
dg_read_field_def_ChangeClientRateRes(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #'ChangeClientRateRes'{seatID = F@_1,
			   isCanUseRate = F@_2, rateIndex = F@_3}.

d_field_ChangeClientRateRes_seatID(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ChangeClientRateRes_seatID(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_ChangeClientRateRes_seatID(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeClientRateRes(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, TrUserData).

d_field_ChangeClientRateRes_isCanUseRate(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ChangeClientRateRes_isCanUseRate(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
d_field_ChangeClientRateRes_isCanUseRate(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeClientRateRes(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, TrUserData).

d_field_ChangeClientRateRes_rateIndex(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ChangeClientRateRes_rateIndex(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_ChangeClientRateRes_rateIndex(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeClientRateRes(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, TrUserData).

skip_varint_ChangeClientRateRes(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ChangeClientRateRes(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
skip_varint_ChangeClientRateRes(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ChangeClientRateRes(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_ChangeClientRateRes(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ChangeClientRateRes(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
skip_length_delimited_ChangeClientRateRes(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChangeClientRateRes(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, TrUserData).

skip_group_ChangeClientRateRes(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ChangeClientRateRes(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_32_ChangeClientRateRes(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ChangeClientRateRes(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_64_ChangeClientRateRes(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ChangeClientRateRes(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

d_msg_ChangeClientRateTypeReq(Bin, TrUserData) ->
    dfp_read_field_def_ChangeClientRateTypeReq(Bin, 0, 0,
					       id(0, TrUserData),
					       id(0, TrUserData), TrUserData).

dfp_read_field_def_ChangeClientRateTypeReq(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ChangeClientRateTypeReq_seatID(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_ChangeClientRateTypeReq(<<16,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ChangeClientRateTypeReq_rateIndex(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_ChangeClientRateTypeReq(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #'ChangeClientRateTypeReq'{seatID = F@_1,
			       rateIndex = F@_2};
dfp_read_field_def_ChangeClientRateTypeReq(Other, Z1,
					   Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_ChangeClientRateTypeReq(Other, Z1, Z2,
					      F@_1, F@_2, TrUserData).

dg_read_field_def_ChangeClientRateTypeReq(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ChangeClientRateTypeReq(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
dg_read_field_def_ChangeClientRateTypeReq(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ChangeClientRateTypeReq_seatID(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      16 ->
	  d_field_ChangeClientRateTypeReq_rateIndex(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ChangeClientRateTypeReq(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    1 ->
		skip_64_ChangeClientRateTypeReq(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    2 ->
		skip_length_delimited_ChangeClientRateTypeReq(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData);
	    3 ->
		skip_group_ChangeClientRateTypeReq(Rest, Key bsr 3, 0,
						   F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_ChangeClientRateTypeReq(Rest, 0, 0, F@_1, F@_2,
						TrUserData)
	  end
    end;
dg_read_field_def_ChangeClientRateTypeReq(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    #'ChangeClientRateTypeReq'{seatID = F@_1,
			       rateIndex = F@_2}.

d_field_ChangeClientRateTypeReq_seatID(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ChangeClientRateTypeReq_seatID(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_ChangeClientRateTypeReq_seatID(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeClientRateTypeReq(RestF, 0, 0,
					       NewFValue, F@_2, TrUserData).

d_field_ChangeClientRateTypeReq_rateIndex(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ChangeClientRateTypeReq_rateIndex(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_ChangeClientRateTypeReq_rateIndex(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeClientRateTypeReq(RestF, 0, 0,
					       F@_1, NewFValue, TrUserData).

skip_varint_ChangeClientRateTypeReq(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ChangeClientRateTypeReq(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
skip_varint_ChangeClientRateTypeReq(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeClientRateTypeReq(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData).

skip_length_delimited_ChangeClientRateTypeReq(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ChangeClientRateTypeReq(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
skip_length_delimited_ChangeClientRateTypeReq(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChangeClientRateTypeReq(Rest2, 0, 0,
					       F@_1, F@_2, TrUserData).

skip_group_ChangeClientRateTypeReq(Bin, FNum, Z2, F@_1,
				   F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ChangeClientRateTypeReq(Rest, 0, Z2,
					       F@_1, F@_2, TrUserData).

skip_32_ChangeClientRateTypeReq(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeClientRateTypeReq(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData).

skip_64_ChangeClientRateTypeReq(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeClientRateTypeReq(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData).

d_msg_AddFishes(Bin, TrUserData) ->
    dfp_read_field_def_AddFishes(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 id(0, TrUserData), TrUserData).

dfp_read_field_def_AddFishes(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AddFishes_groupID(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_AddFishes(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AddFishes_pathID(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_AddFishes(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_AddFishes_startID(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_AddFishes(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'AddFishes'{groupID = F@_1, pathID = F@_2,
		 startID = F@_3};
dfp_read_field_def_AddFishes(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_AddFishes(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_AddFishes(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddFishes(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_AddFishes(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AddFishes_groupID(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      16 ->
	  d_field_AddFishes_pathID(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      24 ->
	  d_field_AddFishes_startID(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddFishes(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_AddFishes(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_AddFishes(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_AddFishes(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_AddFishes(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_AddFishes(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'AddFishes'{groupID = F@_1, pathID = F@_2,
		 startID = F@_3}.

d_field_AddFishes_groupID(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AddFishes_groupID(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_AddFishes_groupID(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_AddFishes(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_AddFishes_pathID(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AddFishes_pathID(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_AddFishes_pathID(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_AddFishes(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_AddFishes_startID(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_AddFishes_startID(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_AddFishes_startID(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_AddFishes(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_AddFishes(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_AddFishes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_AddFishes(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AddFishes(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_AddFishes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddFishes(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_AddFishes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddFishes(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_AddFishes(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddFishes(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_AddFishes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AddFishes(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_AddFishes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_AddFishes(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

d_msg_ChangeLauncherReq(Bin, TrUserData) ->
    dfp_read_field_def_ChangeLauncherReq(Bin, 0, 0,
					 id(0, TrUserData), id(0, TrUserData),
					 TrUserData).

dfp_read_field_def_ChangeLauncherReq(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ChangeLauncherReq_seatID(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_ChangeLauncherReq(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ChangeLauncherReq_launcherType(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_ChangeLauncherReq(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'ChangeLauncherReq'{seatID = F@_1,
			 launcherType = F@_2};
dfp_read_field_def_ChangeLauncherReq(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_ChangeLauncherReq(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_ChangeLauncherReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ChangeLauncherReq(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_ChangeLauncherReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ChangeLauncherReq_seatID(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_ChangeLauncherReq_launcherType(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ChangeLauncherReq(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_ChangeLauncherReq(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_ChangeLauncherReq(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_ChangeLauncherReq(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_ChangeLauncherReq(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_ChangeLauncherReq(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'ChangeLauncherReq'{seatID = F@_1,
			 launcherType = F@_2}.

d_field_ChangeLauncherReq_seatID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ChangeLauncherReq_seatID(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ChangeLauncherReq_seatID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeLauncherReq(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_ChangeLauncherReq_launcherType(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ChangeLauncherReq_launcherType(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_ChangeLauncherReq_launcherType(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeLauncherReq(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_ChangeLauncherReq(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ChangeLauncherReq(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_ChangeLauncherReq(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeLauncherReq(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_ChangeLauncherReq(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ChangeLauncherReq(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_ChangeLauncherReq(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChangeLauncherReq(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_ChangeLauncherReq(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ChangeLauncherReq(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_ChangeLauncherReq(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeLauncherReq(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_ChangeLauncherReq(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeLauncherReq(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

d_msg_GameRecordReq(Bin, TrUserData) ->
    dfp_read_field_def_GameRecordReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_GameRecordReq(<<>>, 0, 0, _) ->
    #'GameRecordReq'{};
dfp_read_field_def_GameRecordReq(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_GameRecordReq(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_GameRecordReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GameRecordReq(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_GameRecordReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_GameRecordReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_GameRecordReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_GameRecordReq(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_GameRecordReq(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_GameRecordReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_GameRecordReq(<<>>, 0, 0, _) ->
    #'GameRecordReq'{}.

skip_varint_GameRecordReq(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_GameRecordReq(Rest, Z1, Z2, TrUserData);
skip_varint_GameRecordReq(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_GameRecordReq(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_GameRecordReq(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_GameRecordReq(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_GameRecordReq(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameRecordReq(Rest2, 0, 0,
				     TrUserData).

skip_group_GameRecordReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GameRecordReq(Rest, 0, Z2,
				     TrUserData).

skip_32_GameRecordReq(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_GameRecordReq(Rest, Z1, Z2,
				     TrUserData).

skip_64_GameRecordReq(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_GameRecordReq(Rest, Z1, Z2,
				     TrUserData).

d_msg_BindRobotSuccessRes(Bin, TrUserData) ->
    dfp_read_field_def_BindRobotSuccessRes(Bin, 0, 0,
					   id(0, TrUserData),
					   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_BindRobotSuccessRes(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_BindRobotSuccessRes_position(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_BindRobotSuccessRes(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_BindRobotSuccessRes_userId(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_BindRobotSuccessRes(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'BindRobotSuccessRes'{position = F@_1, userId = F@_2};
dfp_read_field_def_BindRobotSuccessRes(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_BindRobotSuccessRes(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_BindRobotSuccessRes(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_BindRobotSuccessRes(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_BindRobotSuccessRes(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_BindRobotSuccessRes_position(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      18 ->
	  d_field_BindRobotSuccessRes_userId(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_BindRobotSuccessRes(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_BindRobotSuccessRes(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_BindRobotSuccessRes(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_BindRobotSuccessRes(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_BindRobotSuccessRes(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_BindRobotSuccessRes(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #'BindRobotSuccessRes'{position = F@_1, userId = F@_2}.

d_field_BindRobotSuccessRes_position(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BindRobotSuccessRes_position(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_BindRobotSuccessRes_position(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_BindRobotSuccessRes(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

d_field_BindRobotSuccessRes_userId(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_BindRobotSuccessRes_userId(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_BindRobotSuccessRes_userId(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_BindRobotSuccessRes(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

skip_varint_BindRobotSuccessRes(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_BindRobotSuccessRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_BindRobotSuccessRes(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BindRobotSuccessRes(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_BindRobotSuccessRes(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_BindRobotSuccessRes(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_BindRobotSuccessRes(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BindRobotSuccessRes(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_BindRobotSuccessRes(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BindRobotSuccessRes(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_BindRobotSuccessRes(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BindRobotSuccessRes(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_BindRobotSuccessRes(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_BindRobotSuccessRes(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

d_msg_ChangeLauncherRes(Bin, TrUserData) ->
    dfp_read_field_def_ChangeLauncherRes(Bin, 0, 0,
					 id(0, TrUserData), id(0, TrUserData),
					 TrUserData).

dfp_read_field_def_ChangeLauncherRes(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ChangeLauncherRes_seatID(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_ChangeLauncherRes(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ChangeLauncherRes_launcherType(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_ChangeLauncherRes(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'ChangeLauncherRes'{seatID = F@_1,
			 launcherType = F@_2};
dfp_read_field_def_ChangeLauncherRes(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_ChangeLauncherRes(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_ChangeLauncherRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ChangeLauncherRes(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_ChangeLauncherRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ChangeLauncherRes_seatID(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_ChangeLauncherRes_launcherType(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ChangeLauncherRes(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_ChangeLauncherRes(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_ChangeLauncherRes(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_ChangeLauncherRes(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_ChangeLauncherRes(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_ChangeLauncherRes(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'ChangeLauncherRes'{seatID = F@_1,
			 launcherType = F@_2}.

d_field_ChangeLauncherRes_seatID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ChangeLauncherRes_seatID(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ChangeLauncherRes_seatID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeLauncherRes(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_ChangeLauncherRes_launcherType(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ChangeLauncherRes_launcherType(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_ChangeLauncherRes_launcherType(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ChangeLauncherRes(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_ChangeLauncherRes(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ChangeLauncherRes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_ChangeLauncherRes(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeLauncherRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_ChangeLauncherRes(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ChangeLauncherRes(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_ChangeLauncherRes(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChangeLauncherRes(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_ChangeLauncherRes(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ChangeLauncherRes(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_ChangeLauncherRes(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeLauncherRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_ChangeLauncherRes(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ChangeLauncherRes(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

d_msg_RoomInfoRes(Bin, TrUserData) ->
    dfp_read_field_def_RoomInfoRes(Bin, 0, 0,
				   id(0, TrUserData), id(0, TrUserData),
				   id(<<>>, TrUserData), id(0, TrUserData),
				   TrUserData).

dfp_read_field_def_RoomInfoRes(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RoomInfoRes_enterKindId(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_RoomInfoRes(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RoomInfoRes_gameType(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_RoomInfoRes(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RoomInfoRes_enterKindServerId(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_RoomInfoRes(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_RoomInfoRes_enterKindPost(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_RoomInfoRes(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, _) ->
    #'RoomInfoRes'{enterKindId = F@_1, gameType = F@_2,
		   enterKindServerId = F@_3, enterKindPost = F@_4};
dfp_read_field_def_RoomInfoRes(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_RoomInfoRes(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

dg_read_field_def_RoomInfoRes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RoomInfoRes(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
dg_read_field_def_RoomInfoRes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RoomInfoRes_enterKindId(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      16 ->
	  d_field_RoomInfoRes_gameType(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      26 ->
	  d_field_RoomInfoRes_enterKindServerId(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_RoomInfoRes_enterKindPost(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RoomInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    1 ->
		skip_64_RoomInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    2 ->
		skip_length_delimited_RoomInfoRes(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_RoomInfoRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_RoomInfoRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData)
	  end
    end;
dg_read_field_def_RoomInfoRes(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #'RoomInfoRes'{enterKindId = F@_1, gameType = F@_2,
		   enterKindServerId = F@_3, enterKindPost = F@_4}.

d_field_RoomInfoRes_enterKindId(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RoomInfoRes_enterKindId(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_RoomInfoRes_enterKindId(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_RoomInfoRes(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, TrUserData).

d_field_RoomInfoRes_gameType(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RoomInfoRes_gameType(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_RoomInfoRes_gameType(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_RoomInfoRes(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, TrUserData).

d_field_RoomInfoRes_enterKindServerId(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_RoomInfoRes_enterKindServerId(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_RoomInfoRes_enterKindServerId(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_RoomInfoRes(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, TrUserData).

d_field_RoomInfoRes_enterKindPost(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_RoomInfoRes_enterKindPost(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_RoomInfoRes_enterKindPost(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_RoomInfoRes(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, TrUserData).

skip_varint_RoomInfoRes(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_RoomInfoRes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
skip_varint_RoomInfoRes(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RoomInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_length_delimited_RoomInfoRes(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_RoomInfoRes(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
skip_length_delimited_RoomInfoRes(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RoomInfoRes(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_group_RoomInfoRes(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RoomInfoRes(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_32_RoomInfoRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RoomInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_64_RoomInfoRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_RoomInfoRes(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

d_msg_CatchedFishRes(Bin, TrUserData) ->
    dfp_read_field_def_CatchedFishRes(Bin, 0, 0,
				      id(0, TrUserData), id(0, TrUserData),
				      id(0, TrUserData), id(0.0, TrUserData),
				      id(0, TrUserData), id([], TrUserData),
				      TrUserData).

dfp_read_field_def_CatchedFishRes(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_CatchedFishRes_bulletID(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_CatchedFishRes(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_CatchedFishRes_gold(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_CatchedFishRes(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_CatchedFishRes_isRemoveBullet(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
dfp_read_field_def_CatchedFishRes(<<37, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_CatchedFishRes_totalNum(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_CatchedFishRes(<<40, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_CatchedFishRes_seatID(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_CatchedFishRes(<<50, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_CatchedFishRes_catchedFishes(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6,
					 TrUserData);
dfp_read_field_def_CatchedFishRes(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, R1, TrUserData) ->
    #'CatchedFishRes'{bulletID = F@_1, gold = F@_2,
		      isRemoveBullet = F@_3, totalNum = F@_4, seatID = F@_5,
		      catchedFishes = lists_reverse(R1, TrUserData)};
dfp_read_field_def_CatchedFishRes(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_CatchedFishRes(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_CatchedFishRes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CatchedFishRes(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
dg_read_field_def_CatchedFishRes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CatchedFishRes_bulletID(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      16 ->
	  d_field_CatchedFishRes_gold(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_CatchedFishRes_isRemoveBullet(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						TrUserData);
      37 ->
	  d_field_CatchedFishRes_totalNum(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      40 ->
	  d_field_CatchedFishRes_seatID(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, TrUserData);
      50 ->
	  d_field_CatchedFishRes_catchedFishes(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CatchedFishRes(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_CatchedFishRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_CatchedFishRes(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
	    3 ->
		skip_group_CatchedFishRes(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
	    5 ->
		skip_32_CatchedFishRes(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_CatchedFishRes(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, R1, TrUserData) ->
    #'CatchedFishRes'{bulletID = F@_1, gold = F@_2,
		      isRemoveBullet = F@_3, totalNum = F@_4, seatID = F@_5,
		      catchedFishes = lists_reverse(R1, TrUserData)}.

d_field_CatchedFishRes_bulletID(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_CatchedFishRes_bulletID(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_CatchedFishRes_bulletID(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishRes(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_CatchedFishRes_gold(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData)
    when N < 57 ->
    d_field_CatchedFishRes_gold(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_CatchedFishRes_gold(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishRes(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_CatchedFishRes_isRemoveBullet(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    d_field_CatchedFishRes_isRemoveBullet(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
d_field_CatchedFishRes_isRemoveBullet(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				      TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishRes(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_CatchedFishRes_totalNum(<<0:16, 128, 127,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				TrUserData) ->
    dfp_read_field_def_CatchedFishRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, infinity, F@_5, F@_6,
				      TrUserData);
d_field_CatchedFishRes_totalNum(<<0:16, 128, 255,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				TrUserData) ->
    dfp_read_field_def_CatchedFishRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, '-infinity', F@_5, F@_6,
				      TrUserData);
d_field_CatchedFishRes_totalNum(<<_:16, 1:1, _:7, _:1,
				  127:7, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				TrUserData) ->
    dfp_read_field_def_CatchedFishRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, nan, F@_5, F@_6, TrUserData);
d_field_CatchedFishRes_totalNum(<<Value:32/little-float,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				TrUserData) ->
    dfp_read_field_def_CatchedFishRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, Value, F@_5, F@_6,
				      TrUserData).

d_field_CatchedFishRes_seatID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    d_field_CatchedFishRes_seatID(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
d_field_CatchedFishRes_seatID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			      TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_CatchedFishRes(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, F@_6,
				      TrUserData).

d_field_CatchedFishRes_catchedFishes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    d_field_CatchedFishRes_catchedFishes(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
d_field_CatchedFishRes_catchedFishes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev,
				     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_CatchedFishes(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CatchedFishRes(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5,
				      cons(NewFValue, Prev, TrUserData),
				      TrUserData).

skip_varint_CatchedFishRes(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    skip_varint_CatchedFishRes(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_CatchedFishRes(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_CatchedFishRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_CatchedFishRes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_CatchedFishRes(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
skip_length_delimited_CatchedFishRes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CatchedFishRes(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_CatchedFishRes(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CatchedFishRes(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_CatchedFishRes(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_CatchedFishRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_CatchedFishRes(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_CatchedFishRes(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_msg_LeaveGameRes(Bin, TrUserData) ->
    dfp_read_field_def_LeaveGameRes(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_LeaveGameRes(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaveGameRes_code(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_LeaveGameRes(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_LeaveGameRes_msg(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_LeaveGameRes(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'LeaveGameRes'{code = F@_1, msg = F@_2};
dfp_read_field_def_LeaveGameRes(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_LeaveGameRes(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_LeaveGameRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LeaveGameRes(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_LeaveGameRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_LeaveGameRes_code(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_LeaveGameRes_msg(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LeaveGameRes(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_LeaveGameRes(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_LeaveGameRes(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_LeaveGameRes(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_LeaveGameRes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_LeaveGameRes(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #'LeaveGameRes'{code = F@_1, msg = F@_2}.

d_field_LeaveGameRes_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaveGameRes_code(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_LeaveGameRes_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_LeaveGameRes(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_LeaveGameRes_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LeaveGameRes_msg(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_LeaveGameRes_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LeaveGameRes(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_LeaveGameRes(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_LeaveGameRes(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_LeaveGameRes(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaveGameRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_LeaveGameRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LeaveGameRes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LeaveGameRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LeaveGameRes(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_LeaveGameRes(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LeaveGameRes(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_LeaveGameRes(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaveGameRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_LeaveGameRes(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LeaveGameRes(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_SyncFishData(Bin, TrUserData) ->
    dfp_read_field_def_SyncFishData(Bin, 0, 0,
				    id(0, TrUserData), id(0, TrUserData),
				    id(0.0, TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id(false, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    id(0, TrUserData), id(0, TrUserData),
				    TrUserData).

dfp_read_field_def_SyncFishData(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_fishID(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_SyncFishData(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_groupID(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_SyncFishData(<<29, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_fishTime(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14,
				  TrUserData);
dfp_read_field_def_SyncFishData(<<32, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_pathGroup(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14,
				   TrUserData);
dfp_read_field_def_SyncFishData(<<40, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_pathIdx(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_SyncFishData(<<48, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_isActiveEvent(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				       TrUserData);
dfp_read_field_def_SyncFishData(<<56, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_elapsedTime(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				     TrUserData);
dfp_read_field_def_SyncFishData(<<64, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_package(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_SyncFishData(<<72, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_specialType(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				     TrUserData);
dfp_read_field_def_SyncFishData(<<80, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_delayScaling(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				      TrUserData);
dfp_read_field_def_SyncFishData(<<88, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_delayDuration1(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
					F@_14, TrUserData);
dfp_read_field_def_SyncFishData(<<96, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    d_field_SyncFishData_delayDuration2(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
					F@_14, TrUserData);
dfp_read_field_def_SyncFishData(<<104, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				F@_14, TrUserData) ->
    d_field_SyncFishData_delayDuration3(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
					F@_14, TrUserData);
dfp_read_field_def_SyncFishData(<<112, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				F@_14, TrUserData) ->
    d_field_SyncFishData_delayCurrentTime(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					  F@_13, F@_14, TrUserData);
dfp_read_field_def_SyncFishData(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, _) ->
    #'SyncFishData'{fishID = F@_1, groupID = F@_2,
		    fishTime = F@_3, pathGroup = F@_4, pathIdx = F@_5,
		    isActiveEvent = F@_6, elapsedTime = F@_7,
		    package = F@_8, specialType = F@_9,
		    delayScaling = F@_10, delayDuration1 = F@_11,
		    delayDuration2 = F@_12, delayDuration3 = F@_13,
		    delayCurrentTime = F@_14};
dfp_read_field_def_SyncFishData(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData) ->
    dg_read_field_def_SyncFishData(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				   TrUserData).

dg_read_field_def_SyncFishData(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SyncFishData(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, TrUserData);
dg_read_field_def_SyncFishData(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SyncFishData_fishID(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, F@_14,
				      TrUserData);
      16 ->
	  d_field_SyncFishData_groupID(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, F@_14,
				       TrUserData);
      29 ->
	  d_field_SyncFishData_fishTime(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					TrUserData);
      32 ->
	  d_field_SyncFishData_pathGroup(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 F@_14, TrUserData);
      40 ->
	  d_field_SyncFishData_pathIdx(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, F@_14,
				       TrUserData);
      48 ->
	  d_field_SyncFishData_isActiveEvent(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11, F@_12,
					     F@_13, F@_14, TrUserData);
      56 ->
	  d_field_SyncFishData_elapsedTime(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12, F@_13,
					   F@_14, TrUserData);
      64 ->
	  d_field_SyncFishData_package(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, F@_14,
				       TrUserData);
      72 ->
	  d_field_SyncFishData_specialType(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12, F@_13,
					   F@_14, TrUserData);
      80 ->
	  d_field_SyncFishData_delayScaling(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11, F@_12,
					    F@_13, F@_14, TrUserData);
      88 ->
	  d_field_SyncFishData_delayDuration1(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      F@_12, F@_13, F@_14, TrUserData);
      96 ->
	  d_field_SyncFishData_delayDuration2(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      F@_12, F@_13, F@_14, TrUserData);
      104 ->
	  d_field_SyncFishData_delayDuration3(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      F@_12, F@_13, F@_14, TrUserData);
      112 ->
	  d_field_SyncFishData_delayCurrentTime(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						F@_12, F@_13, F@_14,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SyncFishData(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					 F@_10, F@_11, F@_12, F@_13, F@_14,
					 TrUserData);
	    1 ->
		skip_64_SyncFishData(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, TrUserData);
	    2 ->
		skip_length_delimited_SyncFishData(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   TrUserData);
	    3 ->
		skip_group_SyncFishData(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					TrUserData);
	    5 ->
		skip_32_SyncFishData(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, TrUserData)
	  end
    end;
dg_read_field_def_SyncFishData(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, _) ->
    #'SyncFishData'{fishID = F@_1, groupID = F@_2,
		    fishTime = F@_3, pathGroup = F@_4, pathIdx = F@_5,
		    isActiveEvent = F@_6, elapsedTime = F@_7,
		    package = F@_8, specialType = F@_9,
		    delayScaling = F@_10, delayDuration1 = F@_11,
		    delayDuration2 = F@_12, delayDuration3 = F@_13,
		    delayCurrentTime = F@_14}.

d_field_SyncFishData_fishID(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData)
    when N < 57 ->
    d_field_SyncFishData_fishID(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData);
d_field_SyncFishData_fishID(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_groupID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     TrUserData)
    when N < 57 ->
    d_field_SyncFishData_groupID(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				 TrUserData);
d_field_SyncFishData_groupID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				    F@_14, TrUserData).

d_field_SyncFishData_fishTime(<<0:16, 128, 127,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      TrUserData) ->
    dfp_read_field_def_SyncFishData(Rest, Z1, Z2, F@_1,
				    F@_2, infinity, F@_4, F@_5, F@_6, F@_7,
				    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				    F@_14, TrUserData);
d_field_SyncFishData_fishTime(<<0:16, 128, 255,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      TrUserData) ->
    dfp_read_field_def_SyncFishData(Rest, Z1, Z2, F@_1,
				    F@_2, '-infinity', F@_4, F@_5, F@_6, F@_7,
				    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				    F@_14, TrUserData);
d_field_SyncFishData_fishTime(<<_:16, 1:1, _:7, _:1,
				127:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      TrUserData) ->
    dfp_read_field_def_SyncFishData(Rest, Z1, Z2, F@_1,
				    F@_2, nan, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData);
d_field_SyncFishData_fishTime(<<Value:32/little-float,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      TrUserData) ->
    dfp_read_field_def_SyncFishData(Rest, Z1, Z2, F@_1,
				    F@_2, Value, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_pathGroup(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       TrUserData)
    when N < 57 ->
    d_field_SyncFishData_pathGroup(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, TrUserData);
d_field_SyncFishData_pathGroup(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_pathIdx(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     TrUserData)
    when N < 57 ->
    d_field_SyncFishData_pathIdx(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				 TrUserData);
d_field_SyncFishData_pathIdx(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_isActiveEvent(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, TrUserData)
    when N < 57 ->
    d_field_SyncFishData_isActiveEvent(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_SyncFishData_isActiveEvent(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_elapsedTime(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 F@_14, TrUserData)
    when N < 57 ->
    d_field_SyncFishData_elapsedTime(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, TrUserData);
d_field_SyncFishData_elapsedTime(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
				 F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				 TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_package(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     TrUserData)
    when N < 57 ->
    d_field_SyncFishData_package(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				 TrUserData);
d_field_SyncFishData_package(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_specialType(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 F@_14, TrUserData)
    when N < 57 ->
    d_field_SyncFishData_specialType(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, TrUserData);
d_field_SyncFishData_specialType(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13,
				 F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    NewFValue, F@_10, F@_11, F@_12, F@_13,
				    F@_14, TrUserData).

d_field_SyncFishData_delayScaling(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  F@_14, TrUserData)
    when N < 57 ->
    d_field_SyncFishData_delayScaling(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_SyncFishData_delayScaling(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13,
				  F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    NewFValue, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_delayDuration1(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_SyncFishData_delayDuration1(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_SyncFishData_delayDuration1(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13,
				    F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, NewFValue, F@_12, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_delayDuration2(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_SyncFishData_delayDuration2(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_SyncFishData_delayDuration2(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13,
				    F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, NewFValue, F@_13, F@_14,
				    TrUserData).

d_field_SyncFishData_delayDuration3(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_SyncFishData_delayDuration3(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_SyncFishData_delayDuration3(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _,
				    F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, NewFValue, F@_14,
				    TrUserData).

d_field_SyncFishData_delayCurrentTime(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_SyncFishData_delayCurrentTime(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					  F@_11, F@_12, F@_13, F@_14,
					  TrUserData);
d_field_SyncFishData_delayCurrentTime(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_SyncFishData(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, NewFValue,
				    TrUserData).

skip_varint_SyncFishData(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    skip_varint_SyncFishData(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, TrUserData);
skip_varint_SyncFishData(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_SyncFishData(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

skip_length_delimited_SyncFishData(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, TrUserData)
    when N < 57 ->
    skip_length_delimited_SyncFishData(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, F@_14, TrUserData);
skip_length_delimited_SyncFishData(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SyncFishData(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

skip_group_SyncFishData(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SyncFishData(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

skip_32_SyncFishData(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_SyncFishData(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

skip_64_SyncFishData(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_SyncFishData(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData).

d_msg_SyncFishes(Bin, TrUserData) ->
    dfp_read_field_def_SyncFishes(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_SyncFishes(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_SyncFishes_fishList(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_SyncFishes(<<>>, 0, 0, R1,
			      TrUserData) ->
    #'SyncFishes'{fishList = lists_reverse(R1, TrUserData)};
dfp_read_field_def_SyncFishes(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_SyncFishes(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_SyncFishes(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SyncFishes(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_SyncFishes(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SyncFishes_fishList(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SyncFishes(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_SyncFishes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_SyncFishes(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_SyncFishes(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_SyncFishes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_SyncFishes(<<>>, 0, 0, R1,
			     TrUserData) ->
    #'SyncFishes'{fishList = lists_reverse(R1, TrUserData)}.

d_field_SyncFishes_fishList(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_SyncFishes_fishList(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_SyncFishes_fishList(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_SyncFishData(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SyncFishes(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_SyncFishes(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_SyncFishes(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_SyncFishes(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_SyncFishes(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_SyncFishes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_SyncFishes(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_SyncFishes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SyncFishes(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_SyncFishes(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SyncFishes(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_SyncFishes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_SyncFishes(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_SyncFishes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_SyncFishes(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_NotifyState(Bin, TrUserData) ->
    dfp_read_field_def_NotifyState(Bin, 0, 0,
				   id(0, TrUserData), id(0, TrUserData),
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_NotifyState(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_NotifyState_seatID(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_NotifyState(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_NotifyState_money(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_NotifyState(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_NotifyState_bangMoney(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_NotifyState(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'NotifyState'{seatID = F@_1, money = F@_2,
		   bangMoney = F@_3};
dfp_read_field_def_NotifyState(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_NotifyState(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_NotifyState(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotifyState(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_NotifyState(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_NotifyState_seatID(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      16 ->
	  d_field_NotifyState_money(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      24 ->
	  d_field_NotifyState_bangMoney(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NotifyState(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_NotifyState(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_NotifyState(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_NotifyState(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_NotifyState(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_NotifyState(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #'NotifyState'{seatID = F@_1, money = F@_2,
		   bangMoney = F@_3}.

d_field_NotifyState_seatID(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_NotifyState_seatID(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_NotifyState_seatID(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyState(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, TrUserData).

d_field_NotifyState_money(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_NotifyState_money(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_NotifyState_money(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyState(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, TrUserData).

d_field_NotifyState_bangMoney(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_NotifyState_bangMoney(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_NotifyState_bangMoney(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_NotifyState(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, TrUserData).

skip_varint_NotifyState(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_NotifyState(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_NotifyState(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_NotifyState(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_NotifyState(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_NotifyState(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_NotifyState(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotifyState(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_NotifyState(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotifyState(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_NotifyState(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_NotifyState(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_NotifyState(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_NotifyState(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

d_msg_ItemData(Bin, TrUserData) ->
    dfp_read_field_def_ItemData(Bin, 0, 0,
				id(0, TrUserData), id(0, TrUserData),
				id(0, TrUserData), TrUserData).

dfp_read_field_def_ItemData(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ItemData_itemId(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_ItemData(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ItemData_count(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_ItemData(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ItemData_expried(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_ItemData(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'ItemData'{itemId = F@_1, count = F@_2,
		expried = F@_3};
dfp_read_field_def_ItemData(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_ItemData(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_ItemData(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ItemData(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_ItemData(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ItemData_itemId(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      16 ->
	  d_field_ItemData_count(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      24 ->
	  d_field_ItemData_expried(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ItemData(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_ItemData(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_ItemData(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_ItemData(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_ItemData(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_ItemData(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'ItemData'{itemId = F@_1, count = F@_2,
		expried = F@_3}.

d_field_ItemData_itemId(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ItemData_itemId(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_ItemData_itemId(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ItemData(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_ItemData_count(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ItemData_count(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_ItemData_count(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ItemData(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_ItemData_expried(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ItemData_expried(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_ItemData_expried(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_ItemData(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_ItemData(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ItemData(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_ItemData(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ItemData(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_ItemData(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ItemData(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_ItemData(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ItemData(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_ItemData(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ItemData(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_ItemData(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ItemData(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_ItemData(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ItemData(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_LoginRes(Bin, TrUserData) ->
    dfp_read_field_def_LoginRes(Bin, 0, 0,
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				id(0, TrUserData), id(0.0, TrUserData),
				id(0.0, TrUserData), id(<<>>, TrUserData),
				id(0, TrUserData), id(0, TrUserData),
				id(0, TrUserData), id(<<>>, TrUserData),
				id(0, TrUserData), id(<<>>, TrUserData),
				TrUserData).

dfp_read_field_def_LoginRes(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_headUrl(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_ip(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<40, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_money(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<53, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_bangMoney(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<61, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_bankMoney(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<66, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_bankPassword(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14,
				  TrUserData);
dfp_read_field_def_LoginRes(<<72, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_telephone_fare(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData);
dfp_read_field_def_LoginRes(<<80, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_serverTime(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<88, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_vipExp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<98, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_phoneNum(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<104, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_roomCard(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<114, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    d_field_LoginRes_token(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, TrUserData);
dfp_read_field_def_LoginRes(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, F@_14, _) ->
    #'LoginRes'{uid = F@_1, name = F@_2, headUrl = F@_3,
		ip = F@_4, money = F@_5, bangMoney = F@_6,
		bankMoney = F@_7, bankPassword = F@_8,
		telephone_fare = F@_9, serverTime = F@_10,
		vipExp = F@_11, phoneNum = F@_12, roomCard = F@_13,
		token = F@_14};
dfp_read_field_def_LoginRes(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dg_read_field_def_LoginRes(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, TrUserData).

dg_read_field_def_LoginRes(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginRes(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       TrUserData);
dg_read_field_def_LoginRes(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginRes_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, TrUserData);
      18 ->
	  d_field_LoginRes_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData);
      26 ->
	  d_field_LoginRes_headUrl(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, TrUserData);
      34 ->
	  d_field_LoginRes_ip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, TrUserData);
      40 ->
	  d_field_LoginRes_money(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, TrUserData);
      53 ->
	  d_field_LoginRes_bangMoney(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, TrUserData);
      61 ->
	  d_field_LoginRes_bankMoney(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, TrUserData);
      66 ->
	  d_field_LoginRes_bankPassword(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					TrUserData);
      72 ->
	  d_field_LoginRes_telephone_fare(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, F@_12, F@_13,
					  F@_14, TrUserData);
      80 ->
	  d_field_LoginRes_serverTime(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, F@_14,
				      TrUserData);
      88 ->
	  d_field_LoginRes_vipExp(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, TrUserData);
      98 ->
	  d_field_LoginRes_phoneNum(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, TrUserData);
      104 ->
	  d_field_LoginRes_roomCard(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, TrUserData);
      114 ->
	  d_field_LoginRes_token(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, TrUserData);
	    1 ->
		skip_64_LoginRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				 F@_12, F@_13, F@_14, TrUserData);
	    2 ->
		skip_length_delimited_LoginRes(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, F@_9, F@_10, F@_11, F@_12,
					       F@_13, F@_14, TrUserData);
	    3 ->
		skip_group_LoginRes(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    F@_10, F@_11, F@_12, F@_13, F@_14,
				    TrUserData);
	    5 ->
		skip_32_LoginRes(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				 F@_12, F@_13, F@_14, TrUserData)
	  end
    end;
dg_read_field_def_LoginRes(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, _) ->
    #'LoginRes'{uid = F@_1, name = F@_2, headUrl = F@_3,
		ip = F@_4, money = F@_5, bangMoney = F@_6,
		bankMoney = F@_7, bankPassword = F@_8,
		telephone_fare = F@_9, serverTime = F@_10,
		vipExp = F@_11, phoneNum = F@_12, roomCard = F@_13,
		token = F@_14}.

d_field_LoginRes_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_uid(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRes(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_name(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData).

d_field_LoginRes_headUrl(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_headUrl(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     TrUserData);
d_field_LoginRes_headUrl(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_ip(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_ip(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_money(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_money(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_money(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		       F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_bangMoney(<<0:16, 128, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, infinity, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_bangMoney(<<0:16, 128, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, '-infinity', F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_bangMoney(<<_:16, 1:1, _:7, _:1, 127:7,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, nan, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_bangMoney(<<Value:32/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, Value, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_bankMoney(<<0:16, 128, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, infinity, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_bankMoney(<<0:16, 128, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, '-infinity', F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_bankMoney(<<_:16, 1:1, _:7, _:1, 127:7,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, nan, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_bankMoney(<<Value:32/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			   TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, Value, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_bankPassword(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      TrUserData)
    when N < 57 ->
    d_field_LoginRes_bankPassword(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, TrUserData);
d_field_LoginRes_bankPassword(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_telephone_fare(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_telephone_fare(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, F@_14, TrUserData);
d_field_LoginRes_telephone_fare(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13,
				F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
				F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_serverTime(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData)
    when N < 57 ->
    d_field_LoginRes_serverTime(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				TrUserData);
d_field_LoginRes_serverTime(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14,
			    TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				NewFValue, F@_11, F@_12, F@_13, F@_14,
				TrUserData).

d_field_LoginRes_vipExp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_vipExp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    TrUserData);
d_field_LoginRes_vipExp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, _, F@_12, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				NewFValue, F@_12, F@_13, F@_14, TrUserData).

d_field_LoginRes_phoneNum(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_phoneNum(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      TrUserData);
d_field_LoginRes_phoneNum(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, _, F@_13, F@_14, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, NewFValue, F@_13, F@_14, TrUserData).

d_field_LoginRes_roomCard(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_roomCard(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      TrUserData);
d_field_LoginRes_roomCard(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, _, F@_14, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, NewFValue, F@_14, TrUserData).

d_field_LoginRes_token(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData)
    when N < 57 ->
    d_field_LoginRes_token(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData);
d_field_LoginRes_token(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_LoginRes(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, NewFValue, TrUserData).

skip_varint_LoginRes(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    skip_varint_LoginRes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, TrUserData);
skip_varint_LoginRes(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData).

skip_length_delimited_LoginRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginRes(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, TrUserData);
skip_length_delimited_LoginRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginRes(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData).

skip_group_LoginRes(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		    F@_13, F@_14, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginRes(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData).

skip_32_LoginRes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		 F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData).

skip_64_LoginRes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		 F@_11, F@_12, F@_13, F@_14, TrUserData) ->
    dfp_read_field_def_LoginRes(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, TrUserData).

d_msg_Heartbeat(Bin, TrUserData) ->
    dfp_read_field_def_Heartbeat(Bin, 0, 0, TrUserData).

dfp_read_field_def_Heartbeat(<<>>, 0, 0, _) ->
    #'Heartbeat'{};
dfp_read_field_def_Heartbeat(Other, Z1, Z2,
			     TrUserData) ->
    dg_read_field_def_Heartbeat(Other, Z1, Z2, TrUserData).

dg_read_field_def_Heartbeat(<<1:1, X:7, Rest/binary>>,
			    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Heartbeat(Rest, N + 7, X bsl N + Acc,
				TrUserData);
dg_read_field_def_Heartbeat(<<0:1, X:7, Rest/binary>>,
			    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_Heartbeat(Rest, 0, 0, TrUserData);
      1 -> skip_64_Heartbeat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_Heartbeat(Rest, 0, 0, TrUserData);
      3 ->
	  skip_group_Heartbeat(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_Heartbeat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_Heartbeat(<<>>, 0, 0, _) ->
    #'Heartbeat'{}.

skip_varint_Heartbeat(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    skip_varint_Heartbeat(Rest, Z1, Z2, TrUserData);
skip_varint_Heartbeat(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_Heartbeat(Rest, Z1, Z2, TrUserData).

skip_length_delimited_Heartbeat(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_Heartbeat(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
skip_length_delimited_Heartbeat(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Heartbeat(Rest2, 0, 0, TrUserData).

skip_group_Heartbeat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Heartbeat(Rest, 0, Z2, TrUserData).

skip_32_Heartbeat(<<_:32, Rest/binary>>, Z1, Z2,
		  TrUserData) ->
    dfp_read_field_def_Heartbeat(Rest, Z1, Z2, TrUserData).

skip_64_Heartbeat(<<_:64, Rest/binary>>, Z1, Z2,
		  TrUserData) ->
    dfp_read_field_def_Heartbeat(Rest, Z1, Z2, TrUserData).

d_msg_ClearSceneRes(Bin, TrUserData) ->
    dfp_read_field_def_ClearSceneRes(Bin, 0, 0,
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_ClearSceneRes(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_ClearSceneRes_clearType(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_ClearSceneRes(<<>>, 0, 0, F@_1, _) ->
    #'ClearSceneRes'{clearType = F@_1};
dfp_read_field_def_ClearSceneRes(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_ClearSceneRes(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_ClearSceneRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ClearSceneRes(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ClearSceneRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ClearSceneRes_clearType(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ClearSceneRes(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_ClearSceneRes(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ClearSceneRes(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_ClearSceneRes(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_ClearSceneRes(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ClearSceneRes(<<>>, 0, 0, F@_1, _) ->
    #'ClearSceneRes'{clearType = F@_1}.

d_field_ClearSceneRes_clearType(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClearSceneRes_clearType(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_ClearSceneRes_clearType(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_ClearSceneRes(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_ClearSceneRes(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_ClearSceneRes(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_ClearSceneRes(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ClearSceneRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_ClearSceneRes(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ClearSceneRes(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ClearSceneRes(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClearSceneRes(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_ClearSceneRes(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ClearSceneRes(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_ClearSceneRes(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_ClearSceneRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_ClearSceneRes(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_ClearSceneRes(Rest, Z1, Z2, F@_1,
				     TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'CatchedFishes'{} ->
	  merge_msg_CatchedFishes(Prev, New, TrUserData);
      #'UnbindRobotSuccessRes'{} ->
	  merge_msg_UnbindRobotSuccessRes(Prev, New, TrUserData);
      #'GameRecord'{} ->
	  merge_msg_GameRecord(Prev, New, TrUserData);
      #'IntoRoomReq'{} ->
	  merge_msg_IntoRoomReq(Prev, New, TrUserData);
      #'BulletItem'{} ->
	  merge_msg_BulletItem(Prev, New, TrUserData);
      #'FireRes'{} ->
	  merge_msg_FireRes(Prev, New, TrUserData);
      #'IntoRoomRes'{} ->
	  merge_msg_IntoRoomRes(Prev, New, TrUserData);
      #'CommonStatus'{} ->
	  merge_msg_CommonStatus(Prev, New, TrUserData);
      #'BindRobotReq'{} ->
	  merge_msg_BindRobotReq(Prev, New, TrUserData);
      #'UnbindRobotReq'{} ->
	  merge_msg_UnbindRobotReq(Prev, New, TrUserData);
      #'ChangeClientRateReq'{} ->
	  merge_msg_ChangeClientRateReq(Prev, New, TrUserData);
      #'RoomInfoReq'{} ->
	  merge_msg_RoomInfoReq(Prev, New, TrUserData);
      #'RoomOnlineInfo'{} ->
	  merge_msg_RoomOnlineInfo(Prev, New, TrUserData);
      #'RoomOnlineInfoRes'{} ->
	  merge_msg_RoomOnlineInfoRes(Prev, New, TrUserData);
      #'GameRecordRes'{} ->
	  merge_msg_GameRecordRes(Prev, New, TrUserData);
      #'LoginReq'{} ->
	  merge_msg_LoginReq(Prev, New, TrUserData);
      #'BroadcastMessage'{} ->
	  merge_msg_BroadcastMessage(Prev, New, TrUserData);
      #'BroadcastMessageList'{} ->
	  merge_msg_BroadcastMessageList(Prev, New, TrUserData);
      #'Msg'{} -> merge_msg_Msg(Prev, New, TrUserData);
      #'LeaveGameReq'{} ->
	  merge_msg_LeaveGameReq(Prev, New, TrUserData);
      #'FireReq'{} ->
	  merge_msg_FireReq(Prev, New, TrUserData);
      #'Msgs'{} -> merge_msg_Msgs(Prev, New, TrUserData);
      #'NotifyLeaveGameRes'{} ->
	  merge_msg_NotifyLeaveGameRes(Prev, New, TrUserData);
      #'CatchedFishReq'{} ->
	  merge_msg_CatchedFishReq(Prev, New, TrUserData);
      #'NotifyEnterGameRes'{} ->
	  merge_msg_NotifyEnterGameRes(Prev, New, TrUserData);
      #'ChangeClientRateRes'{} ->
	  merge_msg_ChangeClientRateRes(Prev, New, TrUserData);
      #'ChangeClientRateTypeReq'{} ->
	  merge_msg_ChangeClientRateTypeReq(Prev, New,
					    TrUserData);
      #'AddFishes'{} ->
	  merge_msg_AddFishes(Prev, New, TrUserData);
      #'ChangeLauncherReq'{} ->
	  merge_msg_ChangeLauncherReq(Prev, New, TrUserData);
      #'GameRecordReq'{} ->
	  merge_msg_GameRecordReq(Prev, New, TrUserData);
      #'BindRobotSuccessRes'{} ->
	  merge_msg_BindRobotSuccessRes(Prev, New, TrUserData);
      #'ChangeLauncherRes'{} ->
	  merge_msg_ChangeLauncherRes(Prev, New, TrUserData);
      #'RoomInfoRes'{} ->
	  merge_msg_RoomInfoRes(Prev, New, TrUserData);
      #'CatchedFishRes'{} ->
	  merge_msg_CatchedFishRes(Prev, New, TrUserData);
      #'LeaveGameRes'{} ->
	  merge_msg_LeaveGameRes(Prev, New, TrUserData);
      #'SyncFishData'{} ->
	  merge_msg_SyncFishData(Prev, New, TrUserData);
      #'SyncFishes'{} ->
	  merge_msg_SyncFishes(Prev, New, TrUserData);
      #'NotifyState'{} ->
	  merge_msg_NotifyState(Prev, New, TrUserData);
      #'ItemData'{} ->
	  merge_msg_ItemData(Prev, New, TrUserData);
      #'LoginRes'{} ->
	  merge_msg_LoginRes(Prev, New, TrUserData);
      #'Heartbeat'{} ->
	  merge_msg_Heartbeat(Prev, New, TrUserData);
      #'ClearSceneRes'{} ->
	  merge_msg_ClearSceneRes(Prev, New, TrUserData)
    end.

merge_msg_CatchedFishes(#'CatchedFishes'{catchEvent =
					     PFcatchEvent,
					 fishID = PFfishID,
					 rewardID = PFrewardID,
					 lightingFishID = PFlightingFishID},
			#'CatchedFishes'{catchEvent = NFcatchEvent,
					 fishID = NFfishID,
					 rewardID = NFrewardID,
					 lightingFishID = NFlightingFishID},
			_) ->
    #'CatchedFishes'{catchEvent =
			 if NFcatchEvent =:= undefined -> PFcatchEvent;
			    true -> NFcatchEvent
			 end,
		     fishID =
			 if NFfishID =:= undefined -> PFfishID;
			    true -> NFfishID
			 end,
		     rewardID =
			 if NFrewardID =:= undefined -> PFrewardID;
			    true -> NFrewardID
			 end,
		     lightingFishID =
			 if NFlightingFishID =:= undefined -> PFlightingFishID;
			    true -> NFlightingFishID
			 end}.

merge_msg_UnbindRobotSuccessRes(#'UnbindRobotSuccessRes'{position
							     = PFposition,
							 userId = PFuserId},
				#'UnbindRobotSuccessRes'{position = NFposition,
							 userId = NFuserId},
				_) ->
    #'UnbindRobotSuccessRes'{position =
				 if NFposition =:= undefined -> PFposition;
				    true -> NFposition
				 end,
			     userId =
				 if NFuserId =:= undefined -> PFuserId;
				    true -> NFuserId
				 end}.

merge_msg_GameRecord(#'GameRecord'{roundId = PFroundId,
				   roomType = PFroomType, allBet = PFallBet,
				   allWin = PFallWin, result = PFresult,
				   startTime = PFstartTime,
				   endTime = PFendTime},
		     #'GameRecord'{roundId = NFroundId,
				   roomType = NFroomType, allBet = NFallBet,
				   allWin = NFallWin, result = NFresult,
				   startTime = NFstartTime,
				   endTime = NFendTime},
		     _) ->
    #'GameRecord'{roundId =
		      if NFroundId =:= undefined -> PFroundId;
			 true -> NFroundId
		      end,
		  roomType =
		      if NFroomType =:= undefined -> PFroomType;
			 true -> NFroomType
		      end,
		  allBet =
		      if NFallBet =:= undefined -> PFallBet;
			 true -> NFallBet
		      end,
		  allWin =
		      if NFallWin =:= undefined -> PFallWin;
			 true -> NFallWin
		      end,
		  result =
		      if NFresult =:= undefined -> PFresult;
			 true -> NFresult
		      end,
		  startTime =
		      if NFstartTime =:= undefined -> PFstartTime;
			 true -> NFstartTime
		      end,
		  endTime =
		      if NFendTime =:= undefined -> PFendTime;
			 true -> NFendTime
		      end}.

merge_msg_IntoRoomReq(#'IntoRoomReq'{uid = PFuid,
				     roomId = PFroomId, type = PFtype},
		      #'IntoRoomReq'{uid = NFuid, roomId = NFroomId,
				     type = NFtype},
		      _) ->
    #'IntoRoomReq'{uid =
		       if NFuid =:= undefined -> PFuid;
			  true -> NFuid
		       end,
		   roomId =
		       if NFroomId =:= undefined -> PFroomId;
			  true -> NFroomId
		       end,
		   type =
		       if NFtype =:= undefined -> PFtype;
			  true -> NFtype
		       end}.

merge_msg_BulletItem(#'BulletItem'{bulletID =
				       PFbulletID,
				   degree = PFdegree},
		     #'BulletItem'{bulletID = NFbulletID, degree = NFdegree},
		     _) ->
    #'BulletItem'{bulletID =
		      if NFbulletID =:= undefined -> PFbulletID;
			 true -> NFbulletID
		      end,
		  degree =
		      if NFdegree =:= undefined -> PFdegree;
			 true -> NFdegree
		      end}.

merge_msg_FireRes(#'FireRes'{bulletItemList =
				 PFbulletItemList,
			     launcherType = PFlauncherType, energy = PFenergy,
			     reboundCount = PFreboundCount,
			     lockFishID = PFlockFishID, gold = PFgold,
			     targetX = PFtargetX, targetY = PFtargetY,
			     bulletID = PFbulletID, seatID = PFseatID},
		  #'FireRes'{bulletItemList = NFbulletItemList,
			     launcherType = NFlauncherType, energy = NFenergy,
			     reboundCount = NFreboundCount,
			     lockFishID = NFlockFishID, gold = NFgold,
			     targetX = NFtargetX, targetY = NFtargetY,
			     bulletID = NFbulletID, seatID = NFseatID},
		  TrUserData) ->
    #'FireRes'{bulletItemList =
		   if PFbulletItemList /= undefined,
		      NFbulletItemList /= undefined ->
			  'erlang_++'(PFbulletItemList, NFbulletItemList,
				      TrUserData);
		      PFbulletItemList == undefined -> NFbulletItemList;
		      NFbulletItemList == undefined -> PFbulletItemList
		   end,
	       launcherType =
		   if NFlauncherType =:= undefined -> PFlauncherType;
		      true -> NFlauncherType
		   end,
	       energy =
		   if NFenergy =:= undefined -> PFenergy;
		      true -> NFenergy
		   end,
	       reboundCount =
		   if NFreboundCount =:= undefined -> PFreboundCount;
		      true -> NFreboundCount
		   end,
	       lockFishID =
		   if NFlockFishID =:= undefined -> PFlockFishID;
		      true -> NFlockFishID
		   end,
	       gold =
		   if NFgold =:= undefined -> PFgold;
		      true -> NFgold
		   end,
	       targetX =
		   if NFtargetX =:= undefined -> PFtargetX;
		      true -> NFtargetX
		   end,
	       targetY =
		   if NFtargetY =:= undefined -> PFtargetY;
		      true -> NFtargetY
		   end,
	       bulletID =
		   if NFbulletID =:= undefined -> PFbulletID;
		      true -> NFbulletID
		   end,
	       seatID =
		   if NFseatID =:= undefined -> PFseatID;
		      true -> NFseatID
		   end}.

merge_msg_IntoRoomRes(#'IntoRoomRes'{bTableTypeID =
					 PFbTableTypeID,
				     backgroundImage = PFbackgroundImage,
				     launcherType = PFlauncherType,
				     seatID = PFseatID, rateIndex = PFrateIndex,
				     match = PFmatch, matchGold = PFmatchGold,
				     minRate = PFminRate, maxRate = PFmaxRate,
				     roomId = PFroomId, roomName = PFroomName,
				     endTime = PFendTime},
		      #'IntoRoomRes'{bTableTypeID = NFbTableTypeID,
				     backgroundImage = NFbackgroundImage,
				     launcherType = NFlauncherType,
				     seatID = NFseatID, rateIndex = NFrateIndex,
				     match = NFmatch, matchGold = NFmatchGold,
				     minRate = NFminRate, maxRate = NFmaxRate,
				     roomId = NFroomId, roomName = NFroomName,
				     endTime = NFendTime},
		      _) ->
    #'IntoRoomRes'{bTableTypeID =
		       if NFbTableTypeID =:= undefined -> PFbTableTypeID;
			  true -> NFbTableTypeID
		       end,
		   backgroundImage =
		       if NFbackgroundImage =:= undefined -> PFbackgroundImage;
			  true -> NFbackgroundImage
		       end,
		   launcherType =
		       if NFlauncherType =:= undefined -> PFlauncherType;
			  true -> NFlauncherType
		       end,
		   seatID =
		       if NFseatID =:= undefined -> PFseatID;
			  true -> NFseatID
		       end,
		   rateIndex =
		       if NFrateIndex =:= undefined -> PFrateIndex;
			  true -> NFrateIndex
		       end,
		   match =
		       if NFmatch =:= undefined -> PFmatch;
			  true -> NFmatch
		       end,
		   matchGold =
		       if NFmatchGold =:= undefined -> PFmatchGold;
			  true -> NFmatchGold
		       end,
		   minRate =
		       if NFminRate =:= undefined -> PFminRate;
			  true -> NFminRate
		       end,
		   maxRate =
		       if NFmaxRate =:= undefined -> PFmaxRate;
			  true -> NFmaxRate
		       end,
		   roomId =
		       if NFroomId =:= undefined -> PFroomId;
			  true -> NFroomId
		       end,
		   roomName =
		       if NFroomName =:= undefined -> PFroomName;
			  true -> NFroomName
		       end,
		   endTime =
		       if NFendTime =:= undefined -> PFendTime;
			  true -> NFendTime
		       end}.

merge_msg_CommonStatus(#'CommonStatus'{code = PFcode,
				       msg = PFmsg, type = PFtype},
		       #'CommonStatus'{code = NFcode, msg = NFmsg,
				       type = NFtype},
		       _) ->
    #'CommonStatus'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    msg =
			if NFmsg =:= undefined -> PFmsg;
			   true -> NFmsg
			end,
		    type =
			if NFtype =:= undefined -> PFtype;
			   true -> NFtype
			end}.

merge_msg_BindRobotReq(#'BindRobotReq'{position =
					   PFposition,
				       userId = PFuserId},
		       #'BindRobotReq'{position = NFposition,
				       userId = NFuserId},
		       _) ->
    #'BindRobotReq'{position =
			if NFposition =:= undefined -> PFposition;
			   true -> NFposition
			end,
		    userId =
			if NFuserId =:= undefined -> PFuserId;
			   true -> NFuserId
			end}.

merge_msg_UnbindRobotReq(#'UnbindRobotReq'{position =
					       PFposition,
					   userId = PFuserId},
			 #'UnbindRobotReq'{position = NFposition,
					   userId = NFuserId},
			 _) ->
    #'UnbindRobotReq'{position =
			  if NFposition =:= undefined -> PFposition;
			     true -> NFposition
			  end,
		      userId =
			  if NFuserId =:= undefined -> PFuserId;
			     true -> NFuserId
			  end}.

merge_msg_ChangeClientRateReq(#'ChangeClientRateReq'{opt
							 = PFopt},
			      #'ChangeClientRateReq'{opt = NFopt}, _) ->
    #'ChangeClientRateReq'{opt =
			       if NFopt =:= undefined -> PFopt;
				  true -> NFopt
			       end}.

merge_msg_RoomInfoReq(#'RoomInfoReq'{type = PFtype,
				     uid = PFuid},
		      #'RoomInfoReq'{type = NFtype, uid = NFuid}, _) ->
    #'RoomInfoReq'{type =
		       if NFtype =:= undefined -> PFtype;
			  true -> NFtype
		       end,
		   uid =
		       if NFuid =:= undefined -> PFuid;
			  true -> NFuid
		       end}.

merge_msg_RoomOnlineInfo(#'RoomOnlineInfo'{type =
					       PFtype,
					   playCount = PFplayCount},
			 #'RoomOnlineInfo'{type = NFtype,
					   playCount = NFplayCount},
			 _) ->
    #'RoomOnlineInfo'{type =
			  if NFtype =:= undefined -> PFtype;
			     true -> NFtype
			  end,
		      playCount =
			  if NFplayCount =:= undefined -> PFplayCount;
			     true -> NFplayCount
			  end}.

merge_msg_RoomOnlineInfoRes(#'RoomOnlineInfoRes'{roomOnlineInfo
						     = PFroomOnlineInfo},
			    #'RoomOnlineInfoRes'{roomOnlineInfo =
						     NFroomOnlineInfo},
			    TrUserData) ->
    #'RoomOnlineInfoRes'{roomOnlineInfo =
			     if PFroomOnlineInfo /= undefined,
				NFroomOnlineInfo /= undefined ->
				    'erlang_++'(PFroomOnlineInfo,
						NFroomOnlineInfo, TrUserData);
				PFroomOnlineInfo == undefined ->
				    NFroomOnlineInfo;
				NFroomOnlineInfo == undefined ->
				    PFroomOnlineInfo
			     end}.

merge_msg_GameRecordRes(#'GameRecordRes'{gameRecord =
					     PFgameRecord},
			#'GameRecordRes'{gameRecord = NFgameRecord},
			TrUserData) ->
    #'GameRecordRes'{gameRecord =
			 if PFgameRecord /= undefined,
			    NFgameRecord /= undefined ->
				'erlang_++'(PFgameRecord, NFgameRecord,
					    TrUserData);
			    PFgameRecord == undefined -> NFgameRecord;
			    NFgameRecord == undefined -> PFgameRecord
			 end}.

merge_msg_LoginReq(#'LoginReq'{identity = PFidentity},
		   #'LoginReq'{identity = NFidentity}, _) ->
    #'LoginReq'{identity =
		    if NFidentity =:= undefined -> PFidentity;
		       true -> NFidentity
		    end}.

merge_msg_BroadcastMessage(#'BroadcastMessage'{broadType
						   = PFbroadType,
					       msg = PFmsg, langId = PFlangId,
					       params = PFparams,
					       priority = PFpriority},
			   #'BroadcastMessage'{broadType = NFbroadType,
					       msg = NFmsg, langId = NFlangId,
					       params = NFparams,
					       priority = NFpriority},
			   TrUserData) ->
    #'BroadcastMessage'{broadType =
			    if NFbroadType =:= undefined -> PFbroadType;
			       true -> NFbroadType
			    end,
			msg =
			    if NFmsg =:= undefined -> PFmsg;
			       true -> NFmsg
			    end,
			langId =
			    if NFlangId =:= undefined -> PFlangId;
			       true -> NFlangId
			    end,
			params =
			    if PFparams /= undefined, NFparams /= undefined ->
				   'erlang_++'(PFparams, NFparams, TrUserData);
			       PFparams == undefined -> NFparams;
			       NFparams == undefined -> PFparams
			    end,
			priority =
			    if NFpriority =:= undefined -> PFpriority;
			       true -> NFpriority
			    end}.

merge_msg_BroadcastMessageList(#'BroadcastMessageList'{messageList
							   = PFmessageList},
			       #'BroadcastMessageList'{messageList =
							   NFmessageList},
			       TrUserData) ->
    #'BroadcastMessageList'{messageList =
				if PFmessageList /= undefined,
				   NFmessageList /= undefined ->
				       'erlang_++'(PFmessageList, NFmessageList,
						   TrUserData);
				   PFmessageList == undefined -> NFmessageList;
				   NFmessageList == undefined -> PFmessageList
				end}.

merge_msg_Msg(#'Msg'{action = PFaction,
		     msgBody = PFmsgBody, token = PFtoken},
	      #'Msg'{action = NFaction, msgBody = NFmsgBody,
		     token = NFtoken},
	      _) ->
    #'Msg'{action =
	       if NFaction =:= undefined -> PFaction;
		  true -> NFaction
	       end,
	   msgBody =
	       if NFmsgBody =:= undefined -> PFmsgBody;
		  true -> NFmsgBody
	       end,
	   token =
	       if NFtoken =:= undefined -> PFtoken;
		  true -> NFtoken
	       end}.

merge_msg_LeaveGameReq(#'LeaveGameReq'{type = PFtype},
		       #'LeaveGameReq'{type = NFtype}, _) ->
    #'LeaveGameReq'{type =
			if NFtype =:= undefined -> PFtype;
			   true -> NFtype
			end}.

merge_msg_FireReq(#'FireReq'{degree = PFdegree,
			     lockedFishID = PFlockedFishID,
			     bulletID = PFbulletID, targetX = PFtargetX,
			     targetY = PFtargetY},
		  #'FireReq'{degree = NFdegree,
			     lockedFishID = NFlockedFishID,
			     bulletID = NFbulletID, targetX = NFtargetX,
			     targetY = NFtargetY},
		  _) ->
    #'FireReq'{degree =
		   if NFdegree =:= undefined -> PFdegree;
		      true -> NFdegree
		   end,
	       lockedFishID =
		   if NFlockedFishID =:= undefined -> PFlockedFishID;
		      true -> NFlockedFishID
		   end,
	       bulletID =
		   if NFbulletID =:= undefined -> PFbulletID;
		      true -> NFbulletID
		   end,
	       targetX =
		   if NFtargetX =:= undefined -> PFtargetX;
		      true -> NFtargetX
		   end,
	       targetY =
		   if NFtargetY =:= undefined -> PFtargetY;
		      true -> NFtargetY
		   end}.

merge_msg_Msgs(#'Msgs'{msgList = PFmsgList},
	       #'Msgs'{msgList = NFmsgList}, TrUserData) ->
    #'Msgs'{msgList =
		if PFmsgList /= undefined, NFmsgList /= undefined ->
		       'erlang_++'(PFmsgList, NFmsgList, TrUserData);
		   PFmsgList == undefined -> NFmsgList;
		   NFmsgList == undefined -> PFmsgList
		end}.

merge_msg_NotifyLeaveGameRes(#'NotifyLeaveGameRes'{seatID
						       = PFseatID},
			     #'NotifyLeaveGameRes'{seatID = NFseatID}, _) ->
    #'NotifyLeaveGameRes'{seatID =
			      if NFseatID =:= undefined -> PFseatID;
				 true -> NFseatID
			      end}.

merge_msg_CatchedFishReq(#'CatchedFishReq'{userId =
					       PFuserId,
					   fishID = PFfishID,
					   bulletID = PFbulletID,
					   catchedFishs = PFcatchedFishs},
			 #'CatchedFishReq'{userId = NFuserId, fishID = NFfishID,
					   bulletID = NFbulletID,
					   catchedFishs = NFcatchedFishs},
			 TrUserData) ->
    #'CatchedFishReq'{userId =
			  if NFuserId =:= undefined -> PFuserId;
			     true -> NFuserId
			  end,
		      fishID =
			  if NFfishID =:= undefined -> PFfishID;
			     true -> NFfishID
			  end,
		      bulletID =
			  if NFbulletID =:= undefined -> PFbulletID;
			     true -> NFbulletID
			  end,
		      catchedFishs =
			  if PFcatchedFishs /= undefined,
			     NFcatchedFishs /= undefined ->
				 'erlang_++'(PFcatchedFishs, NFcatchedFishs,
					     TrUserData);
			     PFcatchedFishs == undefined -> NFcatchedFishs;
			     NFcatchedFishs == undefined -> PFcatchedFishs
			  end}.

merge_msg_NotifyEnterGameRes(#'NotifyEnterGameRes'{uid =
						       PFuid,
						   name = PFname,
						   headUrl = PFheadUrl,
						   ip = PFip, money = PFmoney,
						   bangMoney = PFbangMoney,
						   launcherType =
						       PFlauncherType,
						   rateIndex = PFrateIndex,
						   energy = PFenergy,
						   seat = PFseat,
						   roomCard = PFroomCard},
			     #'NotifyEnterGameRes'{uid = NFuid, name = NFname,
						   headUrl = NFheadUrl,
						   ip = NFip, money = NFmoney,
						   bangMoney = NFbangMoney,
						   launcherType =
						       NFlauncherType,
						   rateIndex = NFrateIndex,
						   energy = NFenergy,
						   seat = NFseat,
						   roomCard = NFroomCard},
			     _) ->
    #'NotifyEnterGameRes'{uid =
			      if NFuid =:= undefined -> PFuid;
				 true -> NFuid
			      end,
			  name =
			      if NFname =:= undefined -> PFname;
				 true -> NFname
			      end,
			  headUrl =
			      if NFheadUrl =:= undefined -> PFheadUrl;
				 true -> NFheadUrl
			      end,
			  ip =
			      if NFip =:= undefined -> PFip;
				 true -> NFip
			      end,
			  money =
			      if NFmoney =:= undefined -> PFmoney;
				 true -> NFmoney
			      end,
			  bangMoney =
			      if NFbangMoney =:= undefined -> PFbangMoney;
				 true -> NFbangMoney
			      end,
			  launcherType =
			      if NFlauncherType =:= undefined -> PFlauncherType;
				 true -> NFlauncherType
			      end,
			  rateIndex =
			      if NFrateIndex =:= undefined -> PFrateIndex;
				 true -> NFrateIndex
			      end,
			  energy =
			      if NFenergy =:= undefined -> PFenergy;
				 true -> NFenergy
			      end,
			  seat =
			      if NFseat =:= undefined -> PFseat;
				 true -> NFseat
			      end,
			  roomCard =
			      if NFroomCard =:= undefined -> PFroomCard;
				 true -> NFroomCard
			      end}.

merge_msg_ChangeClientRateRes(#'ChangeClientRateRes'{seatID
							 = PFseatID,
						     isCanUseRate =
							 PFisCanUseRate,
						     rateIndex = PFrateIndex},
			      #'ChangeClientRateRes'{seatID = NFseatID,
						     isCanUseRate =
							 NFisCanUseRate,
						     rateIndex = NFrateIndex},
			      _) ->
    #'ChangeClientRateRes'{seatID =
			       if NFseatID =:= undefined -> PFseatID;
				  true -> NFseatID
			       end,
			   isCanUseRate =
			       if NFisCanUseRate =:= undefined ->
				      PFisCanUseRate;
				  true -> NFisCanUseRate
			       end,
			   rateIndex =
			       if NFrateIndex =:= undefined -> PFrateIndex;
				  true -> NFrateIndex
			       end}.

merge_msg_ChangeClientRateTypeReq(#'ChangeClientRateTypeReq'{seatID
								 = PFseatID,
							     rateIndex =
								 PFrateIndex},
				  #'ChangeClientRateTypeReq'{seatID = NFseatID,
							     rateIndex =
								 NFrateIndex},
				  _) ->
    #'ChangeClientRateTypeReq'{seatID =
				   if NFseatID =:= undefined -> PFseatID;
				      true -> NFseatID
				   end,
			       rateIndex =
				   if NFrateIndex =:= undefined -> PFrateIndex;
				      true -> NFrateIndex
				   end}.

merge_msg_AddFishes(#'AddFishes'{groupID = PFgroupID,
				 pathID = PFpathID, startID = PFstartID},
		    #'AddFishes'{groupID = NFgroupID, pathID = NFpathID,
				 startID = NFstartID},
		    _) ->
    #'AddFishes'{groupID =
		     if NFgroupID =:= undefined -> PFgroupID;
			true -> NFgroupID
		     end,
		 pathID =
		     if NFpathID =:= undefined -> PFpathID;
			true -> NFpathID
		     end,
		 startID =
		     if NFstartID =:= undefined -> PFstartID;
			true -> NFstartID
		     end}.

merge_msg_ChangeLauncherReq(#'ChangeLauncherReq'{seatID
						     = PFseatID,
						 launcherType = PFlauncherType},
			    #'ChangeLauncherReq'{seatID = NFseatID,
						 launcherType = NFlauncherType},
			    _) ->
    #'ChangeLauncherReq'{seatID =
			     if NFseatID =:= undefined -> PFseatID;
				true -> NFseatID
			     end,
			 launcherType =
			     if NFlauncherType =:= undefined -> PFlauncherType;
				true -> NFlauncherType
			     end}.

merge_msg_GameRecordReq(_Prev, New, _TrUserData) -> New.

merge_msg_BindRobotSuccessRes(#'BindRobotSuccessRes'{position
							 = PFposition,
						     userId = PFuserId},
			      #'BindRobotSuccessRes'{position = NFposition,
						     userId = NFuserId},
			      _) ->
    #'BindRobotSuccessRes'{position =
			       if NFposition =:= undefined -> PFposition;
				  true -> NFposition
			       end,
			   userId =
			       if NFuserId =:= undefined -> PFuserId;
				  true -> NFuserId
			       end}.

merge_msg_ChangeLauncherRes(#'ChangeLauncherRes'{seatID
						     = PFseatID,
						 launcherType = PFlauncherType},
			    #'ChangeLauncherRes'{seatID = NFseatID,
						 launcherType = NFlauncherType},
			    _) ->
    #'ChangeLauncherRes'{seatID =
			     if NFseatID =:= undefined -> PFseatID;
				true -> NFseatID
			     end,
			 launcherType =
			     if NFlauncherType =:= undefined -> PFlauncherType;
				true -> NFlauncherType
			     end}.

merge_msg_RoomInfoRes(#'RoomInfoRes'{enterKindId =
					 PFenterKindId,
				     gameType = PFgameType,
				     enterKindServerId = PFenterKindServerId,
				     enterKindPost = PFenterKindPost},
		      #'RoomInfoRes'{enterKindId = NFenterKindId,
				     gameType = NFgameType,
				     enterKindServerId = NFenterKindServerId,
				     enterKindPost = NFenterKindPost},
		      _) ->
    #'RoomInfoRes'{enterKindId =
		       if NFenterKindId =:= undefined -> PFenterKindId;
			  true -> NFenterKindId
		       end,
		   gameType =
		       if NFgameType =:= undefined -> PFgameType;
			  true -> NFgameType
		       end,
		   enterKindServerId =
		       if NFenterKindServerId =:= undefined ->
			      PFenterKindServerId;
			  true -> NFenterKindServerId
		       end,
		   enterKindPost =
		       if NFenterKindPost =:= undefined -> PFenterKindPost;
			  true -> NFenterKindPost
		       end}.

merge_msg_CatchedFishRes(#'CatchedFishRes'{bulletID =
					       PFbulletID,
					   gold = PFgold,
					   isRemoveBullet = PFisRemoveBullet,
					   totalNum = PFtotalNum,
					   seatID = PFseatID,
					   catchedFishes = PFcatchedFishes},
			 #'CatchedFishRes'{bulletID = NFbulletID, gold = NFgold,
					   isRemoveBullet = NFisRemoveBullet,
					   totalNum = NFtotalNum,
					   seatID = NFseatID,
					   catchedFishes = NFcatchedFishes},
			 TrUserData) ->
    #'CatchedFishRes'{bulletID =
			  if NFbulletID =:= undefined -> PFbulletID;
			     true -> NFbulletID
			  end,
		      gold =
			  if NFgold =:= undefined -> PFgold;
			     true -> NFgold
			  end,
		      isRemoveBullet =
			  if NFisRemoveBullet =:= undefined -> PFisRemoveBullet;
			     true -> NFisRemoveBullet
			  end,
		      totalNum =
			  if NFtotalNum =:= undefined -> PFtotalNum;
			     true -> NFtotalNum
			  end,
		      seatID =
			  if NFseatID =:= undefined -> PFseatID;
			     true -> NFseatID
			  end,
		      catchedFishes =
			  if PFcatchedFishes /= undefined,
			     NFcatchedFishes /= undefined ->
				 'erlang_++'(PFcatchedFishes, NFcatchedFishes,
					     TrUserData);
			     PFcatchedFishes == undefined -> NFcatchedFishes;
			     NFcatchedFishes == undefined -> PFcatchedFishes
			  end}.

merge_msg_LeaveGameRes(#'LeaveGameRes'{code = PFcode,
				       msg = PFmsg},
		       #'LeaveGameRes'{code = NFcode, msg = NFmsg}, _) ->
    #'LeaveGameRes'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    msg =
			if NFmsg =:= undefined -> PFmsg;
			   true -> NFmsg
			end}.

merge_msg_SyncFishData(#'SyncFishData'{fishID =
					   PFfishID,
				       groupID = PFgroupID,
				       fishTime = PFfishTime,
				       pathGroup = PFpathGroup,
				       pathIdx = PFpathIdx,
				       isActiveEvent = PFisActiveEvent,
				       elapsedTime = PFelapsedTime,
				       package = PFpackage,
				       specialType = PFspecialType,
				       delayScaling = PFdelayScaling,
				       delayDuration1 = PFdelayDuration1,
				       delayDuration2 = PFdelayDuration2,
				       delayDuration3 = PFdelayDuration3,
				       delayCurrentTime = PFdelayCurrentTime},
		       #'SyncFishData'{fishID = NFfishID, groupID = NFgroupID,
				       fishTime = NFfishTime,
				       pathGroup = NFpathGroup,
				       pathIdx = NFpathIdx,
				       isActiveEvent = NFisActiveEvent,
				       elapsedTime = NFelapsedTime,
				       package = NFpackage,
				       specialType = NFspecialType,
				       delayScaling = NFdelayScaling,
				       delayDuration1 = NFdelayDuration1,
				       delayDuration2 = NFdelayDuration2,
				       delayDuration3 = NFdelayDuration3,
				       delayCurrentTime = NFdelayCurrentTime},
		       _) ->
    #'SyncFishData'{fishID =
			if NFfishID =:= undefined -> PFfishID;
			   true -> NFfishID
			end,
		    groupID =
			if NFgroupID =:= undefined -> PFgroupID;
			   true -> NFgroupID
			end,
		    fishTime =
			if NFfishTime =:= undefined -> PFfishTime;
			   true -> NFfishTime
			end,
		    pathGroup =
			if NFpathGroup =:= undefined -> PFpathGroup;
			   true -> NFpathGroup
			end,
		    pathIdx =
			if NFpathIdx =:= undefined -> PFpathIdx;
			   true -> NFpathIdx
			end,
		    isActiveEvent =
			if NFisActiveEvent =:= undefined -> PFisActiveEvent;
			   true -> NFisActiveEvent
			end,
		    elapsedTime =
			if NFelapsedTime =:= undefined -> PFelapsedTime;
			   true -> NFelapsedTime
			end,
		    package =
			if NFpackage =:= undefined -> PFpackage;
			   true -> NFpackage
			end,
		    specialType =
			if NFspecialType =:= undefined -> PFspecialType;
			   true -> NFspecialType
			end,
		    delayScaling =
			if NFdelayScaling =:= undefined -> PFdelayScaling;
			   true -> NFdelayScaling
			end,
		    delayDuration1 =
			if NFdelayDuration1 =:= undefined -> PFdelayDuration1;
			   true -> NFdelayDuration1
			end,
		    delayDuration2 =
			if NFdelayDuration2 =:= undefined -> PFdelayDuration2;
			   true -> NFdelayDuration2
			end,
		    delayDuration3 =
			if NFdelayDuration3 =:= undefined -> PFdelayDuration3;
			   true -> NFdelayDuration3
			end,
		    delayCurrentTime =
			if NFdelayCurrentTime =:= undefined ->
			       PFdelayCurrentTime;
			   true -> NFdelayCurrentTime
			end}.

merge_msg_SyncFishes(#'SyncFishes'{fishList =
				       PFfishList},
		     #'SyncFishes'{fishList = NFfishList}, TrUserData) ->
    #'SyncFishes'{fishList =
		      if PFfishList /= undefined, NFfishList /= undefined ->
			     'erlang_++'(PFfishList, NFfishList, TrUserData);
			 PFfishList == undefined -> NFfishList;
			 NFfishList == undefined -> PFfishList
		      end}.

merge_msg_NotifyState(#'NotifyState'{seatID = PFseatID,
				     money = PFmoney, bangMoney = PFbangMoney},
		      #'NotifyState'{seatID = NFseatID, money = NFmoney,
				     bangMoney = NFbangMoney},
		      _) ->
    #'NotifyState'{seatID =
		       if NFseatID =:= undefined -> PFseatID;
			  true -> NFseatID
		       end,
		   money =
		       if NFmoney =:= undefined -> PFmoney;
			  true -> NFmoney
		       end,
		   bangMoney =
		       if NFbangMoney =:= undefined -> PFbangMoney;
			  true -> NFbangMoney
		       end}.

merge_msg_ItemData(#'ItemData'{itemId = PFitemId,
			       count = PFcount, expried = PFexpried},
		   #'ItemData'{itemId = NFitemId, count = NFcount,
			       expried = NFexpried},
		   _) ->
    #'ItemData'{itemId =
		    if NFitemId =:= undefined -> PFitemId;
		       true -> NFitemId
		    end,
		count =
		    if NFcount =:= undefined -> PFcount;
		       true -> NFcount
		    end,
		expried =
		    if NFexpried =:= undefined -> PFexpried;
		       true -> NFexpried
		    end}.

merge_msg_LoginRes(#'LoginRes'{uid = PFuid,
			       name = PFname, headUrl = PFheadUrl, ip = PFip,
			       money = PFmoney, bangMoney = PFbangMoney,
			       bankMoney = PFbankMoney,
			       bankPassword = PFbankPassword,
			       telephone_fare = PFtelephone_fare,
			       serverTime = PFserverTime, vipExp = PFvipExp,
			       phoneNum = PFphoneNum, roomCard = PFroomCard,
			       token = PFtoken},
		   #'LoginRes'{uid = NFuid, name = NFname,
			       headUrl = NFheadUrl, ip = NFip, money = NFmoney,
			       bangMoney = NFbangMoney, bankMoney = NFbankMoney,
			       bankPassword = NFbankPassword,
			       telephone_fare = NFtelephone_fare,
			       serverTime = NFserverTime, vipExp = NFvipExp,
			       phoneNum = NFphoneNum, roomCard = NFroomCard,
			       token = NFtoken},
		   _) ->
    #'LoginRes'{uid =
		    if NFuid =:= undefined -> PFuid;
		       true -> NFuid
		    end,
		name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end,
		headUrl =
		    if NFheadUrl =:= undefined -> PFheadUrl;
		       true -> NFheadUrl
		    end,
		ip =
		    if NFip =:= undefined -> PFip;
		       true -> NFip
		    end,
		money =
		    if NFmoney =:= undefined -> PFmoney;
		       true -> NFmoney
		    end,
		bangMoney =
		    if NFbangMoney =:= undefined -> PFbangMoney;
		       true -> NFbangMoney
		    end,
		bankMoney =
		    if NFbankMoney =:= undefined -> PFbankMoney;
		       true -> NFbankMoney
		    end,
		bankPassword =
		    if NFbankPassword =:= undefined -> PFbankPassword;
		       true -> NFbankPassword
		    end,
		telephone_fare =
		    if NFtelephone_fare =:= undefined -> PFtelephone_fare;
		       true -> NFtelephone_fare
		    end,
		serverTime =
		    if NFserverTime =:= undefined -> PFserverTime;
		       true -> NFserverTime
		    end,
		vipExp =
		    if NFvipExp =:= undefined -> PFvipExp;
		       true -> NFvipExp
		    end,
		phoneNum =
		    if NFphoneNum =:= undefined -> PFphoneNum;
		       true -> NFphoneNum
		    end,
		roomCard =
		    if NFroomCard =:= undefined -> PFroomCard;
		       true -> NFroomCard
		    end,
		token =
		    if NFtoken =:= undefined -> PFtoken;
		       true -> NFtoken
		    end}.

merge_msg_Heartbeat(_Prev, New, _TrUserData) -> New.

merge_msg_ClearSceneRes(#'ClearSceneRes'{clearType =
					     PFclearType},
			#'ClearSceneRes'{clearType = NFclearType}, _) ->
    #'ClearSceneRes'{clearType =
			 if NFclearType =:= undefined -> PFclearType;
			    true -> NFclearType
			 end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'CatchedFishes'{} ->
	  v_msg_CatchedFishes(Msg, ['CatchedFishes'], TrUserData);
      #'UnbindRobotSuccessRes'{} ->
	  v_msg_UnbindRobotSuccessRes(Msg,
				      ['UnbindRobotSuccessRes'], TrUserData);
      #'GameRecord'{} ->
	  v_msg_GameRecord(Msg, ['GameRecord'], TrUserData);
      #'IntoRoomReq'{} ->
	  v_msg_IntoRoomReq(Msg, ['IntoRoomReq'], TrUserData);
      #'BulletItem'{} ->
	  v_msg_BulletItem(Msg, ['BulletItem'], TrUserData);
      #'FireRes'{} ->
	  v_msg_FireRes(Msg, ['FireRes'], TrUserData);
      #'IntoRoomRes'{} ->
	  v_msg_IntoRoomRes(Msg, ['IntoRoomRes'], TrUserData);
      #'CommonStatus'{} ->
	  v_msg_CommonStatus(Msg, ['CommonStatus'], TrUserData);
      #'BindRobotReq'{} ->
	  v_msg_BindRobotReq(Msg, ['BindRobotReq'], TrUserData);
      #'UnbindRobotReq'{} ->
	  v_msg_UnbindRobotReq(Msg, ['UnbindRobotReq'],
			       TrUserData);
      #'ChangeClientRateReq'{} ->
	  v_msg_ChangeClientRateReq(Msg, ['ChangeClientRateReq'],
				    TrUserData);
      #'RoomInfoReq'{} ->
	  v_msg_RoomInfoReq(Msg, ['RoomInfoReq'], TrUserData);
      #'RoomOnlineInfo'{} ->
	  v_msg_RoomOnlineInfo(Msg, ['RoomOnlineInfo'],
			       TrUserData);
      #'RoomOnlineInfoRes'{} ->
	  v_msg_RoomOnlineInfoRes(Msg, ['RoomOnlineInfoRes'],
				  TrUserData);
      #'GameRecordRes'{} ->
	  v_msg_GameRecordRes(Msg, ['GameRecordRes'], TrUserData);
      #'LoginReq'{} ->
	  v_msg_LoginReq(Msg, ['LoginReq'], TrUserData);
      #'BroadcastMessage'{} ->
	  v_msg_BroadcastMessage(Msg, ['BroadcastMessage'],
				 TrUserData);
      #'BroadcastMessageList'{} ->
	  v_msg_BroadcastMessageList(Msg,
				     ['BroadcastMessageList'], TrUserData);
      #'Msg'{} -> v_msg_Msg(Msg, ['Msg'], TrUserData);
      #'LeaveGameReq'{} ->
	  v_msg_LeaveGameReq(Msg, ['LeaveGameReq'], TrUserData);
      #'FireReq'{} ->
	  v_msg_FireReq(Msg, ['FireReq'], TrUserData);
      #'Msgs'{} -> v_msg_Msgs(Msg, ['Msgs'], TrUserData);
      #'NotifyLeaveGameRes'{} ->
	  v_msg_NotifyLeaveGameRes(Msg, ['NotifyLeaveGameRes'],
				   TrUserData);
      #'CatchedFishReq'{} ->
	  v_msg_CatchedFishReq(Msg, ['CatchedFishReq'],
			       TrUserData);
      #'NotifyEnterGameRes'{} ->
	  v_msg_NotifyEnterGameRes(Msg, ['NotifyEnterGameRes'],
				   TrUserData);
      #'ChangeClientRateRes'{} ->
	  v_msg_ChangeClientRateRes(Msg, ['ChangeClientRateRes'],
				    TrUserData);
      #'ChangeClientRateTypeReq'{} ->
	  v_msg_ChangeClientRateTypeReq(Msg,
					['ChangeClientRateTypeReq'],
					TrUserData);
      #'AddFishes'{} ->
	  v_msg_AddFishes(Msg, ['AddFishes'], TrUserData);
      #'ChangeLauncherReq'{} ->
	  v_msg_ChangeLauncherReq(Msg, ['ChangeLauncherReq'],
				  TrUserData);
      #'GameRecordReq'{} ->
	  v_msg_GameRecordReq(Msg, ['GameRecordReq'], TrUserData);
      #'BindRobotSuccessRes'{} ->
	  v_msg_BindRobotSuccessRes(Msg, ['BindRobotSuccessRes'],
				    TrUserData);
      #'ChangeLauncherRes'{} ->
	  v_msg_ChangeLauncherRes(Msg, ['ChangeLauncherRes'],
				  TrUserData);
      #'RoomInfoRes'{} ->
	  v_msg_RoomInfoRes(Msg, ['RoomInfoRes'], TrUserData);
      #'CatchedFishRes'{} ->
	  v_msg_CatchedFishRes(Msg, ['CatchedFishRes'],
			       TrUserData);
      #'LeaveGameRes'{} ->
	  v_msg_LeaveGameRes(Msg, ['LeaveGameRes'], TrUserData);
      #'SyncFishData'{} ->
	  v_msg_SyncFishData(Msg, ['SyncFishData'], TrUserData);
      #'SyncFishes'{} ->
	  v_msg_SyncFishes(Msg, ['SyncFishes'], TrUserData);
      #'NotifyState'{} ->
	  v_msg_NotifyState(Msg, ['NotifyState'], TrUserData);
      #'ItemData'{} ->
	  v_msg_ItemData(Msg, ['ItemData'], TrUserData);
      #'LoginRes'{} ->
	  v_msg_LoginRes(Msg, ['LoginRes'], TrUserData);
      #'Heartbeat'{} ->
	  v_msg_Heartbeat(Msg, ['Heartbeat'], TrUserData);
      #'ClearSceneRes'{} ->
	  v_msg_ClearSceneRes(Msg, ['ClearSceneRes'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_CatchedFishes/3}).
v_msg_CatchedFishes(#'CatchedFishes'{catchEvent = F1,
				     fishID = F2, rewardID = F3,
				     lightingFishID = F4},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [catchEvent | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [fishID | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [rewardID | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [lightingFishID | Path])
    end,
    ok;
v_msg_CatchedFishes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CatchedFishes'}, X, Path).

-dialyzer({nowarn_function,v_msg_UnbindRobotSuccessRes/3}).
v_msg_UnbindRobotSuccessRes(#'UnbindRobotSuccessRes'{position
							 = F1,
						     userId = F2},
			    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [position | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [userId | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GameRecord/3}).
v_msg_GameRecord(#'GameRecord'{roundId = F1,
			       roomType = F2, allBet = F3, allWin = F4,
			       result = F5, startTime = F6, endTime = F7},
		 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [roundId | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [roomType | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [allBet | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [allWin | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [result | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [startTime | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [endTime | Path])
    end,
    ok;
v_msg_GameRecord(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GameRecord'}, X, Path).

-dialyzer({nowarn_function,v_msg_IntoRoomReq/3}).
v_msg_IntoRoomReq(#'IntoRoomReq'{uid = F1, roomId = F2,
				 type = F3},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [roomId | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_BulletItem/3}).
v_msg_BulletItem(#'BulletItem'{bulletID = F1,
			       degree = F2},
		 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [bulletID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [degree | Path])
    end,
    ok;
v_msg_BulletItem(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BulletItem'}, X, Path).

-dialyzer({nowarn_function,v_msg_FireRes/3}).
v_msg_FireRes(#'FireRes'{bulletItemList = F1,
			 launcherType = F2, energy = F3, reboundCount = F4,
			 lockFishID = F5, gold = F6, targetX = F7, targetY = F8,
			 bulletID = F9, seatID = F10},
	      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_BulletItem(Elem, [bulletItemList | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'BulletItem'}},
			 F1, [bulletItemList | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [launcherType | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [energy | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [reboundCount | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [lockFishID | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [gold | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [targetX | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [targetY | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [bulletID | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [seatID | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_IntoRoomRes/3}).
v_msg_IntoRoomRes(#'IntoRoomRes'{bTableTypeID = F1,
				 backgroundImage = F2, launcherType = F3,
				 seatID = F4, rateIndex = F5, match = F6,
				 matchGold = F7, minRate = F8, maxRate = F9,
				 roomId = F10, roomName = F11, endTime = F12},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [bTableTypeID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [backgroundImage | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [launcherType | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [seatID | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [rateIndex | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [match | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [matchGold | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [minRate | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [maxRate | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [roomId | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_string(F11, [roomName | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [endTime | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CommonStatus/3}).
v_msg_CommonStatus(#'CommonStatus'{code = F1, msg = F2,
				   type = F3},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_BindRobotReq/3}).
v_msg_BindRobotReq(#'BindRobotReq'{position = F1,
				   userId = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [position | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [userId | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_UnbindRobotReq/3}).
v_msg_UnbindRobotReq(#'UnbindRobotReq'{position = F1,
				       userId = F2},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [position | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [userId | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ChangeClientRateReq/3}).
v_msg_ChangeClientRateReq(#'ChangeClientRateReq'{opt =
						     F1},
			  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [opt | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_RoomInfoReq/3}).
v_msg_RoomInfoReq(#'RoomInfoReq'{type = F1, uid = F2},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [uid | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_RoomOnlineInfo/3}).
v_msg_RoomOnlineInfo(#'RoomOnlineInfo'{type = F1,
				       playCount = F2},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [playCount | Path])
    end,
    ok;
v_msg_RoomOnlineInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RoomOnlineInfo'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_RoomOnlineInfoRes/3}).
v_msg_RoomOnlineInfoRes(#'RoomOnlineInfoRes'{roomOnlineInfo
						 = F1},
			Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_RoomOnlineInfo(Elem, [roomOnlineInfo | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'RoomOnlineInfo'}},
			 F1, [roomOnlineInfo | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GameRecordRes/3}).
v_msg_GameRecordRes(#'GameRecordRes'{gameRecord = F1},
		    Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_GameRecord(Elem, [gameRecord | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'GameRecord'}},
			 F1, [gameRecord | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_LoginReq/3}).
v_msg_LoginReq(#'LoginReq'{identity = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [identity | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_BroadcastMessage/3}).
v_msg_BroadcastMessage(#'BroadcastMessage'{broadType =
					       F1,
					   msg = F2, langId = F3, params = F4,
					   priority = F5},
		       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [broadType | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [langId | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [params | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [params | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [priority | Path])
    end,
    ok;
v_msg_BroadcastMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'BroadcastMessage'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_BroadcastMessageList/3}).
v_msg_BroadcastMessageList(#'BroadcastMessageList'{messageList
						       = F1},
			   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_BroadcastMessage(Elem, [messageList | Path],
				       TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'BroadcastMessage'}},
			 F1, [messageList | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Msg/3}).
v_msg_Msg(#'Msg'{action = F1, msgBody = F2, token = F3},
	  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [action | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [msgBody | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [token | Path])
    end,
    ok;
v_msg_Msg(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Msg'}, X, Path).

-dialyzer({nowarn_function,v_msg_LeaveGameReq/3}).
v_msg_LeaveGameReq(#'LeaveGameReq'{type = F1}, Path,
		   _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_FireReq/3}).
v_msg_FireReq(#'FireReq'{degree = F1, lockedFishID = F2,
			 bulletID = F3, targetX = F4, targetY = F5},
	      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [degree | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [lockedFishID | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [bulletID | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [targetX | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [targetY | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Msgs/3}).
v_msg_Msgs(#'Msgs'{msgList = F1}, Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_Msg(Elem, [msgList | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Msg'}}, F1,
			 [msgList | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_NotifyLeaveGameRes/3}).
v_msg_NotifyLeaveGameRes(#'NotifyLeaveGameRes'{seatID =
						   F1},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [seatID | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CatchedFishReq/3}).
v_msg_CatchedFishReq(#'CatchedFishReq'{userId = F1,
				       fishID = F2, bulletID = F3,
				       catchedFishs = F4},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [userId | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [fishID | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [bulletID | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_uint32(Elem, [catchedFishs | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F4,
			 [catchedFishs | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_NotifyEnterGameRes/3}).
v_msg_NotifyEnterGameRes(#'NotifyEnterGameRes'{uid = F1,
					       name = F2, headUrl = F3, ip = F4,
					       money = F5, bangMoney = F6,
					       launcherType = F7,
					       rateIndex = F8, energy = F9,
					       seat = F10, roomCard = F11},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [headUrl | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [ip | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_float(F5, [money | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_float(F6, [bangMoney | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [launcherType | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [rateIndex | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [energy | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [seat | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [roomCard | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ChangeClientRateRes/3}).
v_msg_ChangeClientRateRes(#'ChangeClientRateRes'{seatID
						     = F1,
						 isCanUseRate = F2,
						 rateIndex = F3},
			  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [seatID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [isCanUseRate | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [rateIndex | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ChangeClientRateTypeReq/3}).
v_msg_ChangeClientRateTypeReq(#'ChangeClientRateTypeReq'{seatID
							     = F1,
							 rateIndex = F2},
			      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [seatID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [rateIndex | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_AddFishes/3}).
v_msg_AddFishes(#'AddFishes'{groupID = F1, pathID = F2,
			     startID = F3},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [groupID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [pathID | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [startID | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ChangeLauncherReq/3}).
v_msg_ChangeLauncherReq(#'ChangeLauncherReq'{seatID =
						 F1,
					     launcherType = F2},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [seatID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [launcherType | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GameRecordReq/3}).
v_msg_GameRecordReq(#'GameRecordReq'{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_BindRobotSuccessRes/3}).
v_msg_BindRobotSuccessRes(#'BindRobotSuccessRes'{position
						     = F1,
						 userId = F2},
			  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [position | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [userId | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ChangeLauncherRes/3}).
v_msg_ChangeLauncherRes(#'ChangeLauncherRes'{seatID =
						 F1,
					     launcherType = F2},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [seatID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [launcherType | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_RoomInfoRes/3}).
v_msg_RoomInfoRes(#'RoomInfoRes'{enterKindId = F1,
				 gameType = F2, enterKindServerId = F3,
				 enterKindPost = F4},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [enterKindId | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [gameType | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [enterKindServerId | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [enterKindPost | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_CatchedFishRes/3}).
v_msg_CatchedFishRes(#'CatchedFishRes'{bulletID = F1,
				       gold = F2, isRemoveBullet = F3,
				       totalNum = F4, seatID = F5,
				       catchedFishes = F6},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [bulletID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [gold | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [isRemoveBullet | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_float(F4, [totalNum | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [seatID | Path])
    end,
    if is_list(F6) ->
	   _ = [v_msg_CatchedFishes(Elem, [catchedFishes | Path],
				    TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'CatchedFishes'}},
			 F6, [catchedFishes | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_LeaveGameRes/3}).
v_msg_LeaveGameRes(#'LeaveGameRes'{code = F1, msg = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_SyncFishData/3}).
v_msg_SyncFishData(#'SyncFishData'{fishID = F1,
				   groupID = F2, fishTime = F3, pathGroup = F4,
				   pathIdx = F5, isActiveEvent = F6,
				   elapsedTime = F7, package = F8,
				   specialType = F9, delayScaling = F10,
				   delayDuration1 = F11, delayDuration2 = F12,
				   delayDuration3 = F13,
				   delayCurrentTime = F14},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [fishID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [groupID | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_float(F3, [fishTime | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [pathGroup | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [pathIdx | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [isActiveEvent | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [elapsedTime | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [package | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [specialType | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [delayScaling | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [delayDuration1 | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint32(F12, [delayDuration2 | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [delayDuration3 | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint32(F14, [delayCurrentTime | Path])
    end,
    ok;
v_msg_SyncFishData(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SyncFishData'}, X, Path).

-dialyzer({nowarn_function,v_msg_SyncFishes/3}).
v_msg_SyncFishes(#'SyncFishes'{fishList = F1}, Path,
		 TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_SyncFishData(Elem, [fishList | Path],
				   TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'SyncFishData'}},
			 F1, [fishList | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_NotifyState/3}).
v_msg_NotifyState(#'NotifyState'{seatID = F1,
				 money = F2, bangMoney = F3},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [seatID | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [money | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [bangMoney | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ItemData/3}).
v_msg_ItemData(#'ItemData'{itemId = F1, count = F2,
			   expried = F3},
	       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [itemId | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [count | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [expried | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_LoginRes/3}).
v_msg_LoginRes(#'LoginRes'{uid = F1, name = F2,
			   headUrl = F3, ip = F4, money = F5, bangMoney = F6,
			   bankMoney = F7, bankPassword = F8,
			   telephone_fare = F9, serverTime = F10, vipExp = F11,
			   phoneNum = F12, roomCard = F13, token = F14},
	       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [headUrl | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [ip | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [money | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_float(F6, [bangMoney | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [bankMoney | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [bankPassword | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint32(F9, [telephone_fare | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint32(F10, [serverTime | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [vipExp | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_string(F12, [phoneNum | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_uint32(F13, [roomCard | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_string(F14, [token | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Heartbeat/3}).
v_msg_Heartbeat(#'Heartbeat'{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_ClearSceneRes/3}).
v_msg_ClearSceneRes(#'ClearSceneRes'{clearType = F1},
		    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [clearType | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_float/2}).
v_type_float(N, _Path) when is_float(N) -> ok;
v_type_float(N, _Path) when is_integer(N) -> ok;
v_type_float(infinity, _Path) -> ok;
v_type_float('-infinity', _Path) -> ok;
v_type_float(nan, _Path) -> ok;
v_type_float(X, Path) ->
    mk_type_error(bad_float_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'CatchedFishes'},
      [#field{name = catchEvent, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = fishID, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = rewardID, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = lightingFishID, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'UnbindRobotSuccessRes'},
      [#field{name = position, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = userId, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'GameRecord'},
      [#field{name = roundId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = roomType, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []},
       #field{name = allBet, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = allWin, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []},
       #field{name = result, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = []},
       #field{name = startTime, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = endTime, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'IntoRoomReq'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = roomId, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'BulletItem'},
      [#field{name = bulletID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = degree, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'FireRes'},
      [#field{name = bulletItemList, fnum = 1, rnum = 2,
	      type = {msg, 'BulletItem'}, occurrence = repeated,
	      opts = []},
       #field{name = launcherType, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = energy, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = reboundCount, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = lockFishID, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = gold, fnum = 6, rnum = 7, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = targetX, fnum = 7, rnum = 8,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = targetY, fnum = 8, rnum = 9,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = bulletID, fnum = 9, rnum = 10,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = seatID, fnum = 10, rnum = 11,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'IntoRoomRes'},
      [#field{name = bTableTypeID, fnum = 1, rnum = 2,
	      type = int32, occurrence = optional, opts = []},
       #field{name = backgroundImage, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []},
       #field{name = launcherType, fnum = 3, rnum = 4,
	      type = int32, occurrence = optional, opts = []},
       #field{name = seatID, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = rateIndex, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = match, fnum = 6, rnum = 7, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = matchGold, fnum = 7, rnum = 8,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = minRate, fnum = 8, rnum = 9,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = maxRate, fnum = 9, rnum = 10,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = roomId, fnum = 10, rnum = 11,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = roomName, fnum = 11, rnum = 12,
	      type = string, occurrence = optional, opts = []},
       #field{name = endTime, fnum = 12, rnum = 13,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'CommonStatus'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'BindRobotReq'},
      [#field{name = position, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = userId, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'UnbindRobotReq'},
      [#field{name = position, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = userId, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ChangeClientRateReq'},
      [#field{name = opt, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'RoomInfoReq'},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = uid, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'RoomOnlineInfo'},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = playCount, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'RoomOnlineInfoRes'},
      [#field{name = roomOnlineInfo, fnum = 1, rnum = 2,
	      type = {msg, 'RoomOnlineInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'GameRecordRes'},
      [#field{name = gameRecord, fnum = 1, rnum = 2,
	      type = {msg, 'GameRecord'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'LoginReq'},
      [#field{name = identity, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'BroadcastMessage'},
      [#field{name = broadType, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = langId, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = params, fnum = 4, rnum = 5, type = string,
	      occurrence = repeated, opts = []},
       #field{name = priority, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'BroadcastMessageList'},
      [#field{name = messageList, fnum = 1, rnum = 2,
	      type = {msg, 'BroadcastMessage'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Msg'},
      [#field{name = action, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = msgBody, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = token, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'LeaveGameReq'},
      [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'FireReq'},
      [#field{name = degree, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = lockedFishID, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = bulletID, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = targetX, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = targetY, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Msgs'},
      [#field{name = msgList, fnum = 1, rnum = 2,
	      type = {msg, 'Msg'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'NotifyLeaveGameRes'},
      [#field{name = seatID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'CatchedFishReq'},
      [#field{name = userId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = fishID, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = bulletID, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = catchedFishs, fnum = 4, rnum = 5,
	      type = uint32, occurrence = repeated,
	      opts = [packed]}]},
     {{msg, 'NotifyEnterGameRes'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = headUrl, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = ip, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = money, fnum = 5, rnum = 6, type = float,
	      occurrence = optional, opts = []},
       #field{name = bangMoney, fnum = 6, rnum = 7,
	      type = float, occurrence = optional, opts = []},
       #field{name = launcherType, fnum = 7, rnum = 8,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = rateIndex, fnum = 8, rnum = 9,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = energy, fnum = 9, rnum = 10,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = seat, fnum = 10, rnum = 11, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = roomCard, fnum = 11, rnum = 12,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'ChangeClientRateRes'},
      [#field{name = seatID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = isCanUseRate, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = rateIndex, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'ChangeClientRateTypeReq'},
      [#field{name = seatID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = rateIndex, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'AddFishes'},
      [#field{name = groupID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = pathID, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = startID, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'ChangeLauncherReq'},
      [#field{name = seatID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = launcherType, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'GameRecordReq'}, []},
     {{msg, 'BindRobotSuccessRes'},
      [#field{name = position, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = userId, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ChangeLauncherRes'},
      [#field{name = seatID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = launcherType, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'RoomInfoRes'},
      [#field{name = enterKindId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = gameType, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = enterKindServerId, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = enterKindPost, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'CatchedFishRes'},
      [#field{name = bulletID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = gold, fnum = 2, rnum = 3, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = isRemoveBullet, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = totalNum, fnum = 4, rnum = 5,
	      type = float, occurrence = optional, opts = []},
       #field{name = seatID, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = catchedFishes, fnum = 6, rnum = 7,
	      type = {msg, 'CatchedFishes'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'LeaveGameRes'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'SyncFishData'},
      [#field{name = fishID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = groupID, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = fishTime, fnum = 3, rnum = 4,
	      type = float, occurrence = optional, opts = []},
       #field{name = pathGroup, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = pathIdx, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = isActiveEvent, fnum = 6, rnum = 7,
	      type = bool, occurrence = optional, opts = []},
       #field{name = elapsedTime, fnum = 7, rnum = 8,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = package, fnum = 8, rnum = 9,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = specialType, fnum = 9, rnum = 10,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = delayScaling, fnum = 10, rnum = 11,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = delayDuration1, fnum = 11, rnum = 12,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = delayDuration2, fnum = 12, rnum = 13,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = delayDuration3, fnum = 13, rnum = 14,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = delayCurrentTime, fnum = 14, rnum = 15,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'SyncFishes'},
      [#field{name = fishList, fnum = 1, rnum = 2,
	      type = {msg, 'SyncFishData'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'NotifyState'},
      [#field{name = seatID, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = money, fnum = 2, rnum = 3, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = bangMoney, fnum = 3, rnum = 4,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'ItemData'},
      [#field{name = itemId, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = count, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = expried, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'LoginRes'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = headUrl, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = ip, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = money, fnum = 5, rnum = 6, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = bangMoney, fnum = 6, rnum = 7,
	      type = float, occurrence = optional, opts = []},
       #field{name = bankMoney, fnum = 7, rnum = 8,
	      type = float, occurrence = optional, opts = []},
       #field{name = bankPassword, fnum = 8, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = telephone_fare, fnum = 9, rnum = 10,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = serverTime, fnum = 10, rnum = 11,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = vipExp, fnum = 11, rnum = 12,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = phoneNum, fnum = 12, rnum = 13,
	      type = string, occurrence = optional, opts = []},
       #field{name = roomCard, fnum = 13, rnum = 14,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = token, fnum = 14, rnum = 15,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Heartbeat'}, []},
     {{msg, 'ClearSceneRes'},
      [#field{name = clearType, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['CatchedFishes', 'UnbindRobotSuccessRes', 'GameRecord',
     'IntoRoomReq', 'BulletItem', 'FireRes', 'IntoRoomRes',
     'CommonStatus', 'BindRobotReq', 'UnbindRobotReq',
     'ChangeClientRateReq', 'RoomInfoReq', 'RoomOnlineInfo',
     'RoomOnlineInfoRes', 'GameRecordRes', 'LoginReq',
     'BroadcastMessage', 'BroadcastMessageList', 'Msg',
     'LeaveGameReq', 'FireReq', 'Msgs', 'NotifyLeaveGameRes',
     'CatchedFishReq', 'NotifyEnterGameRes',
     'ChangeClientRateRes', 'ChangeClientRateTypeReq',
     'AddFishes', 'ChangeLauncherReq', 'GameRecordReq',
     'BindRobotSuccessRes', 'ChangeLauncherRes',
     'RoomInfoRes', 'CatchedFishRes', 'LeaveGameRes',
     'SyncFishData', 'SyncFishes', 'NotifyState', 'ItemData',
     'LoginRes', 'Heartbeat', 'ClearSceneRes'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['CatchedFishes', 'UnbindRobotSuccessRes', 'GameRecord',
     'IntoRoomReq', 'BulletItem', 'FireRes', 'IntoRoomRes',
     'CommonStatus', 'BindRobotReq', 'UnbindRobotReq',
     'ChangeClientRateReq', 'RoomInfoReq', 'RoomOnlineInfo',
     'RoomOnlineInfoRes', 'GameRecordRes', 'LoginReq',
     'BroadcastMessage', 'BroadcastMessageList', 'Msg',
     'LeaveGameReq', 'FireReq', 'Msgs', 'NotifyLeaveGameRes',
     'CatchedFishReq', 'NotifyEnterGameRes',
     'ChangeClientRateRes', 'ChangeClientRateTypeReq',
     'AddFishes', 'ChangeLauncherReq', 'GameRecordReq',
     'BindRobotSuccessRes', 'ChangeLauncherRes',
     'RoomInfoRes', 'CatchedFishRes', 'LeaveGameRes',
     'SyncFishData', 'SyncFishes', 'NotifyState', 'ItemData',
     'LoginRes', 'Heartbeat', 'ClearSceneRes'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('CatchedFishes') ->
    [#field{name = catchEvent, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = fishID, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = rewardID, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = lightingFishID, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('UnbindRobotSuccessRes') ->
    [#field{name = position, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = userId, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('GameRecord') ->
    [#field{name = roundId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = roomType, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []},
     #field{name = allBet, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = allWin, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []},
     #field{name = result, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = []},
     #field{name = startTime, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = endTime, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('IntoRoomReq') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = roomId, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('BulletItem') ->
    [#field{name = bulletID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = degree, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('FireRes') ->
    [#field{name = bulletItemList, fnum = 1, rnum = 2,
	    type = {msg, 'BulletItem'}, occurrence = repeated,
	    opts = []},
     #field{name = launcherType, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = energy, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = reboundCount, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = lockFishID, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = gold, fnum = 6, rnum = 7, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = targetX, fnum = 7, rnum = 8,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = targetY, fnum = 8, rnum = 9,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = bulletID, fnum = 9, rnum = 10,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = seatID, fnum = 10, rnum = 11,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('IntoRoomRes') ->
    [#field{name = bTableTypeID, fnum = 1, rnum = 2,
	    type = int32, occurrence = optional, opts = []},
     #field{name = backgroundImage, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []},
     #field{name = launcherType, fnum = 3, rnum = 4,
	    type = int32, occurrence = optional, opts = []},
     #field{name = seatID, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = rateIndex, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = match, fnum = 6, rnum = 7, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = matchGold, fnum = 7, rnum = 8,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = minRate, fnum = 8, rnum = 9,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = maxRate, fnum = 9, rnum = 10,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = roomId, fnum = 10, rnum = 11,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = roomName, fnum = 11, rnum = 12,
	    type = string, occurrence = optional, opts = []},
     #field{name = endTime, fnum = 12, rnum = 13,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('CommonStatus') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('BindRobotReq') ->
    [#field{name = position, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = userId, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('UnbindRobotReq') ->
    [#field{name = position, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = userId, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ChangeClientRateReq') ->
    [#field{name = opt, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('RoomInfoReq') ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = uid, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('RoomOnlineInfo') ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = playCount, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('RoomOnlineInfoRes') ->
    [#field{name = roomOnlineInfo, fnum = 1, rnum = 2,
	    type = {msg, 'RoomOnlineInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('GameRecordRes') ->
    [#field{name = gameRecord, fnum = 1, rnum = 2,
	    type = {msg, 'GameRecord'}, occurrence = repeated,
	    opts = []}];
find_msg_def('LoginReq') ->
    [#field{name = identity, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('BroadcastMessage') ->
    [#field{name = broadType, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = langId, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = params, fnum = 4, rnum = 5, type = string,
	    occurrence = repeated, opts = []},
     #field{name = priority, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('BroadcastMessageList') ->
    [#field{name = messageList, fnum = 1, rnum = 2,
	    type = {msg, 'BroadcastMessage'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Msg') ->
    [#field{name = action, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = msgBody, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = token, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('LeaveGameReq') ->
    [#field{name = type, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('FireReq') ->
    [#field{name = degree, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = lockedFishID, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = bulletID, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = targetX, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = targetY, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('Msgs') ->
    [#field{name = msgList, fnum = 1, rnum = 2,
	    type = {msg, 'Msg'}, occurrence = repeated, opts = []}];
find_msg_def('NotifyLeaveGameRes') ->
    [#field{name = seatID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('CatchedFishReq') ->
    [#field{name = userId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = fishID, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = bulletID, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = catchedFishs, fnum = 4, rnum = 5,
	    type = uint32, occurrence = repeated, opts = [packed]}];
find_msg_def('NotifyEnterGameRes') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = headUrl, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = ip, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = money, fnum = 5, rnum = 6, type = float,
	    occurrence = optional, opts = []},
     #field{name = bangMoney, fnum = 6, rnum = 7,
	    type = float, occurrence = optional, opts = []},
     #field{name = launcherType, fnum = 7, rnum = 8,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = rateIndex, fnum = 8, rnum = 9,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = energy, fnum = 9, rnum = 10,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = seat, fnum = 10, rnum = 11, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = roomCard, fnum = 11, rnum = 12,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('ChangeClientRateRes') ->
    [#field{name = seatID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = isCanUseRate, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = rateIndex, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('ChangeClientRateTypeReq') ->
    [#field{name = seatID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = rateIndex, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('AddFishes') ->
    [#field{name = groupID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = pathID, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = startID, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('ChangeLauncherReq') ->
    [#field{name = seatID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = launcherType, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('GameRecordReq') -> [];
find_msg_def('BindRobotSuccessRes') ->
    [#field{name = position, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = userId, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ChangeLauncherRes') ->
    [#field{name = seatID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = launcherType, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('RoomInfoRes') ->
    [#field{name = enterKindId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = gameType, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = enterKindServerId, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = enterKindPost, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('CatchedFishRes') ->
    [#field{name = bulletID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = gold, fnum = 2, rnum = 3, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = isRemoveBullet, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = totalNum, fnum = 4, rnum = 5,
	    type = float, occurrence = optional, opts = []},
     #field{name = seatID, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = catchedFishes, fnum = 6, rnum = 7,
	    type = {msg, 'CatchedFishes'}, occurrence = repeated,
	    opts = []}];
find_msg_def('LeaveGameRes') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('SyncFishData') ->
    [#field{name = fishID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = groupID, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = fishTime, fnum = 3, rnum = 4,
	    type = float, occurrence = optional, opts = []},
     #field{name = pathGroup, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = pathIdx, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = isActiveEvent, fnum = 6, rnum = 7,
	    type = bool, occurrence = optional, opts = []},
     #field{name = elapsedTime, fnum = 7, rnum = 8,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = package, fnum = 8, rnum = 9,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = specialType, fnum = 9, rnum = 10,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = delayScaling, fnum = 10, rnum = 11,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = delayDuration1, fnum = 11, rnum = 12,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = delayDuration2, fnum = 12, rnum = 13,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = delayDuration3, fnum = 13, rnum = 14,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = delayCurrentTime, fnum = 14, rnum = 15,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('SyncFishes') ->
    [#field{name = fishList, fnum = 1, rnum = 2,
	    type = {msg, 'SyncFishData'}, occurrence = repeated,
	    opts = []}];
find_msg_def('NotifyState') ->
    [#field{name = seatID, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = money, fnum = 2, rnum = 3, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = bangMoney, fnum = 3, rnum = 4,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('ItemData') ->
    [#field{name = itemId, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = count, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = expried, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('LoginRes') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = headUrl, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = ip, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = money, fnum = 5, rnum = 6, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = bangMoney, fnum = 6, rnum = 7,
	    type = float, occurrence = optional, opts = []},
     #field{name = bankMoney, fnum = 7, rnum = 8,
	    type = float, occurrence = optional, opts = []},
     #field{name = bankPassword, fnum = 8, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = telephone_fare, fnum = 9, rnum = 10,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = serverTime, fnum = 10, rnum = 11,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = vipExp, fnum = 11, rnum = 12,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = phoneNum, fnum = 12, rnum = 13,
	    type = string, occurrence = optional, opts = []},
     #field{name = roomCard, fnum = 13, rnum = 14,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = token, fnum = 14, rnum = 15,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Heartbeat') -> [];
find_msg_def('ClearSceneRes') ->
    [#field{name = clearType, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'PB'.



gpb_version_as_string() ->
    "4.0.2".

gpb_version_as_list() ->
    [4,0,2].
