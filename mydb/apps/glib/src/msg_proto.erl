%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.2
-module(msg_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("msg_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Payload'() :: #'Payload'{}.
-type 'RpcPackage'() :: #'RpcPackage'{}.
-type 'Login'() :: #'Login'{}.
-type 'AesDecode'() :: #'AesDecode'{}.
-type 'TestMsg'() :: #'TestMsg'{}.
-type 'AesDecodeReply'() :: #'AesDecodeReply'{}.
-type 'AesEncode'() :: #'AesEncode'{}.
-export_type(['Payload'/0, 'RpcPackage'/0, 'Login'/0, 'AesDecode'/0, 'TestMsg'/0, 'AesDecodeReply'/0, 'AesEncode'/0]).

-spec encode_msg(#'Payload'{} | #'RpcPackage'{} | #'Login'{} | #'AesDecode'{} | #'TestMsg'{} | #'AesDecodeReply'{} | #'AesEncode'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'Payload'{} | #'RpcPackage'{} | #'Login'{} | #'AesDecode'{} | #'TestMsg'{} | #'AesDecodeReply'{} | #'AesEncode'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Payload'{} -> e_msg_Payload(Msg, TrUserData);
      #'RpcPackage'{} -> e_msg_RpcPackage(Msg, TrUserData);
      #'Login'{} -> e_msg_Login(Msg, TrUserData);
      #'AesDecode'{} -> e_msg_AesDecode(Msg, TrUserData);
      #'TestMsg'{} -> e_msg_TestMsg(Msg, TrUserData);
      #'AesDecodeReply'{} ->
	  e_msg_AesDecodeReply(Msg, TrUserData);
      #'AesEncode'{} -> e_msg_AesEncode(Msg, TrUserData)
    end.



e_msg_Payload(Msg, TrUserData) ->
    e_msg_Payload(Msg, <<>>, TrUserData).


e_msg_Payload(#'Payload'{key = F1, pack = F2}, Bin,
	      TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_bytes(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_RpcPackage(Msg, TrUserData) ->
    e_msg_RpcPackage(Msg, <<>>, TrUserData).


e_msg_RpcPackage(#'RpcPackage'{key = F1, cmd = F2,
			       payload = F3},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_type_int32(TrF2, <<B1/binary, 16>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_bytes(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_Login(Msg, TrUserData) ->
    e_msg_Login(Msg, <<>>, TrUserData).


e_msg_Login(#'Login'{uid = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_AesDecode(Msg, TrUserData) ->
    e_msg_AesDecode(Msg, <<>>, TrUserData).


e_msg_AesDecode(#'AesDecode'{key = F1, from = F2}, Bin,
		TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_TestMsg(Msg, TrUserData) ->
    e_msg_TestMsg(Msg, <<>>, TrUserData).


e_msg_TestMsg(#'TestMsg'{name = F1, nick_name = F2,
			 phone = F3},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_AesDecodeReply(Msg, TrUserData) ->
    e_msg_AesDecodeReply(Msg, <<>>, TrUserData).


e_msg_AesDecodeReply(#'AesDecodeReply'{code = F1,
				       reply = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_AesEncode(Msg, TrUserData) ->
    e_msg_AesEncode(Msg, <<>>, TrUserData).


e_msg_AesEncode(#'AesEncode'{key = F1, from = F2}, Bin,
		TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Payload' ->
	  try d_msg_Payload(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Payload', {Class, Reason, StackTrace}}}})
	  end;
      'RpcPackage' ->
	  try d_msg_RpcPackage(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'RpcPackage', {Class, Reason, StackTrace}}}})
	  end;
      'Login' ->
	  try d_msg_Login(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Login', {Class, Reason, StackTrace}}}})
	  end;
      'AesDecode' ->
	  try d_msg_AesDecode(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'AesDecode', {Class, Reason, StackTrace}}}})
	  end;
      'TestMsg' ->
	  try d_msg_TestMsg(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'TestMsg', {Class, Reason, StackTrace}}}})
	  end;
      'AesDecodeReply' ->
	  try d_msg_AesDecodeReply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'AesDecodeReply', {Class, Reason, StackTrace}}}})
	  end;
      'AesEncode' ->
	  try d_msg_AesEncode(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'AesEncode', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_Payload(Bin, TrUserData) ->
    dfp_read_field_def_Payload(Bin, 0, 0,
			       id(<<>>, TrUserData), id(<<>>, TrUserData),
			       TrUserData).

dfp_read_field_def_Payload(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_Payload_key(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_Payload(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_Payload_pack(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_Payload(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Payload'{key = F@_1, pack = F@_2};
dfp_read_field_def_Payload(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_Payload(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_Payload(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Payload(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_Payload(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Payload_key(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_Payload_pack(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Payload(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_Payload(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Payload(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_Payload(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_Payload(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Payload(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Payload'{key = F@_1, pack = F@_2}.

d_field_Payload_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Payload_key(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_Payload_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Payload(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_Payload_pack(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Payload_pack(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_Payload_pack(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Payload(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_Payload(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_Payload(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_Payload(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_Payload(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Payload(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Payload(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Payload(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_Payload(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Payload(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_Payload(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_Payload(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_Payload(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

d_msg_RpcPackage(Bin, TrUserData) ->
    dfp_read_field_def_RpcPackage(Bin, 0, 0,
				  id(<<>>, TrUserData), id(0, TrUserData),
				  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_RpcPackage(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RpcPackage_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_RpcPackage(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RpcPackage_cmd(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_RpcPackage(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RpcPackage_payload(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_RpcPackage(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #'RpcPackage'{key = F@_1, cmd = F@_2, payload = F@_3};
dfp_read_field_def_RpcPackage(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_RpcPackage(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_RpcPackage(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RpcPackage(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_RpcPackage(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RpcPackage_key(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      16 ->
	  d_field_RpcPackage_cmd(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      26 ->
	  d_field_RpcPackage_payload(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RpcPackage(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_RpcPackage(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_RpcPackage(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_RpcPackage(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_RpcPackage(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_RpcPackage(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'RpcPackage'{key = F@_1, cmd = F@_2, payload = F@_3}.

d_field_RpcPackage_key(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RpcPackage_key(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_RpcPackage_key(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_RpcPackage(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, TrUserData).

d_field_RpcPackage_cmd(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RpcPackage_cmd(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_RpcPackage_cmd(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_RpcPackage(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, TrUserData).

d_field_RpcPackage_payload(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RpcPackage_payload(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_RpcPackage_payload(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_RpcPackage(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, TrUserData).

skip_varint_RpcPackage(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_RpcPackage(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_RpcPackage(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RpcPackage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_RpcPackage(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_RpcPackage(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_RpcPackage(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RpcPackage(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_RpcPackage(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RpcPackage(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_RpcPackage(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RpcPackage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_RpcPackage(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RpcPackage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

d_msg_Login(Bin, TrUserData) ->
    dfp_read_field_def_Login(Bin, 0, 0, id(0, TrUserData),
			     TrUserData).

dfp_read_field_def_Login(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_Login_uid(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Login(<<>>, 0, 0, F@_1, _) ->
    #'Login'{uid = F@_1};
dfp_read_field_def_Login(Other, Z1, Z2, F@_1,
			 TrUserData) ->
    dg_read_field_def_Login(Other, Z1, Z2, F@_1,
			    TrUserData).

dg_read_field_def_Login(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Login(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
dg_read_field_def_Login(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Login_uid(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Login(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Login(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Login(Rest, 0, 0, F@_1,
					    TrUserData);
	    3 ->
		skip_group_Login(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Login(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Login(<<>>, 0, 0, F@_1, _) ->
    #'Login'{uid = F@_1}.

d_field_Login_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, TrUserData)
    when N < 57 ->
    d_field_Login_uid(Rest, N + 7, X bsl N + Acc, F@_1,
		      TrUserData);
d_field_Login_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_Login(RestF, 0, 0, NewFValue,
			     TrUserData).

skip_varint_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    skip_varint_Login(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_length_delimited_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
skip_length_delimited_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Login(Rest2, 0, 0, F@_1, TrUserData).

skip_group_Login(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Login(Rest, 0, Z2, F@_1, TrUserData).

skip_32_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_64_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1,
			     TrUserData).

d_msg_AesDecode(Bin, TrUserData) ->
    dfp_read_field_def_AesDecode(Bin, 0, 0,
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_AesDecode(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_AesDecode_key(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_AesDecode(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_AesDecode_from(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_AesDecode(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'AesDecode'{key = F@_1, from = F@_2};
dfp_read_field_def_AesDecode(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_AesDecode(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_AesDecode(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AesDecode(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_AesDecode(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AesDecode_key(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_AesDecode_from(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AesDecode(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_AesDecode(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AesDecode(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_AesDecode(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_AesDecode(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AesDecode(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'AesDecode'{key = F@_1, from = F@_2}.

d_field_AesDecode_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AesDecode_key(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_AesDecode_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_AesDecode(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_AesDecode_from(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AesDecode_from(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_AesDecode_from(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_AesDecode(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_AesDecode(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_AesDecode(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_AesDecode(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AesDecode(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_AesDecode(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AesDecode(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AesDecode(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AesDecode(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_AesDecode(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AesDecode(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_AesDecode(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_AesDecode(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_AesDecode(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_AesDecode(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

d_msg_TestMsg(Bin, TrUserData) ->
    dfp_read_field_def_TestMsg(Bin, 0, 0,
			       id(<<>>, TrUserData), id(<<>>, TrUserData),
			       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_TestMsg(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TestMsg_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_TestMsg(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TestMsg_nick_name(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_TestMsg(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TestMsg_phone(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_TestMsg(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'TestMsg'{name = F@_1, nick_name = F@_2, phone = F@_3};
dfp_read_field_def_TestMsg(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_TestMsg(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_TestMsg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TestMsg(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_TestMsg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TestMsg_name(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      18 ->
	  d_field_TestMsg_nick_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      26 ->
	  d_field_TestMsg_phone(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TestMsg(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_TestMsg(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_TestMsg(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_TestMsg(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_TestMsg(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_TestMsg(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #'TestMsg'{name = F@_1, nick_name = F@_2, phone = F@_3}.

d_field_TestMsg_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TestMsg_name(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_TestMsg_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_TestMsg(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_TestMsg_nick_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TestMsg_nick_name(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_TestMsg_nick_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_TestMsg(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_TestMsg_phone(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TestMsg_phone(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_TestMsg_phone(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_TestMsg(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, TrUserData).

skip_varint_TestMsg(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_TestMsg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_TestMsg(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TestMsg(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_TestMsg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_TestMsg(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_TestMsg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestMsg(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_TestMsg(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestMsg(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_TestMsg(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TestMsg(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_TestMsg(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TestMsg(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

d_msg_AesDecodeReply(Bin, TrUserData) ->
    dfp_read_field_def_AesDecodeReply(Bin, 0, 0,
				      id(0, TrUserData), id(<<>>, TrUserData),
				      TrUserData).

dfp_read_field_def_AesDecodeReply(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AesDecodeReply_code(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_AesDecodeReply(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AesDecodeReply_reply(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_AesDecodeReply(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'AesDecodeReply'{code = F@_1, reply = F@_2};
dfp_read_field_def_AesDecodeReply(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_AesDecodeReply(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_AesDecodeReply(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AesDecodeReply(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_AesDecodeReply(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AesDecodeReply_code(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_AesDecodeReply_reply(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AesDecodeReply(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_AesDecodeReply(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_AesDecodeReply(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_AesDecodeReply(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_AesDecodeReply(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_AesDecodeReply(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #'AesDecodeReply'{code = F@_1, reply = F@_2}.

d_field_AesDecodeReply_code(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AesDecodeReply_code(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_AesDecodeReply_code(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    Res
			  end,
			  Rest},
    dfp_read_field_def_AesDecodeReply(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_AesDecodeReply_reply(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AesDecodeReply_reply(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_AesDecodeReply_reply(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_AesDecodeReply(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_AesDecodeReply(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AesDecodeReply(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_AesDecodeReply(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AesDecodeReply(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_AesDecodeReply(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AesDecodeReply(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AesDecodeReply(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AesDecodeReply(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_AesDecodeReply(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AesDecodeReply(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_AesDecodeReply(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AesDecodeReply(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_AesDecodeReply(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AesDecodeReply(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

d_msg_AesEncode(Bin, TrUserData) ->
    dfp_read_field_def_AesEncode(Bin, 0, 0,
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_AesEncode(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_AesEncode_key(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_AesEncode(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_AesEncode_from(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_AesEncode(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #'AesEncode'{key = F@_1, from = F@_2};
dfp_read_field_def_AesEncode(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_AesEncode(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_AesEncode(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AesEncode(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_AesEncode(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AesEncode_key(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_AesEncode_from(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AesEncode(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_AesEncode(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AesEncode(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_AesEncode(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_AesEncode(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AesEncode(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #'AesEncode'{key = F@_1, from = F@_2}.

d_field_AesEncode_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AesEncode_key(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_AesEncode_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_AesEncode(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_AesEncode_from(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AesEncode_from(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_AesEncode_from(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_AesEncode(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_AesEncode(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_AesEncode(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_AesEncode(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AesEncode(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_AesEncode(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AesEncode(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AesEncode(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AesEncode(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_AesEncode(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AesEncode(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_AesEncode(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_AesEncode(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_AesEncode(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_AesEncode(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Payload'{} ->
	  merge_msg_Payload(Prev, New, TrUserData);
      #'RpcPackage'{} ->
	  merge_msg_RpcPackage(Prev, New, TrUserData);
      #'Login'{} -> merge_msg_Login(Prev, New, TrUserData);
      #'AesDecode'{} ->
	  merge_msg_AesDecode(Prev, New, TrUserData);
      #'TestMsg'{} ->
	  merge_msg_TestMsg(Prev, New, TrUserData);
      #'AesDecodeReply'{} ->
	  merge_msg_AesDecodeReply(Prev, New, TrUserData);
      #'AesEncode'{} ->
	  merge_msg_AesEncode(Prev, New, TrUserData)
    end.

merge_msg_Payload(#'Payload'{key = PFkey,
			     pack = PFpack},
		  #'Payload'{key = NFkey, pack = NFpack}, _) ->
    #'Payload'{key =
		   if NFkey =:= undefined -> PFkey;
		      true -> NFkey
		   end,
	       pack =
		   if NFpack =:= undefined -> PFpack;
		      true -> NFpack
		   end}.

merge_msg_RpcPackage(#'RpcPackage'{key = PFkey,
				   cmd = PFcmd, payload = PFpayload},
		     #'RpcPackage'{key = NFkey, cmd = NFcmd,
				   payload = NFpayload},
		     _) ->
    #'RpcPackage'{key =
		      if NFkey =:= undefined -> PFkey;
			 true -> NFkey
		      end,
		  cmd =
		      if NFcmd =:= undefined -> PFcmd;
			 true -> NFcmd
		      end,
		  payload =
		      if NFpayload =:= undefined -> PFpayload;
			 true -> NFpayload
		      end}.

merge_msg_Login(#'Login'{uid = PFuid},
		#'Login'{uid = NFuid}, _) ->
    #'Login'{uid =
		 if NFuid =:= undefined -> PFuid;
		    true -> NFuid
		 end}.

merge_msg_AesDecode(#'AesDecode'{key = PFkey,
				 from = PFfrom},
		    #'AesDecode'{key = NFkey, from = NFfrom}, _) ->
    #'AesDecode'{key =
		     if NFkey =:= undefined -> PFkey;
			true -> NFkey
		     end,
		 from =
		     if NFfrom =:= undefined -> PFfrom;
			true -> NFfrom
		     end}.

merge_msg_TestMsg(#'TestMsg'{name = PFname,
			     nick_name = PFnick_name, phone = PFphone},
		  #'TestMsg'{name = NFname, nick_name = NFnick_name,
			     phone = NFphone},
		  _) ->
    #'TestMsg'{name =
		   if NFname =:= undefined -> PFname;
		      true -> NFname
		   end,
	       nick_name =
		   if NFnick_name =:= undefined -> PFnick_name;
		      true -> NFnick_name
		   end,
	       phone =
		   if NFphone =:= undefined -> PFphone;
		      true -> NFphone
		   end}.

merge_msg_AesDecodeReply(#'AesDecodeReply'{code =
					       PFcode,
					   reply = PFreply},
			 #'AesDecodeReply'{code = NFcode, reply = NFreply},
			 _) ->
    #'AesDecodeReply'{code =
			  if NFcode =:= undefined -> PFcode;
			     true -> NFcode
			  end,
		      reply =
			  if NFreply =:= undefined -> PFreply;
			     true -> NFreply
			  end}.

merge_msg_AesEncode(#'AesEncode'{key = PFkey,
				 from = PFfrom},
		    #'AesEncode'{key = NFkey, from = NFfrom}, _) ->
    #'AesEncode'{key =
		     if NFkey =:= undefined -> PFkey;
			true -> NFkey
		     end,
		 from =
		     if NFfrom =:= undefined -> PFfrom;
			true -> NFfrom
		     end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Payload'{} ->
	  v_msg_Payload(Msg, ['Payload'], TrUserData);
      #'RpcPackage'{} ->
	  v_msg_RpcPackage(Msg, ['RpcPackage'], TrUserData);
      #'Login'{} -> v_msg_Login(Msg, ['Login'], TrUserData);
      #'AesDecode'{} ->
	  v_msg_AesDecode(Msg, ['AesDecode'], TrUserData);
      #'TestMsg'{} ->
	  v_msg_TestMsg(Msg, ['TestMsg'], TrUserData);
      #'AesDecodeReply'{} ->
	  v_msg_AesDecodeReply(Msg, ['AesDecodeReply'],
			       TrUserData);
      #'AesEncode'{} ->
	  v_msg_AesEncode(Msg, ['AesEncode'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Payload/3}).
v_msg_Payload(#'Payload'{key = F1, pack = F2}, Path,
	      _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [pack | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_RpcPackage/3}).
v_msg_RpcPackage(#'RpcPackage'{key = F1, cmd = F2,
			       payload = F3},
		 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [cmd | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [payload | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Login/3}).
v_msg_Login(#'Login'{uid = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [uid | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_AesDecode/3}).
v_msg_AesDecode(#'AesDecode'{key = F1, from = F2}, Path,
		_) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [from | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_TestMsg/3}).
v_msg_TestMsg(#'TestMsg'{name = F1, nick_name = F2,
			 phone = F3},
	      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [nick_name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [phone | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_AesDecodeReply/3}).
v_msg_AesDecodeReply(#'AesDecodeReply'{code = F1,
				       reply = F2},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [reply | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_AesEncode/3}).
v_msg_AesEncode(#'AesEncode'{key = F1, from = F2}, Path,
		_) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [from | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, 'Payload'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = pack, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'RpcPackage'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = cmd, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = payload, fnum = 3, rnum = 4, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'Login'},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'AesDecode'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = from, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'TestMsg'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = nick_name, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = phone, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'AesDecodeReply'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = reply, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'AesEncode'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = from, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['Payload', 'RpcPackage', 'Login', 'AesDecode',
     'TestMsg', 'AesDecodeReply', 'AesEncode'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Payload', 'RpcPackage', 'Login', 'AesDecode',
     'TestMsg', 'AesDecodeReply', 'AesEncode'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Payload') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = pack, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('RpcPackage') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = cmd, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = payload, fnum = 3, rnum = 4, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('Login') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('AesDecode') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = from, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('TestMsg') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = nick_name, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = phone, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('AesDecodeReply') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = reply, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('AesEncode') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = from, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> msg.



gpb_version_as_string() ->
    "4.0.2".

gpb_version_as_list() ->
    [4,0,2].
