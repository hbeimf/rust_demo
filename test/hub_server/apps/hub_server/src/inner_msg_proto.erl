%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(inner_msg_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("inner_msg_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'InnerLogin'() :: #'InnerLogin'{}.
-type 'InnerLoginReply'() :: #'InnerLoginReply'{}.
-type 'InnerRegistProxy'() :: #'InnerRegistProxy'{}.
-type 'InnerLogout'() :: #'InnerLogout'{}.
-type 'InnerSyncClients'() :: #'InnerSyncClients'{}.
-export_type(['InnerLogin'/0, 'InnerLoginReply'/0, 'InnerRegistProxy'/0, 'InnerLogout'/0, 'InnerSyncClients'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'InnerLogin'{} -> e_msg_InnerLogin(Msg, TrUserData);
      #'InnerLoginReply'{} ->
	  e_msg_InnerLoginReply(Msg, TrUserData);
      #'InnerRegistProxy'{} ->
	  e_msg_InnerRegistProxy(Msg, TrUserData);
      #'InnerLogout'{} -> e_msg_InnerLogout(Msg, TrUserData);
      #'InnerSyncClients'{} ->
	  e_msg_InnerSyncClients(Msg, TrUserData)
    end.



e_msg_InnerLogin(Msg, TrUserData) ->
    e_msg_InnerLogin(Msg, <<>>, TrUserData).


e_msg_InnerLogin(#'InnerLogin'{user_id = F1, token = F2,
			       proxy_id = F3, ip = F4, login_time = F5},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>)
    end.

e_msg_InnerLoginReply(Msg, TrUserData) ->
    e_msg_InnerLoginReply(Msg, <<>>, TrUserData).


e_msg_InnerLoginReply(#'InnerLoginReply'{user_id = F1,
					 error_type = F2, msg = F3},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>)
    end.

e_msg_InnerRegistProxy(Msg, TrUserData) ->
    e_msg_InnerRegistProxy(Msg, <<>>, TrUserData).


e_msg_InnerRegistProxy(#'InnerRegistProxy'{id = F1,
					   ip = F2, port = F3},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>)
    end.

e_msg_InnerLogout(Msg, TrUserData) ->
    e_msg_InnerLogout(Msg, <<>>, TrUserData).


e_msg_InnerLogout(#'InnerLogout'{user_id = F1,
				 token = F2, proxy_id = F3},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>)
    end.

e_msg_InnerSyncClients(Msg, TrUserData) ->
    e_msg_InnerSyncClients(Msg, <<>>, TrUserData).


e_msg_InnerSyncClients(#'InnerSyncClients'{clients =
					       F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_InnerSyncClients_clients(TrF1, Bin, TrUserData)
      end
    end.

e_mfield_InnerSyncClients_clients(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_InnerLogin(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_InnerSyncClients_clients([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_InnerSyncClients_clients(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_InnerSyncClients_clients(Rest, Bin3,
				     TrUserData);
e_field_InnerSyncClients_clients([], Bin,
				 _TrUserData) ->
    Bin.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'InnerLogin' -> d_msg_InnerLogin(Bin, TrUserData);
      'InnerLoginReply' ->
	  d_msg_InnerLoginReply(Bin, TrUserData);
      'InnerRegistProxy' ->
	  d_msg_InnerRegistProxy(Bin, TrUserData);
      'InnerLogout' -> d_msg_InnerLogout(Bin, TrUserData);
      'InnerSyncClients' ->
	  d_msg_InnerSyncClients(Bin, TrUserData)
    end.



d_msg_InnerLogin(Bin, TrUserData) ->
    dfp_read_field_def_InnerLogin(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_InnerLogin(<<8, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_InnerLogin_user_id(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData);
dfp_read_field_def_InnerLogin(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_InnerLogin_token(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, TrUserData);
dfp_read_field_def_InnerLogin(<<24, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_InnerLogin_proxy_id(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, TrUserData);
dfp_read_field_def_InnerLogin(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_InnerLogin_ip(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  TrUserData);
dfp_read_field_def_InnerLogin(<<40, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_InnerLogin_login_time(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_InnerLogin(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, _) ->
    #'InnerLogin'{user_id = F1, token = F2, proxy_id = F3,
		  ip = F4, login_time = F5};
dfp_read_field_def_InnerLogin(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, TrUserData) ->
    dg_read_field_def_InnerLogin(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, TrUserData).

dg_read_field_def_InnerLogin(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InnerLogin(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, TrUserData);
dg_read_field_def_InnerLogin(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InnerLogin_user_id(Rest, 0, 0, F1, F2, F3, F4,
				     F5, TrUserData);
      18 ->
	  d_field_InnerLogin_token(Rest, 0, 0, F1, F2, F3, F4, F5,
				   TrUserData);
      24 ->
	  d_field_InnerLogin_proxy_id(Rest, 0, 0, F1, F2, F3, F4,
				      F5, TrUserData);
      34 ->
	  d_field_InnerLogin_ip(Rest, 0, 0, F1, F2, F3, F4, F5,
				TrUserData);
      40 ->
	  d_field_InnerLogin_login_time(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InnerLogin(Rest, 0, 0, F1, F2, F3, F4, F5,
				       TrUserData);
	    1 ->
		skip_64_InnerLogin(Rest, 0, 0, F1, F2, F3, F4, F5,
				   TrUserData);
	    2 ->
		skip_length_delimited_InnerLogin(Rest, 0, 0, F1, F2, F3,
						 F4, F5, TrUserData);
	    5 ->
		skip_32_InnerLogin(Rest, 0, 0, F1, F2, F3, F4, F5,
				   TrUserData)
	  end
    end;
dg_read_field_def_InnerLogin(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, _) ->
    #'InnerLogin'{user_id = F1, token = F2, proxy_id = F3,
		  ip = F4, login_time = F5}.

d_field_InnerLogin_user_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_InnerLogin_user_id(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, TrUserData);
d_field_InnerLogin_user_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerLogin(Rest, 0, 0, NewFValue, F2,
				  F3, F4, F5, TrUserData).


d_field_InnerLogin_token(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_InnerLogin_token(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, TrUserData);
d_field_InnerLogin_token(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_InnerLogin(Rest2, 0, 0, F1,
				  NewFValue, F3, F4, F5, TrUserData).


d_field_InnerLogin_proxy_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_InnerLogin_proxy_id(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, TrUserData);
d_field_InnerLogin_proxy_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerLogin(Rest, 0, 0, F1, F2,
				  NewFValue, F4, F5, TrUserData).


d_field_InnerLogin_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_InnerLogin_ip(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, TrUserData);
d_field_InnerLogin_ip(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, _, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_InnerLogin(Rest2, 0, 0, F1, F2, F3,
				  NewFValue, F5, TrUserData).


d_field_InnerLogin_login_time(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_InnerLogin_login_time(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_InnerLogin_login_time(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerLogin(Rest, 0, 0, F1, F2, F3,
				  F4, NewFValue, TrUserData).


skip_varint_InnerLogin(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_InnerLogin(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   TrUserData);
skip_varint_InnerLogin(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_InnerLogin(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData).


skip_length_delimited_InnerLogin(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_InnerLogin(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5,
				     TrUserData);
skip_length_delimited_InnerLogin(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InnerLogin(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, TrUserData).


skip_32_InnerLogin(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_InnerLogin(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData).


skip_64_InnerLogin(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_InnerLogin(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData).


d_msg_InnerLoginReply(Bin, TrUserData) ->
    dfp_read_field_def_InnerLoginReply(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_InnerLoginReply(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerLoginReply_user_id(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_InnerLoginReply(<<16, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerLoginReply_error_type(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData);
dfp_read_field_def_InnerLoginReply(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerLoginReply_msg(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_InnerLoginReply(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #'InnerLoginReply'{user_id = F1, error_type = F2,
		       msg = F3};
dfp_read_field_def_InnerLoginReply(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_InnerLoginReply(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_InnerLoginReply(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InnerLoginReply(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_InnerLoginReply(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InnerLoginReply_user_id(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      16 ->
	  d_field_InnerLoginReply_error_type(Rest, 0, 0, F1, F2,
					     F3, TrUserData);
      26 ->
	  d_field_InnerLoginReply_msg(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InnerLoginReply(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_InnerLoginReply(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_InnerLoginReply(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    5 ->
		skip_32_InnerLoginReply(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_InnerLoginReply(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #'InnerLoginReply'{user_id = F1, error_type = F2,
		       msg = F3}.

d_field_InnerLoginReply_user_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerLoginReply_user_id(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_InnerLoginReply_user_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerLoginReply(Rest, 0, 0,
				       NewFValue, F2, F3, TrUserData).


d_field_InnerLoginReply_error_type(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerLoginReply_error_type(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_InnerLoginReply_error_type(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerLoginReply(Rest, 0, 0, F1,
				       NewFValue, F3, TrUserData).


d_field_InnerLoginReply_msg(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerLoginReply_msg(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_InnerLoginReply_msg(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_InnerLoginReply(Rest2, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_InnerLoginReply(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_InnerLoginReply(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_InnerLoginReply(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InnerLoginReply(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_InnerLoginReply(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_InnerLoginReply(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_InnerLoginReply(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InnerLoginReply(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_32_InnerLoginReply(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InnerLoginReply(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_InnerLoginReply(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InnerLoginReply(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_InnerRegistProxy(Bin, TrUserData) ->
    dfp_read_field_def_InnerRegistProxy(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_InnerRegistProxy(<<8, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerRegistProxy_id(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_InnerRegistProxy(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerRegistProxy_ip(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_InnerRegistProxy(<<24, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerRegistProxy_port(Rest, Z1, Z2, F1, F2, F3,
				  TrUserData);
dfp_read_field_def_InnerRegistProxy(<<>>, 0, 0, F1, F2,
				    F3, _) ->
    #'InnerRegistProxy'{id = F1, ip = F2, port = F3};
dfp_read_field_def_InnerRegistProxy(Other, Z1, Z2, F1,
				    F2, F3, TrUserData) ->
    dg_read_field_def_InnerRegistProxy(Other, Z1, Z2, F1,
				       F2, F3, TrUserData).

dg_read_field_def_InnerRegistProxy(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InnerRegistProxy(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_InnerRegistProxy(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InnerRegistProxy_id(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      18 ->
	  d_field_InnerRegistProxy_ip(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      24 ->
	  d_field_InnerRegistProxy_port(Rest, 0, 0, F1, F2, F3,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InnerRegistProxy(Rest, 0, 0, F1, F2, F3,
					     TrUserData);
	    1 ->
		skip_64_InnerRegistProxy(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
	    2 ->
		skip_length_delimited_InnerRegistProxy(Rest, 0, 0, F1,
						       F2, F3, TrUserData);
	    5 ->
		skip_32_InnerRegistProxy(Rest, 0, 0, F1, F2, F3,
					 TrUserData)
	  end
    end;
dg_read_field_def_InnerRegistProxy(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #'InnerRegistProxy'{id = F1, ip = F2, port = F3}.

d_field_InnerRegistProxy_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerRegistProxy_id(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_InnerRegistProxy_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerRegistProxy(Rest, 0, 0,
					NewFValue, F2, F3, TrUserData).


d_field_InnerRegistProxy_ip(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerRegistProxy_ip(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_InnerRegistProxy_ip(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_InnerRegistProxy(Rest2, 0, 0, F1,
					NewFValue, F3, TrUserData).


d_field_InnerRegistProxy_port(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerRegistProxy_port(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_InnerRegistProxy_port(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerRegistProxy(Rest, 0, 0, F1, F2,
					NewFValue, TrUserData).


skip_varint_InnerRegistProxy(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_InnerRegistProxy(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
skip_varint_InnerRegistProxy(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InnerRegistProxy(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_length_delimited_InnerRegistProxy(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_InnerRegistProxy(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3,
					   TrUserData);
skip_length_delimited_InnerRegistProxy(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InnerRegistProxy(Rest2, 0, 0, F1, F2,
					F3, TrUserData).


skip_32_InnerRegistProxy(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InnerRegistProxy(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


skip_64_InnerRegistProxy(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InnerRegistProxy(Rest, Z1, Z2, F1,
					F2, F3, TrUserData).


d_msg_InnerLogout(Bin, TrUserData) ->
    dfp_read_field_def_InnerLogout(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_InnerLogout(<<8, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerLogout_user_id(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
dfp_read_field_def_InnerLogout(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerLogout_token(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_InnerLogout(<<24, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, TrUserData) ->
    d_field_InnerLogout_proxy_id(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_InnerLogout(<<>>, 0, 0, F1, F2, F3,
			       _) ->
    #'InnerLogout'{user_id = F1, token = F2, proxy_id = F3};
dfp_read_field_def_InnerLogout(Other, Z1, Z2, F1, F2,
			       F3, TrUserData) ->
    dg_read_field_def_InnerLogout(Other, Z1, Z2, F1, F2, F3,
				  TrUserData).

dg_read_field_def_InnerLogout(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InnerLogout(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_InnerLogout(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_InnerLogout_user_id(Rest, 0, 0, F1, F2, F3,
				      TrUserData);
      18 ->
	  d_field_InnerLogout_token(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      24 ->
	  d_field_InnerLogout_proxy_id(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InnerLogout(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    1 ->
		skip_64_InnerLogout(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_InnerLogout(Rest, 0, 0, F1, F2,
						  F3, TrUserData);
	    5 ->
		skip_32_InnerLogout(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_InnerLogout(<<>>, 0, 0, F1, F2, F3,
			      _) ->
    #'InnerLogout'{user_id = F1, token = F2, proxy_id = F3}.

d_field_InnerLogout_user_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerLogout_user_id(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, TrUserData);
d_field_InnerLogout_user_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerLogout(Rest, 0, 0, NewFValue,
				   F2, F3, TrUserData).


d_field_InnerLogout_token(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerLogout_token(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_InnerLogout_token(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_InnerLogout(Rest2, 0, 0, F1,
				   NewFValue, F3, TrUserData).


d_field_InnerLogout_proxy_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_InnerLogout_proxy_id(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_InnerLogout_proxy_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_InnerLogout(Rest, 0, 0, F1, F2,
				   NewFValue, TrUserData).


skip_varint_InnerLogout(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    skip_varint_InnerLogout(Rest, Z1, Z2, F1, F2, F3,
			    TrUserData);
skip_varint_InnerLogout(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_InnerLogout(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_length_delimited_InnerLogout(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_InnerLogout(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_InnerLogout(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InnerLogout(Rest2, 0, 0, F1, F2, F3,
				   TrUserData).


skip_32_InnerLogout(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_InnerLogout(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


skip_64_InnerLogout(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, TrUserData) ->
    dfp_read_field_def_InnerLogout(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData).


d_msg_InnerSyncClients(Bin, TrUserData) ->
    dfp_read_field_def_InnerSyncClients(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_InnerSyncClients(<<10, Rest/binary>>,
				    Z1, Z2, F1, TrUserData) ->
    d_field_InnerSyncClients_clients(Rest, Z1, Z2, F1,
				     TrUserData);
dfp_read_field_def_InnerSyncClients(<<>>, 0, 0, F1,
				    TrUserData) ->
    #'InnerSyncClients'{clients =
			    lists_reverse(F1, TrUserData)};
dfp_read_field_def_InnerSyncClients(Other, Z1, Z2, F1,
				    TrUserData) ->
    dg_read_field_def_InnerSyncClients(Other, Z1, Z2, F1,
				       TrUserData).

dg_read_field_def_InnerSyncClients(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InnerSyncClients(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
dg_read_field_def_InnerSyncClients(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_InnerSyncClients_clients(Rest, 0, 0, F1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InnerSyncClients(Rest, 0, 0, F1,
					     TrUserData);
	    1 ->
		skip_64_InnerSyncClients(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_InnerSyncClients(Rest, 0, 0, F1,
						       TrUserData);
	    5 ->
		skip_32_InnerSyncClients(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_InnerSyncClients(<<>>, 0, 0, F1,
				   TrUserData) ->
    #'InnerSyncClients'{clients =
			    lists_reverse(F1, TrUserData)}.

d_field_InnerSyncClients_clients(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_InnerSyncClients_clients(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
d_field_InnerSyncClients_clients(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_InnerLogin(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_InnerSyncClients(Rest2, 0, 0,
					cons(NewFValue, F1, TrUserData),
					TrUserData).


skip_varint_InnerSyncClients(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    skip_varint_InnerSyncClients(Rest, Z1, Z2, F1,
				 TrUserData);
skip_varint_InnerSyncClients(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_InnerSyncClients(Rest, Z1, Z2, F1,
					TrUserData).


skip_length_delimited_InnerSyncClients(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_InnerSyncClients(Rest, N + 7,
					   X bsl N + Acc, F1, TrUserData);
skip_length_delimited_InnerSyncClients(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InnerSyncClients(Rest2, 0, 0, F1,
					TrUserData).


skip_32_InnerSyncClients(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_InnerSyncClients(Rest, Z1, Z2, F1,
					TrUserData).


skip_64_InnerSyncClients(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, TrUserData) ->
    dfp_read_field_def_InnerSyncClients(Rest, Z1, Z2, F1,
					TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'InnerLogin'{} ->
	  merge_msg_InnerLogin(Prev, New, TrUserData);
      #'InnerLoginReply'{} ->
	  merge_msg_InnerLoginReply(Prev, New, TrUserData);
      #'InnerRegistProxy'{} ->
	  merge_msg_InnerRegistProxy(Prev, New, TrUserData);
      #'InnerLogout'{} ->
	  merge_msg_InnerLogout(Prev, New, TrUserData);
      #'InnerSyncClients'{} ->
	  merge_msg_InnerSyncClients(Prev, New, TrUserData)
    end.

merge_msg_InnerLogin(#'InnerLogin'{},
		     #'InnerLogin'{user_id = NFuser_id, token = NFtoken,
				   proxy_id = NFproxy_id, ip = NFip,
				   login_time = NFlogin_time},
		     _) ->
    #'InnerLogin'{user_id = NFuser_id, token = NFtoken,
		  proxy_id = NFproxy_id, ip = NFip,
		  login_time = NFlogin_time}.

merge_msg_InnerLoginReply(#'InnerLoginReply'{},
			  #'InnerLoginReply'{user_id = NFuser_id,
					     error_type = NFerror_type,
					     msg = NFmsg},
			  _) ->
    #'InnerLoginReply'{user_id = NFuser_id,
		       error_type = NFerror_type, msg = NFmsg}.

merge_msg_InnerRegistProxy(#'InnerRegistProxy'{},
			   #'InnerRegistProxy'{id = NFid, ip = NFip,
					       port = NFport},
			   _) ->
    #'InnerRegistProxy'{id = NFid, ip = NFip,
			port = NFport}.

merge_msg_InnerLogout(#'InnerLogout'{},
		      #'InnerLogout'{user_id = NFuser_id, token = NFtoken,
				     proxy_id = NFproxy_id},
		      _) ->
    #'InnerLogout'{user_id = NFuser_id, token = NFtoken,
		   proxy_id = NFproxy_id}.

merge_msg_InnerSyncClients(#'InnerSyncClients'{clients =
						   PFclients},
			   #'InnerSyncClients'{clients = NFclients},
			   TrUserData) ->
    #'InnerSyncClients'{clients =
			    'erlang_++'(PFclients, NFclients, TrUserData)}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'InnerLogin'{} ->
	  v_msg_InnerLogin(Msg, ['InnerLogin'], TrUserData);
      #'InnerLoginReply'{} ->
	  v_msg_InnerLoginReply(Msg, ['InnerLoginReply'],
				TrUserData);
      #'InnerRegistProxy'{} ->
	  v_msg_InnerRegistProxy(Msg, ['InnerRegistProxy'],
				 TrUserData);
      #'InnerLogout'{} ->
	  v_msg_InnerLogout(Msg, ['InnerLogout'], TrUserData);
      #'InnerSyncClients'{} ->
	  v_msg_InnerSyncClients(Msg, ['InnerSyncClients'],
				 TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_InnerLogin/3}).
v_msg_InnerLogin(#'InnerLogin'{user_id = F1, token = F2,
			       proxy_id = F3, ip = F4, login_time = F5},
		 Path, _) ->
    v_type_int32(F1, [user_id | Path]),
    v_type_string(F2, [token | Path]),
    v_type_int32(F3, [proxy_id | Path]),
    v_type_string(F4, [ip | Path]),
    v_type_int32(F5, [login_time | Path]),
    ok;
v_msg_InnerLogin(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InnerLogin'}, X, Path).

-dialyzer({nowarn_function,v_msg_InnerLoginReply/3}).
v_msg_InnerLoginReply(#'InnerLoginReply'{user_id = F1,
					 error_type = F2, msg = F3},
		      Path, _) ->
    v_type_int32(F1, [user_id | Path]),
    v_type_int32(F2, [error_type | Path]),
    v_type_string(F3, [msg | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_InnerRegistProxy/3}).
v_msg_InnerRegistProxy(#'InnerRegistProxy'{id = F1,
					   ip = F2, port = F3},
		       Path, _) ->
    v_type_int32(F1, [id | Path]),
    v_type_string(F2, [ip | Path]),
    v_type_int32(F3, [port | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_InnerLogout/3}).
v_msg_InnerLogout(#'InnerLogout'{user_id = F1,
				 token = F2, proxy_id = F3},
		  Path, _) ->
    v_type_int32(F1, [user_id | Path]),
    v_type_string(F2, [token | Path]),
    v_type_int32(F3, [proxy_id | Path]),
    ok.

-dialyzer({nowarn_function,v_msg_InnerSyncClients/3}).
v_msg_InnerSyncClients(#'InnerSyncClients'{clients =
					       F1},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_InnerLogin(Elem, [clients | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'InnerLogin'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.



get_msg_defs() ->
    [{{msg, 'InnerLogin'},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = token, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = proxy_id, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = ip, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = login_time, fnum = 5, rnum = 6,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'InnerLoginReply'},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = error_type, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = msg, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'InnerRegistProxy'},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = port, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'InnerLogout'},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = token, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = proxy_id, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'InnerSyncClients'},
      [#field{name = clients, fnum = 1, rnum = 2,
	      type = {msg, 'InnerLogin'}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() ->
    ['InnerLogin', 'InnerLoginReply', 'InnerRegistProxy',
     'InnerLogout', 'InnerSyncClients'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('InnerLogin') ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = token, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = proxy_id, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = ip, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = login_time, fnum = 5, rnum = 6,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('InnerLoginReply') ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = error_type, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = msg, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def('InnerRegistProxy') ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = port, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('InnerLogout') ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = token, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = proxy_id, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('InnerSyncClients') ->
    [#field{name = clients, fnum = 1, rnum = 2,
	    type = {msg, 'InnerLogin'}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'framework.innermsg'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
