%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(msg_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("msg_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Login'() :: #'Login'{}.
-type 'RpcPackage'() :: #'RpcPackage'{}.
-type 'TestMsg'() :: #'TestMsg'{}.
-export_type(['Login'/0, 'RpcPackage'/0, 'TestMsg'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Login'{} -> e_msg_Login(Msg, TrUserData);
      #'RpcPackage'{} -> e_msg_RpcPackage(Msg, TrUserData);
      #'TestMsg'{} -> e_msg_TestMsg(Msg, TrUserData)
    end.



e_msg_Login(Msg, TrUserData) ->
    e_msg_Login(Msg, <<>>, TrUserData).


e_msg_Login(#'Login'{uid = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_RpcPackage(Msg, TrUserData) ->
    e_msg_RpcPackage(Msg, <<>>, TrUserData).


e_msg_RpcPackage(#'RpcPackage'{key = F1, payload = F2},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= <<>> -> B1;
		true -> e_type_bytes(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_TestMsg(Msg, TrUserData) ->
    e_msg_TestMsg(Msg, <<>>, TrUserData).


e_msg_TestMsg(#'TestMsg'{name = F1, nick_name = F2,
			 phone = F3},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Login' -> d_msg_Login(Bin, TrUserData);
      'RpcPackage' -> d_msg_RpcPackage(Bin, TrUserData);
      'TestMsg' -> d_msg_TestMsg(Bin, TrUserData)
    end.



d_msg_Login(Bin, TrUserData) ->
    dfp_read_field_def_Login(Bin, 0, 0, id(0, TrUserData),
			     TrUserData).

dfp_read_field_def_Login(<<8, Rest/binary>>, Z1, Z2, F1,
			 TrUserData) ->
    d_field_Login_uid(Rest, Z1, Z2, F1, TrUserData);
dfp_read_field_def_Login(<<>>, 0, 0, F1, _) ->
    #'Login'{uid = F1};
dfp_read_field_def_Login(Other, Z1, Z2, F1,
			 TrUserData) ->
    dg_read_field_def_Login(Other, Z1, Z2, F1, TrUserData).

dg_read_field_def_Login(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Login(Rest, N + 7, X bsl N + Acc, F1,
			    TrUserData);
dg_read_field_def_Login(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Login_uid(Rest, 0, 0, F1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Login(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_Login(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_Login(Rest, 0, 0, F1, TrUserData);
	    5 -> skip_32_Login(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_Login(<<>>, 0, 0, F1, _) ->
    #'Login'{uid = F1}.

d_field_Login_uid(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  TrUserData)
    when N < 57 ->
    d_field_Login_uid(Rest, N + 7, X bsl N + Acc, F1,
		      TrUserData);
d_field_Login_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Login(Rest, 0, 0, NewFValue,
			     TrUserData).


skip_varint_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    skip_varint_Login(Rest, Z1, Z2, F1, TrUserData);
skip_varint_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F1, TrUserData).


skip_length_delimited_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Login(Rest, N + 7, X bsl N + Acc,
				F1, TrUserData);
skip_length_delimited_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Login(Rest2, 0, 0, F1, TrUserData).


skip_32_Login(<<_:32, Rest/binary>>, Z1, Z2, F1,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F1, TrUserData).


skip_64_Login(<<_:64, Rest/binary>>, Z1, Z2, F1,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F1, TrUserData).


d_msg_RpcPackage(Bin, TrUserData) ->
    dfp_read_field_def_RpcPackage(Bin, 0, 0,
				  id(<<>>, TrUserData), id(<<>>, TrUserData),
				  TrUserData).

dfp_read_field_def_RpcPackage(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_RpcPackage_key(Rest, Z1, Z2, F1, F2,
			   TrUserData);
dfp_read_field_def_RpcPackage(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    d_field_RpcPackage_payload(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_RpcPackage(<<>>, 0, 0, F1, F2, _) ->
    #'RpcPackage'{key = F1, payload = F2};
dfp_read_field_def_RpcPackage(Other, Z1, Z2, F1, F2,
			      TrUserData) ->
    dg_read_field_def_RpcPackage(Other, Z1, Z2, F1, F2,
				 TrUserData).

dg_read_field_def_RpcPackage(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RpcPackage(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
dg_read_field_def_RpcPackage(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RpcPackage_key(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_RpcPackage_payload(Rest, 0, 0, F1, F2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RpcPackage(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_RpcPackage(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_RpcPackage(Rest, 0, 0, F1, F2,
						 TrUserData);
	    5 -> skip_32_RpcPackage(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_RpcPackage(<<>>, 0, 0, F1, F2, _) ->
    #'RpcPackage'{key = F1, payload = F2}.

d_field_RpcPackage_key(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RpcPackage_key(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
d_field_RpcPackage_key(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RpcPackage(Rest2, 0, 0, NewFValue,
				  F2, TrUserData).


d_field_RpcPackage_payload(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_RpcPackage_payload(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_RpcPackage_payload(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_RpcPackage(Rest2, 0, 0, F1,
				  NewFValue, TrUserData).


skip_varint_RpcPackage(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    skip_varint_RpcPackage(Rest, Z1, Z2, F1, F2,
			   TrUserData);
skip_varint_RpcPackage(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_RpcPackage(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_length_delimited_RpcPackage(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RpcPackage(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_RpcPackage(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RpcPackage(Rest2, 0, 0, F1, F2,
				  TrUserData).


skip_32_RpcPackage(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_RpcPackage(Rest, Z1, Z2, F1, F2,
				  TrUserData).


skip_64_RpcPackage(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, TrUserData) ->
    dfp_read_field_def_RpcPackage(Rest, Z1, Z2, F1, F2,
				  TrUserData).


d_msg_TestMsg(Bin, TrUserData) ->
    dfp_read_field_def_TestMsg(Bin, 0, 0,
			       id(<<>>, TrUserData), id(<<>>, TrUserData),
			       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_TestMsg(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_TestMsg_name(Rest, Z1, Z2, F1, F2, F3,
			 TrUserData);
dfp_read_field_def_TestMsg(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_TestMsg_nick_name(Rest, Z1, Z2, F1, F2, F3,
			      TrUserData);
dfp_read_field_def_TestMsg(<<26, Rest/binary>>, Z1, Z2,
			   F1, F2, F3, TrUserData) ->
    d_field_TestMsg_phone(Rest, Z1, Z2, F1, F2, F3,
			  TrUserData);
dfp_read_field_def_TestMsg(<<>>, 0, 0, F1, F2, F3, _) ->
    #'TestMsg'{name = F1, nick_name = F2, phone = F3};
dfp_read_field_def_TestMsg(Other, Z1, Z2, F1, F2, F3,
			   TrUserData) ->
    dg_read_field_def_TestMsg(Other, Z1, Z2, F1, F2, F3,
			      TrUserData).

dg_read_field_def_TestMsg(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TestMsg(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
dg_read_field_def_TestMsg(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TestMsg_name(Rest, 0, 0, F1, F2, F3,
			       TrUserData);
      18 ->
	  d_field_TestMsg_nick_name(Rest, 0, 0, F1, F2, F3,
				    TrUserData);
      26 ->
	  d_field_TestMsg_phone(Rest, 0, 0, F1, F2, F3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TestMsg(Rest, 0, 0, F1, F2, F3, TrUserData);
	    1 ->
		skip_64_TestMsg(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_TestMsg(Rest, 0, 0, F1, F2, F3,
					      TrUserData);
	    5 -> skip_32_TestMsg(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_TestMsg(<<>>, 0, 0, F1, F2, F3, _) ->
    #'TestMsg'{name = F1, nick_name = F2, phone = F3}.

d_field_TestMsg_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_TestMsg_name(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, TrUserData);
d_field_TestMsg_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TestMsg(Rest2, 0, 0, NewFValue, F2,
			       F3, TrUserData).


d_field_TestMsg_nick_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_TestMsg_nick_name(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, TrUserData);
d_field_TestMsg_nick_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TestMsg(Rest2, 0, 0, F1, NewFValue,
			       F3, TrUserData).


d_field_TestMsg_phone(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_TestMsg_phone(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, TrUserData);
d_field_TestMsg_phone(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TestMsg(Rest2, 0, 0, F1, F2,
			       NewFValue, TrUserData).


skip_varint_TestMsg(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, TrUserData) ->
    skip_varint_TestMsg(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
skip_varint_TestMsg(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3, TrUserData) ->
    dfp_read_field_def_TestMsg(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


skip_length_delimited_TestMsg(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_TestMsg(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_TestMsg(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestMsg(Rest2, 0, 0, F1, F2, F3,
			       TrUserData).


skip_32_TestMsg(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3, TrUserData) ->
    dfp_read_field_def_TestMsg(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).


skip_64_TestMsg(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3, TrUserData) ->
    dfp_read_field_def_TestMsg(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'Login'{} -> merge_msg_Login(Prev, New, TrUserData);
      #'RpcPackage'{} ->
	  merge_msg_RpcPackage(Prev, New, TrUserData);
      #'TestMsg'{} -> merge_msg_TestMsg(Prev, New, TrUserData)
    end.

merge_msg_Login(#'Login'{uid = PFuid},
		#'Login'{uid = NFuid}, _) ->
    #'Login'{uid =
		 if NFuid =:= undefined -> PFuid;
		    true -> NFuid
		 end}.

merge_msg_RpcPackage(#'RpcPackage'{key = PFkey,
				   payload = PFpayload},
		     #'RpcPackage'{key = NFkey, payload = NFpayload}, _) ->
    #'RpcPackage'{key =
		      if NFkey =:= undefined -> PFkey;
			 true -> NFkey
		      end,
		  payload =
		      if NFpayload =:= undefined -> PFpayload;
			 true -> NFpayload
		      end}.

merge_msg_TestMsg(#'TestMsg'{name = PFname,
			     nick_name = PFnick_name, phone = PFphone},
		  #'TestMsg'{name = NFname, nick_name = NFnick_name,
			     phone = NFphone},
		  _) ->
    #'TestMsg'{name =
		   if NFname =:= undefined -> PFname;
		      true -> NFname
		   end,
	       nick_name =
		   if NFnick_name =:= undefined -> PFnick_name;
		      true -> NFnick_name
		   end,
	       phone =
		   if NFphone =:= undefined -> PFphone;
		      true -> NFphone
		   end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'Login'{} -> v_msg_Login(Msg, ['Login'], TrUserData);
      #'RpcPackage'{} ->
	  v_msg_RpcPackage(Msg, ['RpcPackage'], TrUserData);
      #'TestMsg'{} ->
	  v_msg_TestMsg(Msg, ['TestMsg'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_Login/3}).
v_msg_Login(#'Login'{uid = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [uid | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_RpcPackage/3}).
v_msg_RpcPackage(#'RpcPackage'{key = F1, payload = F2},
		 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_TestMsg/3}).
v_msg_TestMsg(#'TestMsg'{name = F1, nick_name = F2,
			 phone = F3},
	      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [nick_name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [phone | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, 'Login'},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'RpcPackage'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = payload, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'TestMsg'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = nick_name, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = phone, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]}].


get_msg_names() -> ['Login', 'RpcPackage', 'TestMsg'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Login') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('RpcPackage') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = payload, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('TestMsg') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = nick_name, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = phone, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> msg.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
