%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(gateway_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("gateway_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'UserLoginOtherPlace'() :: #'UserLoginOtherPlace'{}.
-type 'GsHalt'() :: #'GsHalt'{}.
-type 'ClientLogoutReq'() :: #'ClientLogoutReq'{}.
-type 'ReportServerInfo'() :: #'ReportServerInfo'{}.
-type 'ClientLoginReq'() :: #'ClientLoginReq'{}.
-type 'Gateway'() :: #'Gateway'{}.
-export_type(['UserLoginOtherPlace'/0, 'GsHalt'/0, 'ClientLogoutReq'/0, 'ReportServerInfo'/0, 'ClientLoginReq'/0, 'Gateway'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'UserLoginOtherPlace'{} ->
	  e_msg_UserLoginOtherPlace(Msg, TrUserData);
      #'GsHalt'{} -> e_msg_GsHalt(Msg, TrUserData);
      #'ClientLogoutReq'{} ->
	  e_msg_ClientLogoutReq(Msg, TrUserData);
      #'ReportServerInfo'{} ->
	  e_msg_ReportServerInfo(Msg, TrUserData);
      #'ClientLoginReq'{} ->
	  e_msg_ClientLoginReq(Msg, TrUserData);
      #'Gateway'{} -> e_msg_Gateway(Msg, TrUserData)
    end.



e_msg_UserLoginOtherPlace(Msg, TrUserData) ->
    e_msg_UserLoginOtherPlace(Msg, <<>>, TrUserData).


e_msg_UserLoginOtherPlace(#'UserLoginOtherPlace'{uid =
						     F1},
			  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>)
	   end
    end.

e_msg_GsHalt(Msg, TrUserData) ->
    e_msg_GsHalt(Msg, <<>>, TrUserData).


e_msg_GsHalt(#'GsHalt'{serverType = F1, serverID = F2},
	     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_ClientLogoutReq(Msg, TrUserData) ->
    e_msg_ClientLogoutReq(Msg, <<>>, TrUserData).


e_msg_ClientLogoutReq(#'ClientLogoutReq'{uid = F1,
					 serverID = F2},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>)
	   end
    end.

e_msg_ReportServerInfo(Msg, TrUserData) ->
    e_msg_ReportServerInfo(Msg, <<>>, TrUserData).


e_msg_ReportServerInfo(#'ReportServerInfo'{serverType =
					       F1,
					   serverID = F2, serverURI = F3,
					   max = F4},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_int32(TrF4, <<B3/binary, 32>>)
	   end
    end.

e_msg_ClientLoginReq(Msg, TrUserData) ->
    e_msg_ClientLoginReq(Msg, <<>>, TrUserData).


e_msg_ClientLoginReq(#'ClientLoginReq'{uid = F1,
				       server_type = F2, server_id = F3,
				       gateway_id = F4},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_string(TrF4, <<B3/binary, 34>>)
	   end
    end.

e_msg_Gateway(Msg, TrUserData) ->
    e_msg_Gateway(Msg, <<>>, TrUserData).


e_msg_Gateway(#'Gateway'{gateway_id = F1, ws_addr = F2},
	      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'UserLoginOtherPlace' ->
	  d_msg_UserLoginOtherPlace(Bin, TrUserData);
      'GsHalt' -> d_msg_GsHalt(Bin, TrUserData);
      'ClientLogoutReq' ->
	  d_msg_ClientLogoutReq(Bin, TrUserData);
      'ReportServerInfo' ->
	  d_msg_ReportServerInfo(Bin, TrUserData);
      'ClientLoginReq' ->
	  d_msg_ClientLoginReq(Bin, TrUserData);
      'Gateway' -> d_msg_Gateway(Bin, TrUserData)
    end.



d_msg_UserLoginOtherPlace(Bin, TrUserData) ->
    dfp_read_field_def_UserLoginOtherPlace(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_UserLoginOtherPlace(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, TrUserData) ->
    d_field_UserLoginOtherPlace_uid(Rest, Z1, Z2, F1,
				    TrUserData);
dfp_read_field_def_UserLoginOtherPlace(<<>>, 0, 0, F1,
				       _) ->
    #'UserLoginOtherPlace'{uid = F1};
dfp_read_field_def_UserLoginOtherPlace(Other, Z1, Z2,
				       F1, TrUserData) ->
    dg_read_field_def_UserLoginOtherPlace(Other, Z1, Z2, F1,
					  TrUserData).

dg_read_field_def_UserLoginOtherPlace(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UserLoginOtherPlace(Rest, N + 7,
					  X bsl N + Acc, F1, TrUserData);
dg_read_field_def_UserLoginOtherPlace(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_UserLoginOtherPlace_uid(Rest, 0, 0, F1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UserLoginOtherPlace(Rest, 0, 0, F1,
						TrUserData);
	    1 ->
		skip_64_UserLoginOtherPlace(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_UserLoginOtherPlace(Rest, 0, 0,
							  F1, TrUserData);
	    5 ->
		skip_32_UserLoginOtherPlace(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_UserLoginOtherPlace(<<>>, 0, 0, F1,
				      _) ->
    #'UserLoginOtherPlace'{uid = F1}.

d_field_UserLoginOtherPlace_uid(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_UserLoginOtherPlace_uid(Rest, N + 7,
				    X bsl N + Acc, F1, TrUserData);
d_field_UserLoginOtherPlace_uid(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_UserLoginOtherPlace(Rest2, 0, 0,
					   NewFValue, TrUserData).


skip_varint_UserLoginOtherPlace(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    skip_varint_UserLoginOtherPlace(Rest, Z1, Z2, F1,
				    TrUserData);
skip_varint_UserLoginOtherPlace(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_UserLoginOtherPlace(Rest, Z1, Z2, F1,
					   TrUserData).


skip_length_delimited_UserLoginOtherPlace(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_UserLoginOtherPlace(Rest, N + 7,
					      X bsl N + Acc, F1, TrUserData);
skip_length_delimited_UserLoginOtherPlace(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserLoginOtherPlace(Rest2, 0, 0, F1,
					   TrUserData).


skip_32_UserLoginOtherPlace(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_UserLoginOtherPlace(Rest, Z1, Z2, F1,
					   TrUserData).


skip_64_UserLoginOtherPlace(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, TrUserData) ->
    dfp_read_field_def_UserLoginOtherPlace(Rest, Z1, Z2, F1,
					   TrUserData).


d_msg_GsHalt(Bin, TrUserData) ->
    dfp_read_field_def_GsHalt(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GsHalt(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    d_field_GsHalt_serverType(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_GsHalt(<<18, Rest/binary>>, Z1, Z2,
			  F1, F2, TrUserData) ->
    d_field_GsHalt_serverID(Rest, Z1, Z2, F1, F2,
			    TrUserData);
dfp_read_field_def_GsHalt(<<>>, 0, 0, F1, F2, _) ->
    #'GsHalt'{serverType = F1, serverID = F2};
dfp_read_field_def_GsHalt(Other, Z1, Z2, F1, F2,
			  TrUserData) ->
    dg_read_field_def_GsHalt(Other, Z1, Z2, F1, F2,
			     TrUserData).

dg_read_field_def_GsHalt(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GsHalt(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
dg_read_field_def_GsHalt(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GsHalt_serverType(Rest, 0, 0, F1, F2,
				    TrUserData);
      18 ->
	  d_field_GsHalt_serverID(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_GsHalt(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_GsHalt(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_GsHalt(Rest, 0, 0, F1, F2,
					     TrUserData);
	    5 -> skip_32_GsHalt(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_GsHalt(<<>>, 0, 0, F1, F2, _) ->
    #'GsHalt'{serverType = F1, serverID = F2}.

d_field_GsHalt_serverType(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_GsHalt_serverType(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_GsHalt_serverType(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GsHalt(Rest2, 0, 0, NewFValue, F2,
			      TrUserData).


d_field_GsHalt_serverID(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_GsHalt_serverID(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
d_field_GsHalt_serverID(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GsHalt(Rest2, 0, 0, F1, NewFValue,
			      TrUserData).


skip_varint_GsHalt(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, TrUserData) ->
    skip_varint_GsHalt(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_GsHalt(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, TrUserData) ->
    dfp_read_field_def_GsHalt(Rest, Z1, Z2, F1, F2,
			      TrUserData).


skip_length_delimited_GsHalt(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_GsHalt(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
skip_length_delimited_GsHalt(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GsHalt(Rest2, 0, 0, F1, F2,
			      TrUserData).


skip_32_GsHalt(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       TrUserData) ->
    dfp_read_field_def_GsHalt(Rest, Z1, Z2, F1, F2,
			      TrUserData).


skip_64_GsHalt(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       TrUserData) ->
    dfp_read_field_def_GsHalt(Rest, Z1, Z2, F1, F2,
			      TrUserData).


d_msg_ClientLogoutReq(Bin, TrUserData) ->
    dfp_read_field_def_ClientLogoutReq(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ClientLogoutReq(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_ClientLogoutReq_uid(Rest, Z1, Z2, F1, F2,
				TrUserData);
dfp_read_field_def_ClientLogoutReq(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, TrUserData) ->
    d_field_ClientLogoutReq_serverID(Rest, Z1, Z2, F1, F2,
				     TrUserData);
dfp_read_field_def_ClientLogoutReq(<<>>, 0, 0, F1, F2,
				   _) ->
    #'ClientLogoutReq'{uid = F1, serverID = F2};
dfp_read_field_def_ClientLogoutReq(Other, Z1, Z2, F1,
				   F2, TrUserData) ->
    dg_read_field_def_ClientLogoutReq(Other, Z1, Z2, F1, F2,
				      TrUserData).

dg_read_field_def_ClientLogoutReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ClientLogoutReq(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_ClientLogoutReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ClientLogoutReq_uid(Rest, 0, 0, F1, F2,
				      TrUserData);
      18 ->
	  d_field_ClientLogoutReq_serverID(Rest, 0, 0, F1, F2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ClientLogoutReq(Rest, 0, 0, F1, F2,
					    TrUserData);
	    1 ->
		skip_64_ClientLogoutReq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_ClientLogoutReq(Rest, 0, 0, F1,
						      F2, TrUserData);
	    5 ->
		skip_32_ClientLogoutReq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_ClientLogoutReq(<<>>, 0, 0, F1, F2,
				  _) ->
    #'ClientLogoutReq'{uid = F1, serverID = F2}.

d_field_ClientLogoutReq_uid(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ClientLogoutReq_uid(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
d_field_ClientLogoutReq_uid(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ClientLogoutReq(Rest2, 0, 0,
				       NewFValue, F2, TrUserData).


d_field_ClientLogoutReq_serverID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_ClientLogoutReq_serverID(Rest, N + 7,
				     X bsl N + Acc, F1, F2, TrUserData);
d_field_ClientLogoutReq_serverID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ClientLogoutReq(Rest2, 0, 0, F1,
				       NewFValue, TrUserData).


skip_varint_ClientLogoutReq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    skip_varint_ClientLogoutReq(Rest, Z1, Z2, F1, F2,
				TrUserData);
skip_varint_ClientLogoutReq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_ClientLogoutReq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_length_delimited_ClientLogoutReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ClientLogoutReq(Rest, N + 7,
					  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_ClientLogoutReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClientLogoutReq(Rest2, 0, 0, F1, F2,
				       TrUserData).


skip_32_ClientLogoutReq(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_ClientLogoutReq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


skip_64_ClientLogoutReq(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, TrUserData) ->
    dfp_read_field_def_ClientLogoutReq(Rest, Z1, Z2, F1, F2,
				       TrUserData).


d_msg_ReportServerInfo(Bin, TrUserData) ->
    dfp_read_field_def_ReportServerInfo(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ReportServerInfo(<<10, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ReportServerInfo_serverType(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData);
dfp_read_field_def_ReportServerInfo(<<18, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ReportServerInfo_serverID(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData);
dfp_read_field_def_ReportServerInfo(<<26, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ReportServerInfo_serverURI(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData);
dfp_read_field_def_ReportServerInfo(<<32, Rest/binary>>,
				    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ReportServerInfo_max(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
dfp_read_field_def_ReportServerInfo(<<>>, 0, 0, F1, F2,
				    F3, F4, _) ->
    #'ReportServerInfo'{serverType = F1, serverID = F2,
			serverURI = F3, max = F4};
dfp_read_field_def_ReportServerInfo(Other, Z1, Z2, F1,
				    F2, F3, F4, TrUserData) ->
    dg_read_field_def_ReportServerInfo(Other, Z1, Z2, F1,
				       F2, F3, F4, TrUserData).

dg_read_field_def_ReportServerInfo(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReportServerInfo(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
dg_read_field_def_ReportServerInfo(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ReportServerInfo_serverType(Rest, 0, 0, F1, F2,
					      F3, F4, TrUserData);
      18 ->
	  d_field_ReportServerInfo_serverID(Rest, 0, 0, F1, F2,
					    F3, F4, TrUserData);
      26 ->
	  d_field_ReportServerInfo_serverURI(Rest, 0, 0, F1, F2,
					     F3, F4, TrUserData);
      32 ->
	  d_field_ReportServerInfo_max(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ReportServerInfo(Rest, 0, 0, F1, F2, F3, F4,
					     TrUserData);
	    1 ->
		skip_64_ReportServerInfo(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData);
	    2 ->
		skip_length_delimited_ReportServerInfo(Rest, 0, 0, F1,
						       F2, F3, F4, TrUserData);
	    5 ->
		skip_32_ReportServerInfo(Rest, 0, 0, F1, F2, F3, F4,
					 TrUserData)
	  end
    end;
dg_read_field_def_ReportServerInfo(<<>>, 0, 0, F1, F2,
				   F3, F4, _) ->
    #'ReportServerInfo'{serverType = F1, serverID = F2,
			serverURI = F3, max = F4}.

d_field_ReportServerInfo_serverType(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_serverType(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4,
					TrUserData);
d_field_ReportServerInfo_serverType(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0,
					NewFValue, F2, F3, F4, TrUserData).


d_field_ReportServerInfo_serverID(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_serverID(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
d_field_ReportServerInfo_serverID(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0, F1,
					NewFValue, F3, F4, TrUserData).


d_field_ReportServerInfo_serverURI(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_serverURI(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
d_field_ReportServerInfo_serverURI(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0, F1, F2,
					NewFValue, F4, TrUserData).


d_field_ReportServerInfo_max(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ReportServerInfo_max(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, TrUserData);
d_field_ReportServerInfo_max(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, _, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ReportServerInfo(Rest, 0, 0, F1, F2,
					F3, NewFValue, TrUserData).


skip_varint_ReportServerInfo(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_ReportServerInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, TrUserData);
skip_varint_ReportServerInfo(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ReportServerInfo(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_length_delimited_ReportServerInfo(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReportServerInfo(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4,
					   TrUserData);
skip_length_delimited_ReportServerInfo(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReportServerInfo(Rest2, 0, 0, F1, F2,
					F3, F4, TrUserData).


skip_32_ReportServerInfo(<<_:32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ReportServerInfo(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


skip_64_ReportServerInfo(<<_:64, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ReportServerInfo(Rest, Z1, Z2, F1,
					F2, F3, F4, TrUserData).


d_msg_ClientLoginReq(Bin, TrUserData) ->
    dfp_read_field_def_ClientLoginReq(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ClientLoginReq(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ClientLoginReq_uid(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData);
dfp_read_field_def_ClientLoginReq(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ClientLoginReq_server_type(Rest, Z1, Z2, F1, F2,
				       F3, F4, TrUserData);
dfp_read_field_def_ClientLoginReq(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ClientLoginReq_server_id(Rest, Z1, Z2, F1, F2,
				     F3, F4, TrUserData);
dfp_read_field_def_ClientLoginReq(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    d_field_ClientLoginReq_gateway_id(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData);
dfp_read_field_def_ClientLoginReq(<<>>, 0, 0, F1, F2,
				  F3, F4, _) ->
    #'ClientLoginReq'{uid = F1, server_type = F2,
		      server_id = F3, gateway_id = F4};
dfp_read_field_def_ClientLoginReq(Other, Z1, Z2, F1, F2,
				  F3, F4, TrUserData) ->
    dg_read_field_def_ClientLoginReq(Other, Z1, Z2, F1, F2,
				     F3, F4, TrUserData).

dg_read_field_def_ClientLoginReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ClientLoginReq(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_ClientLoginReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ClientLoginReq_uid(Rest, 0, 0, F1, F2, F3, F4,
				     TrUserData);
      18 ->
	  d_field_ClientLoginReq_server_type(Rest, 0, 0, F1, F2,
					     F3, F4, TrUserData);
      26 ->
	  d_field_ClientLoginReq_server_id(Rest, 0, 0, F1, F2, F3,
					   F4, TrUserData);
      34 ->
	  d_field_ClientLoginReq_gateway_id(Rest, 0, 0, F1, F2,
					    F3, F4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ClientLoginReq(Rest, 0, 0, F1, F2, F3, F4,
					   TrUserData);
	    1 ->
		skip_64_ClientLoginReq(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData);
	    2 ->
		skip_length_delimited_ClientLoginReq(Rest, 0, 0, F1, F2,
						     F3, F4, TrUserData);
	    5 ->
		skip_32_ClientLoginReq(Rest, 0, 0, F1, F2, F3, F4,
				       TrUserData)
	  end
    end;
dg_read_field_def_ClientLoginReq(<<>>, 0, 0, F1, F2, F3,
				 F4, _) ->
    #'ClientLoginReq'{uid = F1, server_type = F2,
		      server_id = F3, gateway_id = F4}.

d_field_ClientLoginReq_uid(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ClientLoginReq_uid(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, TrUserData);
d_field_ClientLoginReq_uid(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ClientLoginReq(Rest2, 0, 0,
				      NewFValue, F2, F3, F4, TrUserData).


d_field_ClientLoginReq_server_type(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ClientLoginReq_server_type(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4,
				       TrUserData);
d_field_ClientLoginReq_server_type(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, _, F3, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ClientLoginReq(Rest2, 0, 0, F1,
				      NewFValue, F3, F4, TrUserData).


d_field_ClientLoginReq_server_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ClientLoginReq_server_id(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_ClientLoginReq_server_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, _, F4, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ClientLoginReq(Rest2, 0, 0, F1, F2,
				      NewFValue, F4, TrUserData).


d_field_ClientLoginReq_gateway_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    d_field_ClientLoginReq_gateway_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4,
				      TrUserData);
d_field_ClientLoginReq_gateway_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ClientLoginReq(Rest2, 0, 0, F1, F2,
				      F3, NewFValue, TrUserData).


skip_varint_ClientLoginReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    skip_varint_ClientLoginReq(Rest, Z1, Z2, F1, F2, F3, F4,
			       TrUserData);
skip_varint_ClientLoginReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ClientLoginReq(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


skip_length_delimited_ClientLoginReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ClientLoginReq(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4,
					 TrUserData);
skip_length_delimited_ClientLoginReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClientLoginReq(Rest2, 0, 0, F1, F2,
				      F3, F4, TrUserData).


skip_32_ClientLoginReq(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ClientLoginReq(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


skip_64_ClientLoginReq(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, TrUserData) ->
    dfp_read_field_def_ClientLoginReq(Rest, Z1, Z2, F1, F2,
				      F3, F4, TrUserData).


d_msg_Gateway(Bin, TrUserData) ->
    dfp_read_field_def_Gateway(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Gateway(<<8, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_Gateway_gateway_id(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_Gateway(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, TrUserData) ->
    d_field_Gateway_ws_addr(Rest, Z1, Z2, F1, F2,
			    TrUserData);
dfp_read_field_def_Gateway(<<>>, 0, 0, F1, F2, _) ->
    #'Gateway'{gateway_id = F1, ws_addr = F2};
dfp_read_field_def_Gateway(Other, Z1, Z2, F1, F2,
			   TrUserData) ->
    dg_read_field_def_Gateway(Other, Z1, Z2, F1, F2,
			      TrUserData).

dg_read_field_def_Gateway(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Gateway(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
dg_read_field_def_Gateway(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Gateway_gateway_id(Rest, 0, 0, F1, F2,
				     TrUserData);
      18 ->
	  d_field_Gateway_ws_addr(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Gateway(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_Gateway(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_Gateway(Rest, 0, 0, F1, F2,
					      TrUserData);
	    5 -> skip_32_Gateway(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_Gateway(<<>>, 0, 0, F1, F2, _) ->
    #'Gateway'{gateway_id = F1, ws_addr = F2}.

d_field_Gateway_gateway_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Gateway_gateway_id(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_Gateway_gateway_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Gateway(Rest, 0, 0, NewFValue, F2,
			       TrUserData).


d_field_Gateway_ws_addr(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_Gateway_ws_addr(Rest, N + 7, X bsl N + Acc, F1,
			    F2, TrUserData);
d_field_Gateway_ws_addr(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Gateway(Rest2, 0, 0, F1, NewFValue,
			       TrUserData).


skip_varint_Gateway(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    skip_varint_Gateway(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_Gateway(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, TrUserData) ->
    dfp_read_field_def_Gateway(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_length_delimited_Gateway(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Gateway(Rest, N + 7,
				  X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_Gateway(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Gateway(Rest2, 0, 0, F1, F2,
			       TrUserData).


skip_32_Gateway(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_Gateway(Rest, Z1, Z2, F1, F2,
			       TrUserData).


skip_64_Gateway(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		TrUserData) ->
    dfp_read_field_def_Gateway(Rest, Z1, Z2, F1, F2,
			       TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'UserLoginOtherPlace'{} ->
	  merge_msg_UserLoginOtherPlace(Prev, New, TrUserData);
      #'GsHalt'{} -> merge_msg_GsHalt(Prev, New, TrUserData);
      #'ClientLogoutReq'{} ->
	  merge_msg_ClientLogoutReq(Prev, New, TrUserData);
      #'ReportServerInfo'{} ->
	  merge_msg_ReportServerInfo(Prev, New, TrUserData);
      #'ClientLoginReq'{} ->
	  merge_msg_ClientLoginReq(Prev, New, TrUserData);
      #'Gateway'{} -> merge_msg_Gateway(Prev, New, TrUserData)
    end.

merge_msg_UserLoginOtherPlace(#'UserLoginOtherPlace'{uid
							 = PFuid},
			      #'UserLoginOtherPlace'{uid = NFuid}, _) ->
    #'UserLoginOtherPlace'{uid =
			       if NFuid =:= undefined -> PFuid;
				  true -> NFuid
			       end}.

merge_msg_GsHalt(#'GsHalt'{serverType = PFserverType,
			   serverID = PFserverID},
		 #'GsHalt'{serverType = NFserverType,
			   serverID = NFserverID},
		 _) ->
    #'GsHalt'{serverType =
		  if NFserverType =:= undefined -> PFserverType;
		     true -> NFserverType
		  end,
	      serverID =
		  if NFserverID =:= undefined -> PFserverID;
		     true -> NFserverID
		  end}.

merge_msg_ClientLogoutReq(#'ClientLogoutReq'{uid =
						 PFuid,
					     serverID = PFserverID},
			  #'ClientLogoutReq'{uid = NFuid,
					     serverID = NFserverID},
			  _) ->
    #'ClientLogoutReq'{uid =
			   if NFuid =:= undefined -> PFuid;
			      true -> NFuid
			   end,
		       serverID =
			   if NFserverID =:= undefined -> PFserverID;
			      true -> NFserverID
			   end}.

merge_msg_ReportServerInfo(#'ReportServerInfo'{serverType
						   = PFserverType,
					       serverID = PFserverID,
					       serverURI = PFserverURI,
					       max = PFmax},
			   #'ReportServerInfo'{serverType = NFserverType,
					       serverID = NFserverID,
					       serverURI = NFserverURI,
					       max = NFmax},
			   _) ->
    #'ReportServerInfo'{serverType =
			    if NFserverType =:= undefined -> PFserverType;
			       true -> NFserverType
			    end,
			serverID =
			    if NFserverID =:= undefined -> PFserverID;
			       true -> NFserverID
			    end,
			serverURI =
			    if NFserverURI =:= undefined -> PFserverURI;
			       true -> NFserverURI
			    end,
			max =
			    if NFmax =:= undefined -> PFmax;
			       true -> NFmax
			    end}.

merge_msg_ClientLoginReq(#'ClientLoginReq'{uid = PFuid,
					   server_type = PFserver_type,
					   server_id = PFserver_id,
					   gateway_id = PFgateway_id},
			 #'ClientLoginReq'{uid = NFuid,
					   server_type = NFserver_type,
					   server_id = NFserver_id,
					   gateway_id = NFgateway_id},
			 _) ->
    #'ClientLoginReq'{uid =
			  if NFuid =:= undefined -> PFuid;
			     true -> NFuid
			  end,
		      server_type =
			  if NFserver_type =:= undefined -> PFserver_type;
			     true -> NFserver_type
			  end,
		      server_id =
			  if NFserver_id =:= undefined -> PFserver_id;
			     true -> NFserver_id
			  end,
		      gateway_id =
			  if NFgateway_id =:= undefined -> PFgateway_id;
			     true -> NFgateway_id
			  end}.

merge_msg_Gateway(#'Gateway'{},
		  #'Gateway'{gateway_id = NFgateway_id,
			     ws_addr = NFws_addr},
		  _) ->
    #'Gateway'{gateway_id = NFgateway_id,
	       ws_addr = NFws_addr}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'UserLoginOtherPlace'{} ->
	  v_msg_UserLoginOtherPlace(Msg, ['UserLoginOtherPlace'],
				    TrUserData);
      #'GsHalt'{} ->
	  v_msg_GsHalt(Msg, ['GsHalt'], TrUserData);
      #'ClientLogoutReq'{} ->
	  v_msg_ClientLogoutReq(Msg, ['ClientLogoutReq'],
				TrUserData);
      #'ReportServerInfo'{} ->
	  v_msg_ReportServerInfo(Msg, ['ReportServerInfo'],
				 TrUserData);
      #'ClientLoginReq'{} ->
	  v_msg_ClientLoginReq(Msg, ['ClientLoginReq'],
			       TrUserData);
      #'Gateway'{} ->
	  v_msg_Gateway(Msg, ['Gateway'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_UserLoginOtherPlace/3}).
v_msg_UserLoginOtherPlace(#'UserLoginOtherPlace'{uid =
						     F1},
			  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GsHalt/3}).
v_msg_GsHalt(#'GsHalt'{serverType = F1, serverID = F2},
	     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [serverType | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [serverID | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ClientLogoutReq/3}).
v_msg_ClientLogoutReq(#'ClientLogoutReq'{uid = F1,
					 serverID = F2},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [serverID | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ReportServerInfo/3}).
v_msg_ReportServerInfo(#'ReportServerInfo'{serverType =
					       F1,
					   serverID = F2, serverURI = F3,
					   max = F4},
		       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [serverType | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [serverID | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [serverURI | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [max | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ClientLoginReq/3}).
v_msg_ClientLoginReq(#'ClientLoginReq'{uid = F1,
				       server_type = F2, server_id = F3,
				       gateway_id = F4},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [server_type | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [server_id | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [gateway_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Gateway/3}).
v_msg_Gateway(#'Gateway'{gateway_id = F1, ws_addr = F2},
	      Path, _) ->
    v_type_int32(F1, [gateway_id | Path]),
    v_type_string(F2, [ws_addr | Path]),
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, 'UserLoginOtherPlace'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'GsHalt'},
      [#field{name = serverType, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = serverID, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ClientLogoutReq'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = serverID, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ReportServerInfo'},
      [#field{name = serverType, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = serverID, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = serverURI, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = max, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, 'ClientLoginReq'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = server_type, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = server_id, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = gateway_id, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Gateway'},
      [#field{name = gateway_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = ws_addr, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]}].


get_msg_names() ->
    ['UserLoginOtherPlace', 'GsHalt', 'ClientLogoutReq',
     'ReportServerInfo', 'ClientLoginReq', 'Gateway'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('UserLoginOtherPlace') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('GsHalt') ->
    [#field{name = serverType, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = serverID, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ClientLogoutReq') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = serverID, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ReportServerInfo') ->
    [#field{name = serverType, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = serverID, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = serverURI, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = max, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def('ClientLoginReq') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = server_type, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = server_id, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = gateway_id, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Gateway') ->
    [#field{name = gateway_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = ws_addr, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'framework.gateway'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
