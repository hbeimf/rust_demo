%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(gw_proto).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("gw_proto.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'CommonStatus'() :: #'CommonStatus'{}.
-type 'EnterGameRes'() :: #'EnterGameRes'{}.
-type 'EnterGameReq'() :: #'EnterGameReq'{}.
-type 'GetEntranceRes'() :: #'GetEntranceRes'{}.
-type 'GetEntranceReq'() :: #'GetEntranceReq'{}.
-type 'VerifyRes'() :: #'VerifyRes'{}.
-type 'VerifyReq'() :: #'VerifyReq'{}.
-export_type(['CommonStatus'/0, 'EnterGameRes'/0, 'EnterGameReq'/0, 'GetEntranceRes'/0, 'GetEntranceReq'/0, 'VerifyRes'/0, 'VerifyReq'/0]).


-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'CommonStatus'{} ->
	  e_msg_CommonStatus(Msg, TrUserData);
      #'EnterGameRes'{} ->
	  e_msg_EnterGameRes(Msg, TrUserData);
      #'EnterGameReq'{} ->
	  e_msg_EnterGameReq(Msg, TrUserData);
      #'GetEntranceRes'{} ->
	  e_msg_GetEntranceRes(Msg, TrUserData);
      #'GetEntranceReq'{} ->
	  e_msg_GetEntranceReq(Msg, TrUserData);
      #'VerifyRes'{} -> e_msg_VerifyRes(Msg, TrUserData);
      #'VerifyReq'{} -> e_msg_VerifyReq(Msg, TrUserData)
    end.



e_msg_CommonStatus(Msg, TrUserData) ->
    e_msg_CommonStatus(Msg, <<>>, TrUserData).


e_msg_CommonStatus(#'CommonStatus'{code = F1, msg = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_EnterGameRes(Msg, TrUserData) ->
    e_msg_EnterGameRes(Msg, <<>>, TrUserData).


e_msg_EnterGameRes(#'EnterGameRes'{code = F1, msg = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_EnterGameReq(Msg, TrUserData) ->
    e_msg_EnterGameReq(Msg, <<>>, TrUserData).


e_msg_EnterGameReq(#'EnterGameReq'{uid = F1,
				   server_type = F2, server_id = F3},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_GetEntranceRes(Msg, TrUserData) ->
    e_msg_GetEntranceRes(Msg, <<>>, TrUserData).


e_msg_GetEntranceRes(#'GetEntranceRes'{entrace_url =
					   F1},
		     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_GetEntranceReq(Msg, TrUserData) ->
    e_msg_GetEntranceReq(Msg, <<>>, TrUserData).


e_msg_GetEntranceReq(#'GetEntranceReq'{identity = F1,
				       channel_id = F2, server_type = F3},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_VerifyRes(Msg, TrUserData) ->
    e_msg_VerifyRes(Msg, <<>>, TrUserData).


e_msg_VerifyRes(#'VerifyRes'{code = F1, uid = F2}, Bin,
		TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_type_int32(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_VerifyReq(Msg, TrUserData) ->
    e_msg_VerifyReq(Msg, <<>>, TrUserData).


e_msg_VerifyReq(#'VerifyReq'{identity = F1,
			     channel_id = F2},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case iolist_size(TrF2) of
	       0 -> B1;
	       _ -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.



e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'CommonStatus' -> d_msg_CommonStatus(Bin, TrUserData);
      'EnterGameRes' -> d_msg_EnterGameRes(Bin, TrUserData);
      'EnterGameReq' -> d_msg_EnterGameReq(Bin, TrUserData);
      'GetEntranceRes' ->
	  d_msg_GetEntranceRes(Bin, TrUserData);
      'GetEntranceReq' ->
	  d_msg_GetEntranceReq(Bin, TrUserData);
      'VerifyRes' -> d_msg_VerifyRes(Bin, TrUserData);
      'VerifyReq' -> d_msg_VerifyReq(Bin, TrUserData)
    end.



d_msg_CommonStatus(Bin, TrUserData) ->
    dfp_read_field_def_CommonStatus(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_CommonStatus(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_CommonStatus_code(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_CommonStatus(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_CommonStatus_msg(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_CommonStatus(<<>>, 0, 0, F1, F2,
				_) ->
    #'CommonStatus'{code = F1, msg = F2};
dfp_read_field_def_CommonStatus(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_CommonStatus(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_CommonStatus(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CommonStatus(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_CommonStatus(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_CommonStatus_code(Rest, 0, 0, F1, F2,
				    TrUserData);
      18 ->
	  d_field_CommonStatus_msg(Rest, 0, 0, F1, F2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommonStatus(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_CommonStatus(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_CommonStatus(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_CommonStatus(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_CommonStatus(<<>>, 0, 0, F1, F2, _) ->
    #'CommonStatus'{code = F1, msg = F2}.

d_field_CommonStatus_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_code(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_CommonStatus_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_CommonStatus(Rest, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_CommonStatus_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_CommonStatus_msg(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_CommonStatus_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_CommonStatus(Rest2, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_CommonStatus(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_CommonStatus(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_CommonStatus(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_CommonStatus(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CommonStatus(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_CommonStatus(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommonStatus(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_CommonStatus(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_CommonStatus(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_CommonStatus(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_EnterGameRes(Bin, TrUserData) ->
    dfp_read_field_def_EnterGameRes(Bin, 0, 0,
				    id(0, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_EnterGameRes(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_EnterGameRes_code(Rest, Z1, Z2, F1, F2,
			      TrUserData);
dfp_read_field_def_EnterGameRes(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, TrUserData) ->
    d_field_EnterGameRes_msg(Rest, Z1, Z2, F1, F2,
			     TrUserData);
dfp_read_field_def_EnterGameRes(<<>>, 0, 0, F1, F2,
				_) ->
    #'EnterGameRes'{code = F1, msg = F2};
dfp_read_field_def_EnterGameRes(Other, Z1, Z2, F1, F2,
				TrUserData) ->
    dg_read_field_def_EnterGameRes(Other, Z1, Z2, F1, F2,
				   TrUserData).

dg_read_field_def_EnterGameRes(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnterGameRes(Rest, N + 7,
				   X bsl N + Acc, F1, F2, TrUserData);
dg_read_field_def_EnterGameRes(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_EnterGameRes_code(Rest, 0, 0, F1, F2,
				    TrUserData);
      18 ->
	  d_field_EnterGameRes_msg(Rest, 0, 0, F1, F2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnterGameRes(Rest, 0, 0, F1, F2,
					 TrUserData);
	    1 ->
		skip_64_EnterGameRes(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_EnterGameRes(Rest, 0, 0, F1, F2,
						   TrUserData);
	    5 ->
		skip_32_EnterGameRes(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_EnterGameRes(<<>>, 0, 0, F1, F2, _) ->
    #'EnterGameRes'{code = F1, msg = F2}.

d_field_EnterGameRes_code(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EnterGameRes_code(Rest, N + 7, X bsl N + Acc,
			      F1, F2, TrUserData);
d_field_EnterGameRes_code(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_EnterGameRes(Rest, 0, 0, NewFValue,
				    F2, TrUserData).


d_field_EnterGameRes_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_EnterGameRes_msg(Rest, N + 7, X bsl N + Acc, F1,
			     F2, TrUserData);
d_field_EnterGameRes_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_EnterGameRes(Rest2, 0, 0, F1,
				    NewFValue, TrUserData).


skip_varint_EnterGameRes(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    skip_varint_EnterGameRes(Rest, Z1, Z2, F1, F2,
			     TrUserData);
skip_varint_EnterGameRes(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, TrUserData) ->
    dfp_read_field_def_EnterGameRes(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_length_delimited_EnterGameRes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnterGameRes(Rest, N + 7,
				       X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_EnterGameRes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnterGameRes(Rest2, 0, 0, F1, F2,
				    TrUserData).


skip_32_EnterGameRes(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_EnterGameRes(Rest, Z1, Z2, F1, F2,
				    TrUserData).


skip_64_EnterGameRes(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, TrUserData) ->
    dfp_read_field_def_EnterGameRes(Rest, Z1, Z2, F1, F2,
				    TrUserData).


d_msg_EnterGameReq(Bin, TrUserData) ->
    dfp_read_field_def_EnterGameReq(Bin, 0, 0,
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_EnterGameReq(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, TrUserData) ->
    d_field_EnterGameReq_uid(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
dfp_read_field_def_EnterGameReq(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, TrUserData) ->
    d_field_EnterGameReq_server_type(Rest, Z1, Z2, F1, F2,
				     F3, TrUserData);
dfp_read_field_def_EnterGameReq(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3, TrUserData) ->
    d_field_EnterGameReq_server_id(Rest, Z1, Z2, F1, F2, F3,
				   TrUserData);
dfp_read_field_def_EnterGameReq(<<>>, 0, 0, F1, F2, F3,
				_) ->
    #'EnterGameReq'{uid = F1, server_type = F2,
		    server_id = F3};
dfp_read_field_def_EnterGameReq(Other, Z1, Z2, F1, F2,
				F3, TrUserData) ->
    dg_read_field_def_EnterGameReq(Other, Z1, Z2, F1, F2,
				   F3, TrUserData).

dg_read_field_def_EnterGameReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EnterGameReq(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_EnterGameReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EnterGameReq_uid(Rest, 0, 0, F1, F2, F3,
				   TrUserData);
      18 ->
	  d_field_EnterGameReq_server_type(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
      26 ->
	  d_field_EnterGameReq_server_id(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EnterGameReq(Rest, 0, 0, F1, F2, F3,
					 TrUserData);
	    1 ->
		skip_64_EnterGameReq(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
	    2 ->
		skip_length_delimited_EnterGameReq(Rest, 0, 0, F1, F2,
						   F3, TrUserData);
	    5 ->
		skip_32_EnterGameReq(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_EnterGameReq(<<>>, 0, 0, F1, F2, F3,
			       _) ->
    #'EnterGameReq'{uid = F1, server_type = F2,
		    server_id = F3}.

d_field_EnterGameReq_uid(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnterGameReq_uid(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
d_field_EnterGameReq_uid(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_EnterGameReq(Rest2, 0, 0, NewFValue,
				    F2, F3, TrUserData).


d_field_EnterGameReq_server_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnterGameReq_server_type(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnterGameReq_server_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_EnterGameReq(Rest2, 0, 0, F1,
				    NewFValue, F3, TrUserData).


d_field_EnterGameReq_server_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_EnterGameReq_server_id(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_EnterGameReq_server_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_EnterGameReq(Rest2, 0, 0, F1, F2,
				    NewFValue, TrUserData).


skip_varint_EnterGameReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, TrUserData) ->
    skip_varint_EnterGameReq(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
skip_varint_EnterGameReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_EnterGameReq(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData).


skip_length_delimited_EnterGameReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_EnterGameReq(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_EnterGameReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EnterGameReq(Rest2, 0, 0, F1, F2, F3,
				    TrUserData).


skip_32_EnterGameReq(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, TrUserData) ->
    dfp_read_field_def_EnterGameReq(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData).


skip_64_EnterGameReq(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, TrUserData) ->
    dfp_read_field_def_EnterGameReq(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData).


d_msg_GetEntranceRes(Bin, TrUserData) ->
    dfp_read_field_def_GetEntranceRes(Bin, 0, 0,
				      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_GetEntranceRes(<<10, Rest/binary>>,
				  Z1, Z2, F1, TrUserData) ->
    d_field_GetEntranceRes_entrace_url(Rest, Z1, Z2, F1,
				       TrUserData);
dfp_read_field_def_GetEntranceRes(<<>>, 0, 0, F1, _) ->
    #'GetEntranceRes'{entrace_url = F1};
dfp_read_field_def_GetEntranceRes(Other, Z1, Z2, F1,
				  TrUserData) ->
    dg_read_field_def_GetEntranceRes(Other, Z1, Z2, F1,
				     TrUserData).

dg_read_field_def_GetEntranceRes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetEntranceRes(Rest, N + 7,
				     X bsl N + Acc, F1, TrUserData);
dg_read_field_def_GetEntranceRes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetEntranceRes_entrace_url(Rest, 0, 0, F1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetEntranceRes(Rest, 0, 0, F1, TrUserData);
	    1 -> skip_64_GetEntranceRes(Rest, 0, 0, F1, TrUserData);
	    2 ->
		skip_length_delimited_GetEntranceRes(Rest, 0, 0, F1,
						     TrUserData);
	    5 -> skip_32_GetEntranceRes(Rest, 0, 0, F1, TrUserData)
	  end
    end;
dg_read_field_def_GetEntranceRes(<<>>, 0, 0, F1, _) ->
    #'GetEntranceRes'{entrace_url = F1}.

d_field_GetEntranceRes_entrace_url(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, TrUserData)
    when N < 57 ->
    d_field_GetEntranceRes_entrace_url(Rest, N + 7,
				       X bsl N + Acc, F1, TrUserData);
d_field_GetEntranceRes_entrace_url(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetEntranceRes(Rest2, 0, 0,
				      NewFValue, TrUserData).


skip_varint_GetEntranceRes(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    skip_varint_GetEntranceRes(Rest, Z1, Z2, F1,
			       TrUserData);
skip_varint_GetEntranceRes(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, TrUserData) ->
    dfp_read_field_def_GetEntranceRes(Rest, Z1, Z2, F1,
				      TrUserData).


skip_length_delimited_GetEntranceRes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetEntranceRes(Rest, N + 7,
					 X bsl N + Acc, F1, TrUserData);
skip_length_delimited_GetEntranceRes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetEntranceRes(Rest2, 0, 0, F1,
				      TrUserData).


skip_32_GetEntranceRes(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetEntranceRes(Rest, Z1, Z2, F1,
				      TrUserData).


skip_64_GetEntranceRes(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, TrUserData) ->
    dfp_read_field_def_GetEntranceRes(Rest, Z1, Z2, F1,
				      TrUserData).


d_msg_GetEntranceReq(Bin, TrUserData) ->
    dfp_read_field_def_GetEntranceReq(Bin, 0, 0,
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_GetEntranceReq(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_GetEntranceReq_identity(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_GetEntranceReq(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_GetEntranceReq_channel_id(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData);
dfp_read_field_def_GetEntranceReq(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_GetEntranceReq_server_type(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData);
dfp_read_field_def_GetEntranceReq(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #'GetEntranceReq'{identity = F1, channel_id = F2,
		      server_type = F3};
dfp_read_field_def_GetEntranceReq(Other, Z1, Z2, F1, F2,
				  F3, TrUserData) ->
    dg_read_field_def_GetEntranceReq(Other, Z1, Z2, F1, F2,
				     F3, TrUserData).

dg_read_field_def_GetEntranceReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetEntranceReq(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_GetEntranceReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetEntranceReq_identity(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      18 ->
	  d_field_GetEntranceReq_channel_id(Rest, 0, 0, F1, F2,
					    F3, TrUserData);
      26 ->
	  d_field_GetEntranceReq_server_type(Rest, 0, 0, F1, F2,
					     F3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetEntranceReq(Rest, 0, 0, F1, F2, F3,
					   TrUserData);
	    1 ->
		skip_64_GetEntranceReq(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
	    2 ->
		skip_length_delimited_GetEntranceReq(Rest, 0, 0, F1, F2,
						     F3, TrUserData);
	    5 ->
		skip_32_GetEntranceReq(Rest, 0, 0, F1, F2, F3,
				       TrUserData)
	  end
    end;
dg_read_field_def_GetEntranceReq(<<>>, 0, 0, F1, F2, F3,
				 _) ->
    #'GetEntranceReq'{identity = F1, channel_id = F2,
		      server_type = F3}.

d_field_GetEntranceReq_identity(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_GetEntranceReq_identity(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_GetEntranceReq_identity(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetEntranceReq(Rest2, 0, 0,
				      NewFValue, F2, F3, TrUserData).


d_field_GetEntranceReq_channel_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_GetEntranceReq_channel_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_GetEntranceReq_channel_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetEntranceReq(Rest2, 0, 0, F1,
				      NewFValue, F3, TrUserData).


d_field_GetEntranceReq_server_type(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_GetEntranceReq_server_type(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_GetEntranceReq_server_type(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_GetEntranceReq(Rest2, 0, 0, F1, F2,
				      NewFValue, TrUserData).


skip_varint_GetEntranceReq(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_GetEntranceReq(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
skip_varint_GetEntranceReq(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_GetEntranceReq(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_length_delimited_GetEntranceReq(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetEntranceReq(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_GetEntranceReq(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetEntranceReq(Rest2, 0, 0, F1, F2,
				      F3, TrUserData).


skip_32_GetEntranceReq(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_GetEntranceReq(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


skip_64_GetEntranceReq(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, TrUserData) ->
    dfp_read_field_def_GetEntranceReq(Rest, Z1, Z2, F1, F2,
				      F3, TrUserData).


d_msg_VerifyRes(Bin, TrUserData) ->
    dfp_read_field_def_VerifyRes(Bin, 0, 0,
				 id(0, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_VerifyRes(<<8, Rest/binary>>, Z1, Z2,
			     F1, F2, TrUserData) ->
    d_field_VerifyRes_code(Rest, Z1, Z2, F1, F2,
			   TrUserData);
dfp_read_field_def_VerifyRes(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_VerifyRes_uid(Rest, Z1, Z2, F1, F2, TrUserData);
dfp_read_field_def_VerifyRes(<<>>, 0, 0, F1, F2, _) ->
    #'VerifyRes'{code = F1, uid = F2};
dfp_read_field_def_VerifyRes(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_VerifyRes(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_VerifyRes(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VerifyRes(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_VerifyRes(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_VerifyRes_code(Rest, 0, 0, F1, F2, TrUserData);
      18 ->
	  d_field_VerifyRes_uid(Rest, 0, 0, F1, F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VerifyRes(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_VerifyRes(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_VerifyRes(Rest, 0, 0, F1, F2,
						TrUserData);
	    5 -> skip_32_VerifyRes(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_VerifyRes(<<>>, 0, 0, F1, F2, _) ->
    #'VerifyRes'{code = F1, uid = F2}.

d_field_VerifyRes_code(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_VerifyRes_code(Rest, N + 7, X bsl N + Acc, F1,
			   F2, TrUserData);
d_field_VerifyRes_code(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_VerifyRes(Rest, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_VerifyRes_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, TrUserData)
    when N < 57 ->
    d_field_VerifyRes_uid(Rest, N + 7, X bsl N + Acc, F1,
			  F2, TrUserData);
d_field_VerifyRes_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_VerifyRes(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_VerifyRes(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_VerifyRes(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_VerifyRes(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_VerifyRes(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_VerifyRes(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VerifyRes(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_32_VerifyRes(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_VerifyRes(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_VerifyRes(Rest, Z1, Z2, F1, F2,
				 TrUserData).


d_msg_VerifyReq(Bin, TrUserData) ->
    dfp_read_field_def_VerifyReq(Bin, 0, 0,
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_VerifyReq(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_VerifyReq_identity(Rest, Z1, Z2, F1, F2,
			       TrUserData);
dfp_read_field_def_VerifyReq(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, TrUserData) ->
    d_field_VerifyReq_channel_id(Rest, Z1, Z2, F1, F2,
				 TrUserData);
dfp_read_field_def_VerifyReq(<<>>, 0, 0, F1, F2, _) ->
    #'VerifyReq'{identity = F1, channel_id = F2};
dfp_read_field_def_VerifyReq(Other, Z1, Z2, F1, F2,
			     TrUserData) ->
    dg_read_field_def_VerifyReq(Other, Z1, Z2, F1, F2,
				TrUserData).

dg_read_field_def_VerifyReq(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_VerifyReq(Rest, N + 7, X bsl N + Acc,
				F1, F2, TrUserData);
dg_read_field_def_VerifyReq(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_VerifyReq_identity(Rest, 0, 0, F1, F2,
				     TrUserData);
      18 ->
	  d_field_VerifyReq_channel_id(Rest, 0, 0, F1, F2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VerifyReq(Rest, 0, 0, F1, F2, TrUserData);
	    1 -> skip_64_VerifyReq(Rest, 0, 0, F1, F2, TrUserData);
	    2 ->
		skip_length_delimited_VerifyReq(Rest, 0, 0, F1, F2,
						TrUserData);
	    5 -> skip_32_VerifyReq(Rest, 0, 0, F1, F2, TrUserData)
	  end
    end;
dg_read_field_def_VerifyReq(<<>>, 0, 0, F1, F2, _) ->
    #'VerifyReq'{identity = F1, channel_id = F2}.

d_field_VerifyReq_identity(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_VerifyReq_identity(Rest, N + 7, X bsl N + Acc,
			       F1, F2, TrUserData);
d_field_VerifyReq_identity(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyReq(Rest2, 0, 0, NewFValue, F2,
				 TrUserData).


d_field_VerifyReq_channel_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    d_field_VerifyReq_channel_id(Rest, N + 7, X bsl N + Acc,
				 F1, F2, TrUserData);
d_field_VerifyReq_channel_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_VerifyReq(Rest2, 0, 0, F1, NewFValue,
				 TrUserData).


skip_varint_VerifyReq(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    skip_varint_VerifyReq(Rest, Z1, Z2, F1, F2, TrUserData);
skip_varint_VerifyReq(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_length_delimited_VerifyReq(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    skip_length_delimited_VerifyReq(Rest, N + 7,
				    X bsl N + Acc, F1, F2, TrUserData);
skip_length_delimited_VerifyReq(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VerifyReq(Rest2, 0, 0, F1, F2,
				 TrUserData).


skip_32_VerifyReq(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F1, F2,
				 TrUserData).


skip_64_VerifyReq(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  TrUserData) ->
    dfp_read_field_def_VerifyReq(Rest, Z1, Z2, F1, F2,
				 TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'CommonStatus'{} ->
	  merge_msg_CommonStatus(Prev, New, TrUserData);
      #'EnterGameRes'{} ->
	  merge_msg_EnterGameRes(Prev, New, TrUserData);
      #'EnterGameReq'{} ->
	  merge_msg_EnterGameReq(Prev, New, TrUserData);
      #'GetEntranceRes'{} ->
	  merge_msg_GetEntranceRes(Prev, New, TrUserData);
      #'GetEntranceReq'{} ->
	  merge_msg_GetEntranceReq(Prev, New, TrUserData);
      #'VerifyRes'{} ->
	  merge_msg_VerifyRes(Prev, New, TrUserData);
      #'VerifyReq'{} ->
	  merge_msg_VerifyReq(Prev, New, TrUserData)
    end.

merge_msg_CommonStatus(#'CommonStatus'{code = PFcode,
				       msg = PFmsg},
		       #'CommonStatus'{code = NFcode, msg = NFmsg}, _) ->
    #'CommonStatus'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    msg =
			if NFmsg =:= undefined -> PFmsg;
			   true -> NFmsg
			end}.

merge_msg_EnterGameRes(#'EnterGameRes'{code = PFcode,
				       msg = PFmsg},
		       #'EnterGameRes'{code = NFcode, msg = NFmsg}, _) ->
    #'EnterGameRes'{code =
			if NFcode =:= undefined -> PFcode;
			   true -> NFcode
			end,
		    msg =
			if NFmsg =:= undefined -> PFmsg;
			   true -> NFmsg
			end}.

merge_msg_EnterGameReq(#'EnterGameReq'{uid = PFuid,
				       server_type = PFserver_type,
				       server_id = PFserver_id},
		       #'EnterGameReq'{uid = NFuid,
				       server_type = NFserver_type,
				       server_id = NFserver_id},
		       _) ->
    #'EnterGameReq'{uid =
			if NFuid =:= undefined -> PFuid;
			   true -> NFuid
			end,
		    server_type =
			if NFserver_type =:= undefined -> PFserver_type;
			   true -> NFserver_type
			end,
		    server_id =
			if NFserver_id =:= undefined -> PFserver_id;
			   true -> NFserver_id
			end}.

merge_msg_GetEntranceRes(#'GetEntranceRes'{entrace_url =
					       PFentrace_url},
			 #'GetEntranceRes'{entrace_url = NFentrace_url}, _) ->
    #'GetEntranceRes'{entrace_url =
			  if NFentrace_url =:= undefined -> PFentrace_url;
			     true -> NFentrace_url
			  end}.

merge_msg_GetEntranceReq(#'GetEntranceReq'{identity =
					       PFidentity,
					   channel_id = PFchannel_id,
					   server_type = PFserver_type},
			 #'GetEntranceReq'{identity = NFidentity,
					   channel_id = NFchannel_id,
					   server_type = NFserver_type},
			 _) ->
    #'GetEntranceReq'{identity =
			  if NFidentity =:= undefined -> PFidentity;
			     true -> NFidentity
			  end,
		      channel_id =
			  if NFchannel_id =:= undefined -> PFchannel_id;
			     true -> NFchannel_id
			  end,
		      server_type =
			  if NFserver_type =:= undefined -> PFserver_type;
			     true -> NFserver_type
			  end}.

merge_msg_VerifyRes(#'VerifyRes'{code = PFcode,
				 uid = PFuid},
		    #'VerifyRes'{code = NFcode, uid = NFuid}, _) ->
    #'VerifyRes'{code =
		     if NFcode =:= undefined -> PFcode;
			true -> NFcode
		     end,
		 uid =
		     if NFuid =:= undefined -> PFuid;
			true -> NFuid
		     end}.

merge_msg_VerifyReq(#'VerifyReq'{identity = PFidentity,
				 channel_id = PFchannel_id},
		    #'VerifyReq'{identity = NFidentity,
				 channel_id = NFchannel_id},
		    _) ->
    #'VerifyReq'{identity =
		     if NFidentity =:= undefined -> PFidentity;
			true -> NFidentity
		     end,
		 channel_id =
		     if NFchannel_id =:= undefined -> PFchannel_id;
			true -> NFchannel_id
		     end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'CommonStatus'{} ->
	  v_msg_CommonStatus(Msg, ['CommonStatus'], TrUserData);
      #'EnterGameRes'{} ->
	  v_msg_EnterGameRes(Msg, ['EnterGameRes'], TrUserData);
      #'EnterGameReq'{} ->
	  v_msg_EnterGameReq(Msg, ['EnterGameReq'], TrUserData);
      #'GetEntranceRes'{} ->
	  v_msg_GetEntranceRes(Msg, ['GetEntranceRes'],
			       TrUserData);
      #'GetEntranceReq'{} ->
	  v_msg_GetEntranceReq(Msg, ['GetEntranceReq'],
			       TrUserData);
      #'VerifyRes'{} ->
	  v_msg_VerifyRes(Msg, ['VerifyRes'], TrUserData);
      #'VerifyReq'{} ->
	  v_msg_VerifyReq(Msg, ['VerifyReq'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_CommonStatus/3}).
v_msg_CommonStatus(#'CommonStatus'{code = F1, msg = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_EnterGameRes/3}).
v_msg_EnterGameRes(#'EnterGameRes'{code = F1, msg = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_EnterGameReq/3}).
v_msg_EnterGameReq(#'EnterGameReq'{uid = F1,
				   server_type = F2, server_id = F3},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [uid | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [server_type | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [server_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetEntranceRes/3}).
v_msg_GetEntranceRes(#'GetEntranceRes'{entrace_url =
					   F1},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [entrace_url | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_GetEntranceReq/3}).
v_msg_GetEntranceReq(#'GetEntranceReq'{identity = F1,
				       channel_id = F2, server_type = F3},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [identity | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [channel_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [server_type | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_VerifyRes/3}).
v_msg_VerifyRes(#'VerifyRes'{code = F1, uid = F2}, Path,
		_) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [uid | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_VerifyReq/3}).
v_msg_VerifyReq(#'VerifyReq'{identity = F1,
			     channel_id = F2},
		Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [identity | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [channel_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, 'CommonStatus'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'EnterGameRes'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'EnterGameReq'},
      [#field{name = uid, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = server_type, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = server_id, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'GetEntranceRes'},
      [#field{name = entrace_url, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'GetEntranceReq'},
      [#field{name = identity, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = server_type, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'VerifyRes'},
      [#field{name = code, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = uid, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'VerifyReq'},
      [#field{name = identity, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['CommonStatus', 'EnterGameRes', 'EnterGameReq',
     'GetEntranceRes', 'GetEntranceReq', 'VerifyRes',
     'VerifyReq'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('CommonStatus') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('EnterGameRes') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('EnterGameReq') ->
    [#field{name = uid, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = server_type, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = server_id, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('GetEntranceRes') ->
    [#field{name = entrace_url, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('GetEntranceReq') ->
    [#field{name = identity, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = server_type, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('VerifyRes') ->
    [#field{name = code, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = uid, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('VerifyReq') ->
    [#field{name = identity, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'GW'.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
